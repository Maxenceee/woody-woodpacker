/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   payload.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mgama <mgama@student.42lyon.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/07/02 22:36:41 by mgama             #+#    #+#             */
/*   Updated: 2024/07/25 22:51:30 by mgama            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PAYLOAD_H
# define PAYLOAD_H

#include "types.h"

// #define payload_64 CDECL_NORM(payload_aes128_64)
// #define payload_64_size CDECL_NORM(payload_aes128_64_size)

// extern uint8_t	payload_64;
// extern uint64_t	payload_64_size;

// #define wd_playload &payload_64
// #define WB_PAYLOAD_SIZE payload_64_size

#define wd_playload wd_playload_64
#define WB_PAYLOAD_SIZE sizeof(wd_playload_64)

#define WD_PAYLOAD_RETURN_ADDR (24 + 16 + 4) // 3 * sizeof(uint64_t) + sizeof(aes_key) + sizeof(int32_t)
#define WD_PAYLOAD_OFF_KEY (24 + 16) // 3 * sizeof(uint64_t) + sizeof(aes_key)
#define WD_PAYLOAD_OFF_DATA_ADDR (24) // 3 * sizeof(uint64_t) 
#define WD_PAYLOAD_OFF_DATA_START (16) // 2 * sizeof(uint64_t)
#define WD_PAYLOAD_OFF_DATA_SIZE (8) //  sizeof(uint64_t)

/**
 * INFO: Built-in example
 */

// static const unsigned char wd_playload_64[] = {
// 	0x50, 0x52, 0x56, 0x57, 0xeb, 0x0f, 0x2e, 0x2e, 0x2e, 0x2e, 0x57, 0x4f, 0x4f, 0x44, 0x59, 0x2e,
// 	0x2e, 0x2e, 0x2e, 0x0a, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48,
// 	0x8d, 0x35, 0xe0, 0xff, 0xff, 0xff, 0xba, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x5f, 0x5e, 0x5a,
// 	0x58, 0xe9, 0x00, 0x03, 0x02, 0x01, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
// 	0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
// 	0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
// 	0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
// 	0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xcc, 0xcc,
// 	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd
// };
// static const unsigned char wd_playload_64[] = {
//     0x9c, 0x50, 0x57, 0x56, 0x54, 0x52, 0x51, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0x48,
//     0x8d, 0x35, 0x3c, 0x00, 0x00, 0x00, 0xba, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x4c, 0x8d, 0x25,
//     0xdc, 0xff, 0xff, 0xff, 0x4c, 0x2b, 0x25, 0xa4, 0x01, 0x00, 0x00, 0xeb, 0x34, 0x66, 0x0f, 0x70,
//     0xd2, 0xff, 0xc5, 0xe1, 0x73, 0xf9, 0x04, 0x66, 0x0f, 0xef, 0xcb, 0xc5, 0xe1, 0x73, 0xf9, 0x04,
//     0x66, 0x0f, 0xef, 0xcb, 0xc5, 0xe1, 0x73, 0xf9, 0x04, 0x66, 0x0f, 0xef, 0xcb, 0x66, 0x0f, 0xef,
//     0xca, 0xc3, 0x2e, 0x2e, 0x2e, 0x2e, 0x57, 0x4f, 0x4f, 0x44, 0x59, 0x2e, 0x2e, 0x2e, 0x2e, 0x0a,
//     0x00, 0xf3, 0x0f, 0x6f, 0x0d, 0x4e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x57, 0x01, 0x00, 0x00,
//     0x4c, 0x01, 0xe0, 0x48, 0x8b, 0x15, 0x5d, 0x01, 0x00, 0x00, 0xf3, 0x0f, 0x6f, 0xc1, 0x66, 0x0f,
//     0x3a, 0xdf, 0xd1, 0x01, 0xe8, 0xa4, 0xff, 0xff, 0xff, 0xf3, 0x0f, 0x6f, 0xe1, 0x66, 0x0f, 0x3a,
//     0xdf, 0xd1, 0x02, 0xe8, 0x95, 0xff, 0xff, 0xff, 0xf3, 0x0f, 0x6f, 0xe9, 0x66, 0x0f, 0x3a, 0xdf,
//     0xd1, 0x04, 0xe8, 0x86, 0xff, 0xff, 0xff, 0xf3, 0x0f, 0x6f, 0xf1, 0x66, 0x0f, 0x3a, 0xdf, 0xd1,
//     0x08, 0xe8, 0x77, 0xff, 0xff, 0xff, 0xf3, 0x0f, 0x6f, 0xf9, 0x66, 0x0f, 0x3a, 0xdf, 0xd1, 0x10,
//     0xe8, 0x68, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xc1, 0x66, 0x0f, 0x3a, 0xdf, 0xd1, 0x20,
//     0xe8, 0x58, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xc9, 0x66, 0x0f, 0x3a, 0xdf, 0xd1, 0x40,
//     0xe8, 0x48, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xd1, 0x66, 0x0f, 0x3a, 0xdf, 0xd1, 0x80,
//     0xe8, 0x38, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xd9, 0x66, 0x0f, 0x3a, 0xdf, 0xd1, 0x1b,
//     0xe8, 0x28, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xe1, 0x66, 0x0f, 0x3a, 0xdf, 0xd1, 0x36,
//     0xe8, 0x18, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xe9, 0x66, 0x0f, 0x38, 0xdb, 0xe4, 0x66,
//     0x0f, 0x38, 0xdb, 0xed, 0x66, 0x0f, 0x38, 0xdb, 0xf6, 0x66, 0x0f, 0x38, 0xdb, 0xff, 0x66, 0x45,
//     0x0f, 0x38, 0xdb, 0xc0, 0x66, 0x45, 0x0f, 0x38, 0xdb, 0xc9, 0x66, 0x45, 0x0f, 0x38, 0xdb, 0xd2,
//     0x66, 0x45, 0x0f, 0x38, 0xdb, 0xdb, 0x66, 0x45, 0x0f, 0x38, 0xdb, 0xe4, 0x4d, 0x31, 0xc0, 0x48,
//     0x83, 0xea, 0x10, 0xf3, 0x46, 0x0f, 0x6f, 0x3c, 0x00, 0x66, 0x45, 0x0f, 0xef, 0xfd, 0x66, 0x45,
//     0x0f, 0x38, 0xde, 0xfc, 0x66, 0x45, 0x0f, 0x38, 0xde, 0xfb, 0x66, 0x45, 0x0f, 0x38, 0xde, 0xfa,
//     0x66, 0x45, 0x0f, 0x38, 0xde, 0xf9, 0x66, 0x45, 0x0f, 0x38, 0xde, 0xf8, 0x66, 0x44, 0x0f, 0x38,
//     0xde, 0xff, 0x66, 0x44, 0x0f, 0x38, 0xde, 0xfe, 0x66, 0x44, 0x0f, 0x38, 0xde, 0xfd, 0x66, 0x44,
//     0x0f, 0x38, 0xde, 0xfc, 0x66, 0x44, 0x0f, 0x38, 0xdf, 0xf8, 0xf3, 0x46, 0x0f, 0x7f, 0x3c, 0x00,
//     0x49, 0x83, 0xc0, 0x10, 0x4c, 0x39, 0xc2, 0x7e, 0x02, 0xeb, 0xa8, 0x59, 0x5a, 0x5c, 0x5e, 0x5f,
//     0x58, 0x9d, 0xe9, 0xfc, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xbb,
//     0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xee,
//     0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd
// };

static const uint8_t wd_playload_64[] = {
	0x9c, 0x50, 0x57, 0x56, 0x54, 0x52, 0x51, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0x48,
	0x8d, 0x35, 0x3c, 0x00, 0x00, 0x00, 0xba, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x4c, 0x8d, 0x25,
	0xdc, 0xff, 0xff, 0xff, 0x4c, 0x2b, 0x25, 0xad, 0x01, 0x00, 0x00, 0xeb, 0x35, 0x66, 0x0f, 0x70,
	0xd2, 0xff, 0xc5, 0xe1, 0x73, 0xf9, 0x04, 0x66, 0x0f, 0xef, 0xcb, 0xc5, 0xe1, 0x73, 0xf9, 0x04,
	0x66, 0x0f, 0xef, 0xcb, 0xc5, 0xe1, 0x73, 0xf9, 0x04, 0x66, 0x0f, 0xef, 0xcb, 0x66, 0x0f, 0xef,
	0xca, 0xc3, 0x5b, 0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x5d,
	0x0a, 0x00, 0xf3, 0x0f, 0x6f, 0x0d, 0x4e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x57, 0x01, 0x00,
	0x00, 0x4c, 0x01, 0xe0, 0x48, 0x8b, 0x15, 0x55, 0x01, 0x00, 0x00, 0xf3, 0x0f, 0x6f, 0xc1, 0x66,
	0x0f, 0x3a, 0xdf, 0xd1, 0x01, 0xe8, 0xa3, 0xff, 0xff, 0xff, 0xf3, 0x0f, 0x6f, 0xe1, 0x66, 0x0f,
	0x3a, 0xdf, 0xd1, 0x02, 0xe8, 0x94, 0xff, 0xff, 0xff, 0xf3, 0x0f, 0x6f, 0xe9, 0x66, 0x0f, 0x3a,
	0xdf, 0xd1, 0x04, 0xe8, 0x85, 0xff, 0xff, 0xff, 0xf3, 0x0f, 0x6f, 0xf1, 0x66, 0x0f, 0x3a, 0xdf,
	0xd1, 0x08, 0xe8, 0x76, 0xff, 0xff, 0xff, 0xf3, 0x0f, 0x6f, 0xf9, 0x66, 0x0f, 0x3a, 0xdf, 0xd1,
	0x10, 0xe8, 0x67, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xc1, 0x66, 0x0f, 0x3a, 0xdf, 0xd1,
	0x20, 0xe8, 0x57, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xc9, 0x66, 0x0f, 0x3a, 0xdf, 0xd1,
	0x40, 0xe8, 0x47, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xd1, 0x66, 0x0f, 0x3a, 0xdf, 0xd1,
	0x80, 0xe8, 0x37, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xd9, 0x66, 0x0f, 0x3a, 0xdf, 0xd1,
	0x1b, 0xe8, 0x27, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xe1, 0x66, 0x0f, 0x3a, 0xdf, 0xd1,
	0x36, 0xe8, 0x17, 0xff, 0xff, 0xff, 0xf3, 0x44, 0x0f, 0x6f, 0xe9, 0x66, 0x0f, 0x38, 0xdb, 0xe4,
	0x66, 0x0f, 0x38, 0xdb, 0xed, 0x66, 0x0f, 0x38, 0xdb, 0xf6, 0x66, 0x0f, 0x38, 0xdb, 0xff, 0x66,
	0x45, 0x0f, 0x38, 0xdb, 0xc0, 0x66, 0x45, 0x0f, 0x38, 0xdb, 0xc9, 0x66, 0x45, 0x0f, 0x38, 0xdb,
	0xd2, 0x66, 0x45, 0x0f, 0x38, 0xdb, 0xdb, 0x66, 0x45, 0x0f, 0x38, 0xdb, 0xe4, 0x4d, 0x31, 0xc0,
	0x48, 0x83, 0xea, 0x10, 0xf3, 0x46, 0x0f, 0x6f, 0x3c, 0x00, 0x66, 0x45, 0x0f, 0xef, 0xfd, 0x66,
	0x45, 0x0f, 0x38, 0xde, 0xfc, 0x66, 0x45, 0x0f, 0x38, 0xde, 0xfb, 0x66, 0x45, 0x0f, 0x38, 0xde,
	0xfa, 0x66, 0x45, 0x0f, 0x38, 0xde, 0xf9, 0x66, 0x45, 0x0f, 0x38, 0xde, 0xf8, 0x66, 0x44, 0x0f,
	0x38, 0xde, 0xff, 0x66, 0x44, 0x0f, 0x38, 0xde, 0xfe, 0x66, 0x44, 0x0f, 0x38, 0xde, 0xfd, 0x66,
	0x44, 0x0f, 0x38, 0xde, 0xfc, 0x66, 0x44, 0x0f, 0x38, 0xdf, 0xf8, 0xf3, 0x46, 0x0f, 0x7f, 0x3c,
	0x00, 0x49, 0x83, 0xc0, 0x10, 0x4c, 0x39, 0xc2, 0x7e, 0x02, 0xeb, 0xa8, 0x59, 0x5a, 0x5c, 0x5e,
	0x5f, 0x58, 0x9d, 0xe9, 0xfb, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
	0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee
};

#endif /* PAYLOAD_H */