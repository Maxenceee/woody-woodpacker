
woody_woodpacker:     file format elf64-x86-64


Disassembly of section .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 d9 7f 00 00 	mov    0x7fd9(%rip),%rax        # 9fe8 <__gmon_start__@Base>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	call   *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	ret    

Disassembly of section .plt:

0000000000002020 <.plt>:
    2020:	ff 35 52 7f 00 00    	push   0x7f52(%rip)        # 9f78 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 53 7f 00 00 	bnd jmp *0x7f53(%rip)        # 9f80 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	push   $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	push   $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	push   $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	push   $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	push   $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	push   $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmp 2020 <_init+0x20>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	push   $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmp 2020 <_init+0x20>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	push   $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	push   $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	push   $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20cf:	90                   	nop

Disassembly of section .plt.got:

00000000000020d0 <__cxa_finalize@plt>:
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	f2 ff 25 1d 7f 00 00 	bnd jmp *0x7f1d(%rip)        # 9ff8 <__cxa_finalize@GLIBC_2.2.5>
    20db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

00000000000020e0 <free@plt>:
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	f2 ff 25 9d 7e 00 00 	bnd jmp *0x7e9d(%rip)        # 9f88 <free@GLIBC_2.2.5>
    20eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000020f0 <putchar@plt>:
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	f2 ff 25 95 7e 00 00 	bnd jmp *0x7e95(%rip)        # 9f90 <putchar@GLIBC_2.2.5>
    20fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002100 <puts@plt>:
    2100:	f3 0f 1e fa          	endbr64 
    2104:	f2 ff 25 8d 7e 00 00 	bnd jmp *0x7e8d(%rip)        # 9f98 <puts@GLIBC_2.2.5>
    210b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002110 <write@plt>:
    2110:	f3 0f 1e fa          	endbr64 
    2114:	f2 ff 25 85 7e 00 00 	bnd jmp *0x7e85(%rip)        # 9fa0 <write@GLIBC_2.2.5>
    211b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002120 <__stack_chk_fail@plt>:
    2120:	f3 0f 1e fa          	endbr64 
    2124:	f2 ff 25 7d 7e 00 00 	bnd jmp *0x7e7d(%rip)        # 9fa8 <__stack_chk_fail@GLIBC_2.4>
    212b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002130 <printf@plt>:
    2130:	f3 0f 1e fa          	endbr64 
    2134:	f2 ff 25 75 7e 00 00 	bnd jmp *0x7e75(%rip)        # 9fb0 <printf@GLIBC_2.2.5>
    213b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002140 <close@plt>:
    2140:	f3 0f 1e fa          	endbr64 
    2144:	f2 ff 25 6d 7e 00 00 	bnd jmp *0x7e6d(%rip)        # 9fb8 <close@GLIBC_2.2.5>
    214b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002150 <read@plt>:
    2150:	f3 0f 1e fa          	endbr64 
    2154:	f2 ff 25 65 7e 00 00 	bnd jmp *0x7e65(%rip)        # 9fc0 <read@GLIBC_2.2.5>
    215b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002160 <malloc@plt>:
    2160:	f3 0f 1e fa          	endbr64 
    2164:	f2 ff 25 5d 7e 00 00 	bnd jmp *0x7e5d(%rip)        # 9fc8 <malloc@GLIBC_2.2.5>
    216b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002170 <open@plt>:
    2170:	f3 0f 1e fa          	endbr64 
    2174:	f2 ff 25 55 7e 00 00 	bnd jmp *0x7e55(%rip)        # 9fd0 <open@GLIBC_2.2.5>
    217b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

0000000000002180 <_start>:
    2180:	f3 0f 1e fa          	endbr64 
    2184:	31 ed                	xor    %ebp,%ebp
    2186:	49 89 d1             	mov    %rdx,%r9
    2189:	5e                   	pop    %rsi
    218a:	48 89 e2             	mov    %rsp,%rdx
    218d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    2191:	50                   	push   %rax
    2192:	54                   	push   %rsp
    2193:	45 31 c0             	xor    %r8d,%r8d
    2196:	31 c9                	xor    %ecx,%ecx
    2198:	48 8d 3d 42 3a 00 00 	lea    0x3a42(%rip),%rdi        # 5be1 <main>
    219f:	ff 15 33 7e 00 00    	call   *0x7e33(%rip)        # 9fd8 <__libc_start_main@GLIBC_2.34>
    21a5:	f4                   	hlt    
    21a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    21ad:	00 00 00 

00000000000021b0 <deregister_tm_clones>:
    21b0:	48 8d 3d e1 85 00 00 	lea    0x85e1(%rip),%rdi        # a798 <__TMC_END__>
    21b7:	48 8d 05 da 85 00 00 	lea    0x85da(%rip),%rax        # a798 <__TMC_END__>
    21be:	48 39 f8             	cmp    %rdi,%rax
    21c1:	74 15                	je     21d8 <deregister_tm_clones+0x28>
    21c3:	48 8b 05 16 7e 00 00 	mov    0x7e16(%rip),%rax        # 9fe0 <_ITM_deregisterTMCloneTable@Base>
    21ca:	48 85 c0             	test   %rax,%rax
    21cd:	74 09                	je     21d8 <deregister_tm_clones+0x28>
    21cf:	ff e0                	jmp    *%rax
    21d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    21d8:	c3                   	ret    
    21d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000021e0 <register_tm_clones>:
    21e0:	48 8d 3d b1 85 00 00 	lea    0x85b1(%rip),%rdi        # a798 <__TMC_END__>
    21e7:	48 8d 35 aa 85 00 00 	lea    0x85aa(%rip),%rsi        # a798 <__TMC_END__>
    21ee:	48 29 fe             	sub    %rdi,%rsi
    21f1:	48 89 f0             	mov    %rsi,%rax
    21f4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    21f8:	48 c1 f8 03          	sar    $0x3,%rax
    21fc:	48 01 c6             	add    %rax,%rsi
    21ff:	48 d1 fe             	sar    %rsi
    2202:	74 14                	je     2218 <register_tm_clones+0x38>
    2204:	48 8b 05 e5 7d 00 00 	mov    0x7de5(%rip),%rax        # 9ff0 <_ITM_registerTMCloneTable@Base>
    220b:	48 85 c0             	test   %rax,%rax
    220e:	74 08                	je     2218 <register_tm_clones+0x38>
    2210:	ff e0                	jmp    *%rax
    2212:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2218:	c3                   	ret    
    2219:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002220 <__do_global_dtors_aux>:
    2220:	f3 0f 1e fa          	endbr64 
    2224:	80 3d 6d 85 00 00 00 	cmpb   $0x0,0x856d(%rip)        # a798 <__TMC_END__>
    222b:	75 2b                	jne    2258 <__do_global_dtors_aux+0x38>
    222d:	55                   	push   %rbp
    222e:	48 83 3d c2 7d 00 00 	cmpq   $0x0,0x7dc2(%rip)        # 9ff8 <__cxa_finalize@GLIBC_2.2.5>
    2235:	00 
    2236:	48 89 e5             	mov    %rsp,%rbp
    2239:	74 0c                	je     2247 <__do_global_dtors_aux+0x27>
    223b:	48 8b 3d c6 7d 00 00 	mov    0x7dc6(%rip),%rdi        # a008 <__dso_handle>
    2242:	e8 89 fe ff ff       	call   20d0 <__cxa_finalize@plt>
    2247:	e8 64 ff ff ff       	call   21b0 <deregister_tm_clones>
    224c:	c6 05 45 85 00 00 01 	movb   $0x1,0x8545(%rip)        # a798 <__TMC_END__>
    2253:	5d                   	pop    %rbp
    2254:	c3                   	ret    
    2255:	0f 1f 00             	nopl   (%rax)
    2258:	c3                   	ret    
    2259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002260 <frame_dummy>:
    2260:	f3 0f 1e fa          	endbr64 
    2264:	e9 77 ff ff ff       	jmp    21e0 <register_tm_clones>

0000000000002269 <ft_memjoin>:

#include "reader/binary_reader.h"

unsigned char	*ft_memjoin(unsigned char *s1, unsigned char *s2,
	uint32_t size, uint32_t length)
{
    2269:	f3 0f 1e fa          	endbr64 
    226d:	55                   	push   %rbp
    226e:	48 89 e5             	mov    %rsp,%rbp
    2271:	48 83 ec 30          	sub    $0x30,%rsp
    2275:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2279:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    227d:	89 55 dc             	mov    %edx,-0x24(%rbp)
    2280:	89 4d d8             	mov    %ecx,-0x28(%rbp)
	unsigned char	*str;

	if (!s1)
    2283:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    2288:	75 0e                	jne    2298 <ft_memjoin+0x2f>
		s1 = (unsigned char *)malloc(sizeof(unsigned char));
    228a:	bf 01 00 00 00       	mov    $0x1,%edi
    228f:	e8 cc fe ff ff       	call   2160 <malloc@plt>
    2294:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (!s1)
    2298:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    229d:	75 0a                	jne    22a9 <ft_memjoin+0x40>
		return (NULL);
    229f:	b8 00 00 00 00       	mov    $0x0,%eax
    22a4:	e9 8c 00 00 00       	jmp    2335 <ft_memjoin+0xcc>
	if (!s2)
    22a9:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    22ae:	75 13                	jne    22c3 <ft_memjoin+0x5a>
		return (free(s1), NULL);
    22b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    22b4:	48 89 c7             	mov    %rax,%rdi
    22b7:	e8 24 fe ff ff       	call   20e0 <free@plt>
    22bc:	b8 00 00 00 00       	mov    $0x0,%eax
    22c1:	eb 72                	jmp    2335 <ft_memjoin+0xcc>
	str = malloc(sizeof(unsigned char) * (size + length));
    22c3:	8b 55 dc             	mov    -0x24(%rbp),%edx
    22c6:	8b 45 d8             	mov    -0x28(%rbp),%eax
    22c9:	01 d0                	add    %edx,%eax
    22cb:	89 c0                	mov    %eax,%eax
    22cd:	48 89 c7             	mov    %rax,%rdi
    22d0:	e8 8b fe ff ff       	call   2160 <malloc@plt>
    22d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!str)
    22d9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    22de:	75 13                	jne    22f3 <ft_memjoin+0x8a>
		return (free(s1), NULL);
    22e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    22e4:	48 89 c7             	mov    %rax,%rdi
    22e7:	e8 f4 fd ff ff       	call   20e0 <free@plt>
    22ec:	b8 00 00 00 00       	mov    $0x0,%eax
    22f1:	eb 42                	jmp    2335 <ft_memjoin+0xcc>
	ft_memcpy(str, s1, size);
    22f3:	8b 55 dc             	mov    -0x24(%rbp),%edx
    22f6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    22fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    22fe:	48 89 ce             	mov    %rcx,%rsi
    2301:	48 89 c7             	mov    %rax,%rdi
    2304:	e8 ed 27 00 00       	call   4af6 <ft_memcpy>
	ft_memcpy(str + size, s2, length);
    2309:	8b 55 d8             	mov    -0x28(%rbp),%edx
    230c:	8b 4d dc             	mov    -0x24(%rbp),%ecx
    230f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2313:	48 01 c1             	add    %rax,%rcx
    2316:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    231a:	48 89 c6             	mov    %rax,%rsi
    231d:	48 89 cf             	mov    %rcx,%rdi
    2320:	e8 d1 27 00 00       	call   4af6 <ft_memcpy>
	free(s1);
    2325:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2329:	48 89 c7             	mov    %rax,%rdi
    232c:	e8 af fd ff ff       	call   20e0 <free@plt>
	return (str);
    2331:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    2335:	c9                   	leave  
    2336:	c3                   	ret    

0000000000002337 <ft_read_file>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

unsigned char	*ft_read_file(int fd, unsigned char *file, uint32_t *rsize)
{
    2337:	f3 0f 1e fa          	endbr64 
    233b:	55                   	push   %rbp
    233c:	48 89 e5             	mov    %rsp,%rbp
    233f:	48 83 ec 30          	sub    $0x30,%rsp
    2343:	89 7d ec             	mov    %edi,-0x14(%rbp)
    2346:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    234a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	unsigned char	*buff;
	int				read_bytes;
	uint32_t		size;

	size = 0;
    234e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	buff = ft_calloc((BUFFER_SIZE + 1), sizeof(unsigned char));
    2355:	be 01 00 00 00       	mov    $0x1,%esi
    235a:	bf 01 04 00 00       	mov    $0x401,%edi
    235f:	e8 b3 2b 00 00       	call   4f17 <ft_calloc>
    2364:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!buff)
    2368:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    236d:	75 0a                	jne    2379 <ft_read_file+0x42>
		return (NULL);
    236f:	b8 00 00 00 00       	mov    $0x0,%eax
    2374:	e9 a8 00 00 00       	jmp    2421 <ft_read_file+0xea>
	read_bytes = 1;
    2379:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
	while (read_bytes != 0)
    2380:	eb 7c                	jmp    23fe <ft_read_file+0xc7>
	{
		read_bytes = read(fd, buff, BUFFER_SIZE);
    2382:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    2386:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2389:	ba 00 04 00 00       	mov    $0x400,%edx
    238e:	48 89 ce             	mov    %rcx,%rsi
    2391:	89 c7                	mov    %eax,%edi
    2393:	e8 b8 fd ff ff       	call   2150 <read@plt>
    2398:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (read_bytes == -1)
    239b:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%rbp)
    239f:	75 13                	jne    23b4 <ft_read_file+0x7d>
			return (free(buff), NULL);
    23a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23a5:	48 89 c7             	mov    %rax,%rdi
    23a8:	e8 33 fd ff ff       	call   20e0 <free@plt>
    23ad:	b8 00 00 00 00       	mov    $0x0,%eax
    23b2:	eb 6d                	jmp    2421 <ft_read_file+0xea>
		buff[read_bytes] = '\0';
    23b4:	8b 45 f0             	mov    -0x10(%rbp),%eax
    23b7:	48 63 d0             	movslq %eax,%rdx
    23ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23be:	48 01 d0             	add    %rdx,%rax
    23c1:	c6 00 00             	movb   $0x0,(%rax)
		file = ft_memjoin(file, buff, size, read_bytes);
    23c4:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    23c7:	8b 55 f4             	mov    -0xc(%rbp),%edx
    23ca:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    23ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    23d2:	48 89 c7             	mov    %rax,%rdi
    23d5:	e8 8f fe ff ff       	call   2269 <ft_memjoin>
    23da:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		if (!file)
    23de:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    23e3:	75 13                	jne    23f8 <ft_read_file+0xc1>
			return (free(buff), NULL);
    23e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23e9:	48 89 c7             	mov    %rax,%rdi
    23ec:	e8 ef fc ff ff       	call   20e0 <free@plt>
    23f1:	b8 00 00 00 00       	mov    $0x0,%eax
    23f6:	eb 29                	jmp    2421 <ft_read_file+0xea>
		size += read_bytes;
    23f8:	8b 45 f0             	mov    -0x10(%rbp),%eax
    23fb:	01 45 f4             	add    %eax,-0xc(%rbp)
	while (read_bytes != 0)
    23fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
    2402:	0f 85 7a ff ff ff    	jne    2382 <ft_read_file+0x4b>
	}
	*rsize = size;
    2408:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    240c:	8b 55 f4             	mov    -0xc(%rbp),%edx
    240f:	89 10                	mov    %edx,(%rax)
	free(buff);
    2411:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2415:	48 89 c7             	mov    %rax,%rdi
    2418:	e8 c3 fc ff ff       	call   20e0 <free@plt>
	return (file);
    241d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
}
    2421:	c9                   	leave  
    2422:	c3                   	ret    

0000000000002423 <br_get_uint16>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

uint16_t	br_get_uint16(t_binary_reader *this)
{
    2423:	f3 0f 1e fa          	endbr64 
    2427:	55                   	push   %rbp
    2428:	48 89 e5             	mov    %rsp,%rbp
    242b:	53                   	push   %rbx
    242c:	48 83 ec 18          	sub    $0x18,%rsp
    2430:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (this->endian == READER_LITTLE_ENDIAN)
    2434:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2438:	8b 40 14             	mov    0x14(%rax),%eax
    243b:	83 f8 01             	cmp    $0x1,%eax
    243e:	75 2f                	jne    246f <br_get_uint16+0x4c>
	{
		return (this->get_uint8(this) | (this->get_uint8(this) << 8));
    2440:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2444:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2448:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    244c:	48 89 c7             	mov    %rax,%rdi
    244f:	ff d2                	call   *%rdx
    2451:	0f b6 d8             	movzbl %al,%ebx
    2454:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2458:	48 8b 50 28          	mov    0x28(%rax),%rdx
    245c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2460:	48 89 c7             	mov    %rax,%rdi
    2463:	ff d2                	call   *%rdx
    2465:	0f b6 c0             	movzbl %al,%eax
    2468:	c1 e0 08             	shl    $0x8,%eax
    246b:	09 d8                	or     %ebx,%eax
    246d:	eb 2f                	jmp    249e <br_get_uint16+0x7b>
	}
	return ((this->get_uint8(this) << 8) | this->get_uint8(this));
    246f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2473:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2477:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    247b:	48 89 c7             	mov    %rax,%rdi
    247e:	ff d2                	call   *%rdx
    2480:	0f b6 c0             	movzbl %al,%eax
    2483:	c1 e0 08             	shl    $0x8,%eax
    2486:	89 c3                	mov    %eax,%ebx
    2488:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    248c:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2490:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2494:	48 89 c7             	mov    %rax,%rdi
    2497:	ff d2                	call   *%rdx
    2499:	0f b6 c0             	movzbl %al,%eax
    249c:	09 d8                	or     %ebx,%eax
}
    249e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    24a2:	c9                   	leave  
    24a3:	c3                   	ret    

00000000000024a4 <br_get_string>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

char	*br_get_string(t_binary_reader *this, uint16_t length)
{
    24a4:	f3 0f 1e fa          	endbr64 
    24a8:	55                   	push   %rbp
    24a9:	48 89 e5             	mov    %rsp,%rbp
    24ac:	48 83 ec 20          	sub    $0x20,%rsp
    24b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    24b4:	89 f0                	mov    %esi,%eax
    24b6:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	int		i;
	char	*res;

	res = malloc((length + 1) * sizeof(char));
    24ba:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
    24be:	83 c0 01             	add    $0x1,%eax
    24c1:	48 98                	cltq   
    24c3:	48 89 c7             	mov    %rax,%rdi
    24c6:	e8 95 fc ff ff       	call   2160 <malloc@plt>
    24cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!res)
    24cf:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    24d4:	75 07                	jne    24dd <br_get_string+0x39>
		return (NULL);
    24d6:	b8 00 00 00 00       	mov    $0x0,%eax
    24db:	eb 4c                	jmp    2529 <br_get_string+0x85>
	i = -1;
    24dd:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
	while (++i < length)
    24e4:	eb 22                	jmp    2508 <br_get_string+0x64>
		res[i] = this->get_uint8(this);
    24e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    24ea:	48 8b 50 28          	mov    0x28(%rax),%rdx
    24ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    24f2:	48 89 c7             	mov    %rax,%rdi
    24f5:	ff d2                	call   *%rdx
    24f7:	89 c2                	mov    %eax,%edx
    24f9:	8b 45 f4             	mov    -0xc(%rbp),%eax
    24fc:	48 63 c8             	movslq %eax,%rcx
    24ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2503:	48 01 c8             	add    %rcx,%rax
    2506:	88 10                	mov    %dl,(%rax)
	while (++i < length)
    2508:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    250c:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
    2510:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    2513:	7c d1                	jl     24e6 <br_get_string+0x42>
	res[i] = 0;
    2515:	8b 45 f4             	mov    -0xc(%rbp),%eax
    2518:	48 63 d0             	movslq %eax,%rdx
    251b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    251f:	48 01 d0             	add    %rdx,%rax
    2522:	c6 00 00             	movb   $0x0,(%rax)
	return (res);
    2525:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    2529:	c9                   	leave  
    252a:	c3                   	ret    

000000000000252b <br_get_rstring>:

char	*br_get_rstring(t_binary_reader *this)
{
    252b:	f3 0f 1e fa          	endbr64 
    252f:	55                   	push   %rbp
    2530:	48 89 e5             	mov    %rsp,%rbp
    2533:	48 83 ec 30          	sub    $0x30,%rsp
    2537:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    253b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2542:	00 00 
    2544:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2548:	31 c0                	xor    %eax,%eax
	uint8_t	c;
	uint8_t	*res;
	int		i = 0;
    254a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	res = ft_calloc(1, sizeof(char));
    2551:	be 01 00 00 00       	mov    $0x1,%esi
    2556:	bf 01 00 00 00       	mov    $0x1,%edi
    255b:	e8 b7 29 00 00       	call   4f17 <ft_calloc>
    2560:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while ((c = this->get_uint8(this)) != 0)
    2564:	eb 2e                	jmp    2594 <br_get_rstring+0x69>
	{
		res = ft_memjoin(res, &c, i, 1);
    2566:	8b 55 ec             	mov    -0x14(%rbp),%edx
    2569:	48 8d 75 eb          	lea    -0x15(%rbp),%rsi
    256d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2571:	b9 01 00 00 00       	mov    $0x1,%ecx
    2576:	48 89 c7             	mov    %rax,%rdi
    2579:	e8 eb fc ff ff       	call   2269 <ft_memjoin>
    257e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (!res)
    2582:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    2587:	75 07                	jne    2590 <br_get_rstring+0x65>
			return (NULL);
    2589:	b8 00 00 00 00       	mov    $0x0,%eax
    258e:	eb 3c                	jmp    25cc <br_get_rstring+0xa1>
		i++;
    2590:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	while ((c = this->get_uint8(this)) != 0)
    2594:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2598:	48 8b 50 28          	mov    0x28(%rax),%rdx
    259c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    25a0:	48 89 c7             	mov    %rax,%rdi
    25a3:	ff d2                	call   *%rdx
    25a5:	88 45 eb             	mov    %al,-0x15(%rbp)
    25a8:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
    25ac:	84 c0                	test   %al,%al
    25ae:	75 b6                	jne    2566 <br_get_rstring+0x3b>
	}
	return ((char *)ft_memjoin(res, (uint8_t *)"\0", i, 1));
    25b0:	8b 55 ec             	mov    -0x14(%rbp),%edx
    25b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    25b7:	b9 01 00 00 00       	mov    $0x1,%ecx
    25bc:	48 8d 35 41 4a 00 00 	lea    0x4a41(%rip),%rsi        # 7004 <_IO_stdin_used+0x4>
    25c3:	48 89 c7             	mov    %rax,%rdi
    25c6:	e8 9e fc ff ff       	call   2269 <ft_memjoin>
    25cb:	90                   	nop
}
    25cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    25d0:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    25d7:	00 00 
    25d9:	74 05                	je     25e0 <br_get_rstring+0xb5>
    25db:	e8 40 fb ff ff       	call   2120 <__stack_chk_fail@plt>
    25e0:	c9                   	leave  
    25e1:	c3                   	ret    

00000000000025e2 <br_get_int32>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

int32_t	br_get_int32(t_binary_reader *this)
{
    25e2:	f3 0f 1e fa          	endbr64 
    25e6:	55                   	push   %rbp
    25e7:	48 89 e5             	mov    %rsp,%rbp
    25ea:	53                   	push   %rbx
    25eb:	48 83 ec 18          	sub    $0x18,%rsp
    25ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (this->endian == READER_LITTLE_ENDIAN)
    25f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    25f7:	8b 40 14             	mov    0x14(%rax),%eax
    25fa:	83 f8 01             	cmp    $0x1,%eax
    25fd:	75 61                	jne    2660 <br_get_int32+0x7e>
	{
		return ((this->get_uint8(this))
    25ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2603:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2607:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    260b:	48 89 c7             	mov    %rax,%rdi
    260e:	ff d2                	call   *%rdx
    2610:	0f b6 d8             	movzbl %al,%ebx
			| (this->get_uint8(this) << 8)
    2613:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2617:	48 8b 50 28          	mov    0x28(%rax),%rdx
    261b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    261f:	48 89 c7             	mov    %rax,%rdi
    2622:	ff d2                	call   *%rdx
    2624:	0f b6 c0             	movzbl %al,%eax
    2627:	c1 e0 08             	shl    $0x8,%eax
    262a:	09 c3                	or     %eax,%ebx
			| (this->get_uint8(this) << 16)
    262c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2630:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2634:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2638:	48 89 c7             	mov    %rax,%rdi
    263b:	ff d2                	call   *%rdx
    263d:	0f b6 c0             	movzbl %al,%eax
    2640:	c1 e0 10             	shl    $0x10,%eax
    2643:	09 c3                	or     %eax,%ebx
			| (this->get_uint8(this) << 24));
    2645:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2649:	48 8b 50 28          	mov    0x28(%rax),%rdx
    264d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2651:	48 89 c7             	mov    %rax,%rdi
    2654:	ff d2                	call   *%rdx
    2656:	0f b6 c0             	movzbl %al,%eax
    2659:	c1 e0 18             	shl    $0x18,%eax
    265c:	09 d8                	or     %ebx,%eax
    265e:	eb 61                	jmp    26c1 <br_get_int32+0xdf>
	}
	return ((this->get_uint8(this) << 24)
    2660:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2664:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    266c:	48 89 c7             	mov    %rax,%rdi
    266f:	ff d2                	call   *%rdx
    2671:	0f b6 c0             	movzbl %al,%eax
    2674:	c1 e0 18             	shl    $0x18,%eax
    2677:	89 c3                	mov    %eax,%ebx
		| (this->get_uint8(this) << 16)
    2679:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    267d:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2681:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2685:	48 89 c7             	mov    %rax,%rdi
    2688:	ff d2                	call   *%rdx
    268a:	0f b6 c0             	movzbl %al,%eax
    268d:	c1 e0 10             	shl    $0x10,%eax
    2690:	09 c3                	or     %eax,%ebx
		| (this->get_uint8(this) << 8)
    2692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2696:	48 8b 50 28          	mov    0x28(%rax),%rdx
    269a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    269e:	48 89 c7             	mov    %rax,%rdi
    26a1:	ff d2                	call   *%rdx
    26a3:	0f b6 c0             	movzbl %al,%eax
    26a6:	c1 e0 08             	shl    $0x8,%eax
    26a9:	09 c3                	or     %eax,%ebx
		| (this->get_uint8(this)));
    26ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    26af:	48 8b 50 28          	mov    0x28(%rax),%rdx
    26b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    26b7:	48 89 c7             	mov    %rax,%rdi
    26ba:	ff d2                	call   *%rdx
    26bc:	0f b6 c0             	movzbl %al,%eax
    26bf:	09 d8                	or     %ebx,%eax
}
    26c1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    26c5:	c9                   	leave  
    26c6:	c3                   	ret    

00000000000026c7 <br_get_date>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

uint64_t	br_get_date(t_binary_reader *this)
{
    26c7:	f3 0f 1e fa          	endbr64 
    26cb:	55                   	push   %rbp
    26cc:	48 89 e5             	mov    %rsp,%rbp
    26cf:	53                   	push   %rbx
    26d0:	48 83 ec 28          	sub    $0x28,%rsp
    26d4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t	mac_time;

	mac_time = this->get_uint32(this) * 0x100000000 + this->get_uint32(this);
    26d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26dc:	48 8b 50 38          	mov    0x38(%rax),%rdx
    26e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26e4:	48 89 c7             	mov    %rax,%rdi
    26e7:	ff d2                	call   *%rdx
    26e9:	89 c0                	mov    %eax,%eax
    26eb:	48 c1 e0 20          	shl    $0x20,%rax
    26ef:	48 89 c3             	mov    %rax,%rbx
    26f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26f6:	48 8b 50 38          	mov    0x38(%rax),%rdx
    26fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    26fe:	48 89 c7             	mov    %rax,%rdi
    2701:	ff d2                	call   *%rdx
    2703:	89 c0                	mov    %eax,%eax
    2705:	48 01 d8             	add    %rbx,%rax
    2708:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (mac_time);
    270c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
    2710:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    2714:	c9                   	leave  
    2715:	c3                   	ret    

0000000000002716 <br_get_uint8>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

uint8_t	br_get_uint8(t_binary_reader *this)
{
    2716:	f3 0f 1e fa          	endbr64 
    271a:	55                   	push   %rbp
    271b:	48 89 e5             	mov    %rsp,%rbp
    271e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (this->_pos >= this->size)
    2722:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2726:	8b 10                	mov    (%rax),%edx
    2728:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    272c:	8b 40 10             	mov    0x10(%rax),%eax
    272f:	39 c2                	cmp    %eax,%edx
    2731:	72 07                	jb     273a <br_get_uint8+0x24>
		return (0);
    2733:	b8 00 00 00 00       	mov    $0x0,%eax
    2738:	eb 1f                	jmp    2759 <br_get_uint8+0x43>
	return (this->data[this->_pos++]);
    273a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    273e:	48 8b 70 08          	mov    0x8(%rax),%rsi
    2742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2746:	8b 00                	mov    (%rax),%eax
    2748:	8d 48 01             	lea    0x1(%rax),%ecx
    274b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    274f:	89 0a                	mov    %ecx,(%rdx)
    2751:	89 c0                	mov    %eax,%eax
    2753:	48 01 f0             	add    %rsi,%rax
    2756:	0f b6 00             	movzbl (%rax),%eax
}
    2759:	5d                   	pop    %rbp
    275a:	c3                   	ret    

000000000000275b <br_get_bytes>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

size_t	br_get_bytes(t_binary_reader *this, char *target, size_t length)
{
    275b:	f3 0f 1e fa          	endbr64 
    275f:	55                   	push   %rbp
    2760:	48 89 e5             	mov    %rsp,%rbp
    2763:	48 83 ec 30          	sub    $0x30,%rsp
    2767:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    276b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    276f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	size_t	i = 0;
    2773:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    277a:	00 

	if (!target)
    277b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    2780:	75 2b                	jne    27ad <br_get_bytes+0x52>
		return (i);
    2782:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2786:	eb 33                	jmp    27bb <br_get_bytes+0x60>

	for (; i < length; i++)
	{
		target[i] = this->get_uint8(this);
    2788:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    278c:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2790:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2794:	48 89 c7             	mov    %rax,%rdi
    2797:	ff d2                	call   *%rdx
    2799:	89 c2                	mov    %eax,%edx
    279b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    279f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    27a3:	48 01 c8             	add    %rcx,%rax
    27a6:	88 10                	mov    %dl,(%rax)
	for (; i < length; i++)
    27a8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    27ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    27b1:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    27b5:	72 d1                	jb     2788 <br_get_bytes+0x2d>
	}
	return (i);
    27b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    27bb:	c9                   	leave  
    27bc:	c3                   	ret    

00000000000027bd <br_seek>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

uint32_t	br_seek(t_binary_reader *this, uint32_t pos)
{
    27bd:	f3 0f 1e fa          	endbr64 
    27c1:	55                   	push   %rbp
    27c2:	48 89 e5             	mov    %rsp,%rbp
    27c5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    27c9:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t	old_pos;

	old_pos = this->_pos;
    27cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    27d0:	8b 00                	mov    (%rax),%eax
    27d2:	89 45 fc             	mov    %eax,-0x4(%rbp)
	this->_pos = pos;
    27d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    27d9:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    27dc:	89 10                	mov    %edx,(%rax)
	return (old_pos);
    27de:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    27e1:	5d                   	pop    %rbp
    27e2:	c3                   	ret    

00000000000027e3 <br_get_fword>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

int16_t	br_get_fword(t_binary_reader *this)
{
    27e3:	f3 0f 1e fa          	endbr64 
    27e7:	55                   	push   %rbp
    27e8:	48 89 e5             	mov    %rsp,%rbp
    27eb:	48 83 ec 10          	sub    $0x10,%rsp
    27ef:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (this->get_int16(this));
    27f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    27f7:	48 8b 50 48          	mov    0x48(%rax),%rdx
    27fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    27ff:	48 89 c7             	mov    %rax,%rdi
    2802:	ff d2                	call   *%rdx
}
    2804:	c9                   	leave  
    2805:	c3                   	ret    

0000000000002806 <br_slice>:

#include "reader/binary_reader.h"

t_binary_reader	*br_slice(t_binary_reader *this, uint32_t start,
	uint32_t length)
{
    2806:	f3 0f 1e fa          	endbr64 
    280a:	55                   	push   %rbp
    280b:	48 89 e5             	mov    %rsp,%rbp
    280e:	48 83 ec 20          	sub    $0x20,%rsp
    2812:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2816:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    2819:	89 55 e0             	mov    %edx,-0x20(%rbp)
	t_binary_reader	*reader;

	reader = ft_calloc(1, sizeof(t_binary_reader));
    281c:	be b0 00 00 00       	mov    $0xb0,%esi
    2821:	bf 01 00 00 00       	mov    $0x1,%edi
    2826:	e8 ec 26 00 00       	call   4f17 <ft_calloc>
    282b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!reader)
    282f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2834:	75 07                	jne    283d <br_slice+0x37>
		return (NULL);
    2836:	b8 00 00 00 00       	mov    $0x0,%eax
    283b:	eb 6a                	jmp    28a7 <br_slice+0xa1>
	reader->data = malloc(length * sizeof(char));
    283d:	8b 45 e0             	mov    -0x20(%rbp),%eax
    2840:	48 89 c7             	mov    %rax,%rdi
    2843:	e8 18 f9 ff ff       	call   2160 <malloc@plt>
    2848:	48 89 c2             	mov    %rax,%rdx
    284b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    284f:	48 89 50 08          	mov    %rdx,0x8(%rax)
	if (!reader->data)
    2853:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2857:	48 8b 40 08          	mov    0x8(%rax),%rax
    285b:	48 85 c0             	test   %rax,%rax
    285e:	75 13                	jne    2873 <br_slice+0x6d>
		return (free(reader), NULL);
    2860:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2864:	48 89 c7             	mov    %rax,%rdi
    2867:	e8 74 f8 ff ff       	call   20e0 <free@plt>
    286c:	b8 00 00 00 00       	mov    $0x0,%eax
    2871:	eb 34                	jmp    28a7 <br_slice+0xa1>
	ft_memcpy(reader->data, this->data + start, length);
    2873:	8b 55 e0             	mov    -0x20(%rbp),%edx
    2876:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    287a:	48 8b 48 08          	mov    0x8(%rax),%rcx
    287e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    2881:	48 01 c1             	add    %rax,%rcx
    2884:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2888:	48 8b 40 08          	mov    0x8(%rax),%rax
    288c:	48 89 ce             	mov    %rcx,%rsi
    288f:	48 89 c7             	mov    %rax,%rdi
    2892:	e8 5f 22 00 00       	call   4af6 <ft_memcpy>
	init_binary_reader(reader);
    2897:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    289b:	48 89 c7             	mov    %rax,%rdi
    289e:	e8 0d 03 00 00       	call   2bb0 <init_binary_reader>
	return (reader);
    28a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    28a7:	c9                   	leave  
    28a8:	c3                   	ret    

00000000000028a9 <br_get_int16>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

int16_t	br_get_int16(t_binary_reader *this)
{
    28a9:	f3 0f 1e fa          	endbr64 
    28ad:	55                   	push   %rbp
    28ae:	48 89 e5             	mov    %rsp,%rbp
    28b1:	48 83 ec 20          	sub    $0x20,%rsp
    28b5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int16_t	res;

	res = this->get_uint16(this);
    28b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    28bd:	48 8b 50 30          	mov    0x30(%rax),%rdx
    28c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    28c5:	48 89 c7             	mov    %rax,%rdi
    28c8:	ff d2                	call   *%rdx
    28ca:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	if (res & 0x8000)
    28ce:	66 83 7d fe 00       	cmpw   $0x0,-0x2(%rbp)
		res -= (1 << 16);
	return (res);
    28d3:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
    28d7:	c9                   	leave  
    28d8:	c3                   	ret    

00000000000028d9 <br_get_fixed>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

int32_t	br_get_fixed(t_binary_reader *this)
{
    28d9:	f3 0f 1e fa          	endbr64 
    28dd:	55                   	push   %rbp
    28de:	48 89 e5             	mov    %rsp,%rbp
    28e1:	48 83 ec 10          	sub    $0x10,%rsp
    28e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (this->get_int32(this) / (1 << 16));
    28e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    28ed:	48 8b 50 50          	mov    0x50(%rax),%rdx
    28f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    28f5:	48 89 c7             	mov    %rax,%rdi
    28f8:	ff d2                	call   *%rdx
    28fa:	8d 90 ff ff 00 00    	lea    0xffff(%rax),%edx
    2900:	85 c0                	test   %eax,%eax
    2902:	0f 48 c2             	cmovs  %edx,%eax
    2905:	c1 f8 10             	sar    $0x10,%eax
}
    2908:	c9                   	leave  
    2909:	c3                   	ret    

000000000000290a <br_get_uint32>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

uint32_t	br_get_uint32(t_binary_reader *this)
{
    290a:	f3 0f 1e fa          	endbr64 
    290e:	55                   	push   %rbp
    290f:	48 89 e5             	mov    %rsp,%rbp
    2912:	53                   	push   %rbx
    2913:	48 83 ec 18          	sub    $0x18,%rsp
    2917:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (this->endian == READER_LITTLE_ENDIAN)
    291b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    291f:	8b 40 14             	mov    0x14(%rax),%eax
    2922:	83 f8 01             	cmp    $0x1,%eax
    2925:	75 61                	jne    2988 <br_get_uint32+0x7e>
	{
		return ((this->get_uint8(this))
    2927:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    292b:	48 8b 50 28          	mov    0x28(%rax),%rdx
    292f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2933:	48 89 c7             	mov    %rax,%rdi
    2936:	ff d2                	call   *%rdx
    2938:	0f b6 d8             	movzbl %al,%ebx
			| (this->get_uint8(this) << 8)
    293b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    293f:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2943:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2947:	48 89 c7             	mov    %rax,%rdi
    294a:	ff d2                	call   *%rdx
    294c:	0f b6 c0             	movzbl %al,%eax
    294f:	c1 e0 08             	shl    $0x8,%eax
    2952:	09 c3                	or     %eax,%ebx
			| (this->get_uint8(this) << 16)
    2954:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2958:	48 8b 50 28          	mov    0x28(%rax),%rdx
    295c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2960:	48 89 c7             	mov    %rax,%rdi
    2963:	ff d2                	call   *%rdx
    2965:	0f b6 c0             	movzbl %al,%eax
    2968:	c1 e0 10             	shl    $0x10,%eax
    296b:	09 c3                	or     %eax,%ebx
			| (this->get_uint8(this) << 24));
    296d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2971:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2975:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2979:	48 89 c7             	mov    %rax,%rdi
    297c:	ff d2                	call   *%rdx
    297e:	0f b6 c0             	movzbl %al,%eax
    2981:	c1 e0 18             	shl    $0x18,%eax
    2984:	09 d8                	or     %ebx,%eax
    2986:	eb 61                	jmp    29e9 <br_get_uint32+0xdf>
	}
	return ((this->get_uint8(this) << 24)
    2988:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    298c:	48 8b 50 28          	mov    0x28(%rax),%rdx
    2990:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2994:	48 89 c7             	mov    %rax,%rdi
    2997:	ff d2                	call   *%rdx
    2999:	0f b6 c0             	movzbl %al,%eax
    299c:	c1 e0 18             	shl    $0x18,%eax
    299f:	89 c3                	mov    %eax,%ebx
		| (this->get_uint8(this) << 16)
    29a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    29a5:	48 8b 50 28          	mov    0x28(%rax),%rdx
    29a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    29ad:	48 89 c7             	mov    %rax,%rdi
    29b0:	ff d2                	call   *%rdx
    29b2:	0f b6 c0             	movzbl %al,%eax
    29b5:	c1 e0 10             	shl    $0x10,%eax
    29b8:	09 c3                	or     %eax,%ebx
		| (this->get_uint8(this) << 8)
    29ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    29be:	48 8b 50 28          	mov    0x28(%rax),%rdx
    29c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    29c6:	48 89 c7             	mov    %rax,%rdi
    29c9:	ff d2                	call   *%rdx
    29cb:	0f b6 c0             	movzbl %al,%eax
    29ce:	c1 e0 08             	shl    $0x8,%eax
    29d1:	09 c3                	or     %eax,%ebx
		| (this->get_uint8(this)));
    29d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    29d7:	48 8b 50 28          	mov    0x28(%rax),%rdx
    29db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    29df:	48 89 c7             	mov    %rax,%rdi
    29e2:	ff d2                	call   *%rdx
    29e4:	0f b6 c0             	movzbl %al,%eax
    29e7:	09 d8                	or     %ebx,%eax
}
    29e9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    29ed:	c9                   	leave  
    29ee:	c3                   	ret    

00000000000029ef <br_get_unicode_string>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

char	*br_get_unicode_string(t_binary_reader *this, uint16_t length)
{
    29ef:	f3 0f 1e fa          	endbr64 
    29f3:	55                   	push   %rbp
    29f4:	48 89 e5             	mov    %rsp,%rbp
    29f7:	48 83 ec 20          	sub    $0x20,%rsp
    29fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    29ff:	89 f0                	mov    %esi,%eax
    2a01:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	int		i;
	char	*res;

	res = malloc((length + 1) * sizeof(char));
    2a05:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
    2a09:	83 c0 01             	add    $0x1,%eax
    2a0c:	48 98                	cltq   
    2a0e:	48 89 c7             	mov    %rax,%rdi
    2a11:	e8 4a f7 ff ff       	call   2160 <malloc@plt>
    2a16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!res)
    2a1a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2a1f:	75 07                	jne    2a28 <br_get_unicode_string+0x39>
		return (NULL);
    2a21:	b8 00 00 00 00       	mov    $0x0,%eax
    2a26:	eb 52                	jmp    2a7a <br_get_unicode_string+0x8b>
	i = -1;
    2a28:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
	while (++i < length / 2)
    2a2f:	eb 22                	jmp    2a53 <br_get_unicode_string+0x64>
		res[i] = this->get_uint16(this);
    2a31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2a35:	48 8b 50 30          	mov    0x30(%rax),%rdx
    2a39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2a3d:	48 89 c7             	mov    %rax,%rdi
    2a40:	ff d2                	call   *%rdx
    2a42:	89 c2                	mov    %eax,%edx
    2a44:	8b 45 f4             	mov    -0xc(%rbp),%eax
    2a47:	48 63 c8             	movslq %eax,%rcx
    2a4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2a4e:	48 01 c8             	add    %rcx,%rax
    2a51:	88 10                	mov    %dl,(%rax)
	while (++i < length / 2)
    2a53:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    2a57:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
    2a5b:	66 d1 e8             	shr    %ax
    2a5e:	0f b7 c0             	movzwl %ax,%eax
    2a61:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    2a64:	7c cb                	jl     2a31 <br_get_unicode_string+0x42>
	res[i] = 0;
    2a66:	8b 45 f4             	mov    -0xc(%rbp),%eax
    2a69:	48 63 d0             	movslq %eax,%rdx
    2a6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2a70:	48 01 d0             	add    %rdx,%rax
    2a73:	c6 00 00             	movb   $0x0,(%rax)
	return (res);
    2a76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    2a7a:	c9                   	leave  
    2a7b:	c3                   	ret    

0000000000002a7c <br_set_endian>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

void	br_set_endian(t_binary_reader *this, int endian)
{
    2a7c:	f3 0f 1e fa          	endbr64 
    2a80:	55                   	push   %rbp
    2a81:	48 89 e5             	mov    %rsp,%rbp
    2a84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2a88:	89 75 f4             	mov    %esi,-0xc(%rbp)
	this->endian = endian;
    2a8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2a8f:	8b 55 f4             	mov    -0xc(%rbp),%edx
    2a92:	89 50 14             	mov    %edx,0x14(%rax)
}
    2a95:	90                   	nop
    2a96:	5d                   	pop    %rbp
    2a97:	c3                   	ret    

0000000000002a98 <br_get_uint64>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

uint64_t	br_get_uint64(t_binary_reader *this)
{
    2a98:	f3 0f 1e fa          	endbr64 
    2a9c:	55                   	push   %rbp
    2a9d:	48 89 e5             	mov    %rsp,%rbp
    2aa0:	53                   	push   %rbx
    2aa1:	48 83 ec 18          	sub    $0x18,%rsp
    2aa5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (this->endian == READER_LITTLE_ENDIAN)
    2aa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2aad:	8b 40 14             	mov    0x14(%rax),%eax
    2ab0:	83 f8 01             	cmp    $0x1,%eax
    2ab3:	75 2f                	jne    2ae4 <br_get_uint64+0x4c>
	{
		return (this->get_uint32(this) | ((uint64_t)this->get_uint32(this) << 32));
    2ab5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2ab9:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2abd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2ac1:	48 89 c7             	mov    %rax,%rdi
    2ac4:	ff d2                	call   *%rdx
    2ac6:	89 c3                	mov    %eax,%ebx
    2ac8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2acc:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2ad0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2ad4:	48 89 c7             	mov    %rax,%rdi
    2ad7:	ff d2                	call   *%rdx
    2ad9:	89 c0                	mov    %eax,%eax
    2adb:	48 c1 e0 20          	shl    $0x20,%rax
    2adf:	48 09 d8             	or     %rbx,%rax
    2ae2:	eb 30                	jmp    2b14 <br_get_uint64+0x7c>
	}
	return (((uint64_t)this->get_uint32(this) << 32) | this->get_uint32(this));
    2ae4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2ae8:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2aec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2af0:	48 89 c7             	mov    %rax,%rdi
    2af3:	ff d2                	call   *%rdx
    2af5:	89 c0                	mov    %eax,%eax
    2af7:	48 c1 e0 20          	shl    $0x20,%rax
    2afb:	48 89 c3             	mov    %rax,%rbx
    2afe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b02:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2b06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b0a:	48 89 c7             	mov    %rax,%rdi
    2b0d:	ff d2                	call   *%rdx
    2b0f:	89 c0                	mov    %eax,%eax
    2b11:	48 09 d8             	or     %rbx,%rax
}
    2b14:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    2b18:	c9                   	leave  
    2b19:	c3                   	ret    

0000000000002b1a <br_get_int64>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

int64_t	br_get_int64(t_binary_reader *this)
{
    2b1a:	f3 0f 1e fa          	endbr64 
    2b1e:	55                   	push   %rbp
    2b1f:	48 89 e5             	mov    %rsp,%rbp
    2b22:	53                   	push   %rbx
    2b23:	48 83 ec 18          	sub    $0x18,%rsp
    2b27:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (this->endian == READER_LITTLE_ENDIAN)
    2b2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b2f:	8b 40 14             	mov    0x14(%rax),%eax
    2b32:	83 f8 01             	cmp    $0x1,%eax
    2b35:	75 2f                	jne    2b66 <br_get_int64+0x4c>
	{
		return (this->get_uint32(this) | ((uint64_t)this->get_uint32(this) << 32));
    2b37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b3b:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2b3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b43:	48 89 c7             	mov    %rax,%rdi
    2b46:	ff d2                	call   *%rdx
    2b48:	89 c3                	mov    %eax,%ebx
    2b4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b4e:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2b52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b56:	48 89 c7             	mov    %rax,%rdi
    2b59:	ff d2                	call   *%rdx
    2b5b:	89 c0                	mov    %eax,%eax
    2b5d:	48 c1 e0 20          	shl    $0x20,%rax
    2b61:	48 09 d8             	or     %rbx,%rax
    2b64:	eb 30                	jmp    2b96 <br_get_int64+0x7c>
	}
	return (((uint64_t)this->get_uint32(this) << 32) | this->get_uint32(this));
    2b66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b6a:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2b6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b72:	48 89 c7             	mov    %rax,%rdi
    2b75:	ff d2                	call   *%rdx
    2b77:	89 c0                	mov    %eax,%eax
    2b79:	48 c1 e0 20          	shl    $0x20,%rax
    2b7d:	48 89 c3             	mov    %rax,%rbx
    2b80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b84:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2b88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b8c:	48 89 c7             	mov    %rax,%rdi
    2b8f:	ff d2                	call   *%rdx
    2b91:	89 c0                	mov    %eax,%eax
    2b93:	48 09 d8             	or     %rbx,%rax
}
    2b96:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    2b9a:	c9                   	leave  
    2b9b:	c3                   	ret    

0000000000002b9c <br_tell>:
/* ************************************************************************** */

#include "reader/binary_reader.h"

uint32_t	br_tell(t_binary_reader *this)
{
    2b9c:	f3 0f 1e fa          	endbr64 
    2ba0:	55                   	push   %rbp
    2ba1:	48 89 e5             	mov    %rsp,%rbp
    2ba4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (this->_pos);
    2ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2bac:	8b 00                	mov    (%rax),%eax
}
    2bae:	5d                   	pop    %rbp
    2baf:	c3                   	ret    

0000000000002bb0 <init_binary_reader>:
/* ************************************************************************** */

#include "binary_reader.h"

void	init_binary_reader(t_binary_reader *reader)
{
    2bb0:	f3 0f 1e fa          	endbr64 
    2bb4:	55                   	push   %rbp
    2bb5:	48 89 e5             	mov    %rsp,%rbp
    2bb8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	reader->seek = &br_seek;
    2bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2bc0:	48 8d 15 f6 fb ff ff 	lea    -0x40a(%rip),%rdx        # 27bd <br_seek>
    2bc7:	48 89 50 18          	mov    %rdx,0x18(%rax)
	reader->tell = &br_tell;
    2bcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2bcf:	48 8d 15 c6 ff ff ff 	lea    -0x3a(%rip),%rdx        # 2b9c <br_tell>
    2bd6:	48 89 50 20          	mov    %rdx,0x20(%rax)
	reader->get_uint8 = &br_get_uint8;
    2bda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2bde:	48 8d 15 31 fb ff ff 	lea    -0x4cf(%rip),%rdx        # 2716 <br_get_uint8>
    2be5:	48 89 50 28          	mov    %rdx,0x28(%rax)
	reader->get_uint16 = &br_get_uint16;
    2be9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2bed:	48 8d 15 2f f8 ff ff 	lea    -0x7d1(%rip),%rdx        # 2423 <br_get_uint16>
    2bf4:	48 89 50 30          	mov    %rdx,0x30(%rax)
	reader->get_uint32 = &br_get_uint32;
    2bf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2bfc:	48 8d 15 07 fd ff ff 	lea    -0x2f9(%rip),%rdx        # 290a <br_get_uint32>
    2c03:	48 89 50 38          	mov    %rdx,0x38(%rax)
	reader->get_uint64 = &br_get_uint64;
    2c07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c0b:	48 8d 15 86 fe ff ff 	lea    -0x17a(%rip),%rdx        # 2a98 <br_get_uint64>
    2c12:	48 89 50 40          	mov    %rdx,0x40(%rax)
	reader->get_int16 = &br_get_int16;
    2c16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c1a:	48 8d 15 88 fc ff ff 	lea    -0x378(%rip),%rdx        # 28a9 <br_get_int16>
    2c21:	48 89 50 48          	mov    %rdx,0x48(%rax)
	reader->get_int32 = &br_get_int32;
    2c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c29:	48 8d 15 b2 f9 ff ff 	lea    -0x64e(%rip),%rdx        # 25e2 <br_get_int32>
    2c30:	48 89 50 50          	mov    %rdx,0x50(%rax)
	reader->get_int64 = &br_get_int64;
    2c34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c38:	48 8d 15 db fe ff ff 	lea    -0x125(%rip),%rdx        # 2b1a <br_get_int64>
    2c3f:	48 89 50 58          	mov    %rdx,0x58(%rax)
	reader->get_fword = &br_get_fword;
    2c43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c47:	48 8d 15 95 fb ff ff 	lea    -0x46b(%rip),%rdx        # 27e3 <br_get_fword>
    2c4e:	48 89 50 60          	mov    %rdx,0x60(%rax)
	reader->get_fixed = &br_get_fixed;
    2c52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c56:	48 8d 15 7c fc ff ff 	lea    -0x384(%rip),%rdx        # 28d9 <br_get_fixed>
    2c5d:	48 89 50 70          	mov    %rdx,0x70(%rax)
	reader->get_string = &br_get_string;
    2c61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c65:	48 8d 15 38 f8 ff ff 	lea    -0x7c8(%rip),%rdx        # 24a4 <br_get_string>
    2c6c:	48 89 50 78          	mov    %rdx,0x78(%rax)
	reader->get_rstring = &br_get_rstring;
    2c70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c74:	48 8d 15 b0 f8 ff ff 	lea    -0x750(%rip),%rdx        # 252b <br_get_rstring>
    2c7b:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
	reader->get_unicode_string = &br_get_unicode_string;
    2c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c86:	48 8d 15 62 fd ff ff 	lea    -0x29e(%rip),%rdx        # 29ef <br_get_unicode_string>
    2c8d:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
	reader->get_bytes = &br_get_bytes;
    2c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c98:	48 8d 15 bc fa ff ff 	lea    -0x544(%rip),%rdx        # 275b <br_get_bytes>
    2c9f:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
	reader->get_date = &br_get_date;
    2ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2caa:	48 8d 15 16 fa ff ff 	lea    -0x5ea(%rip),%rdx        # 26c7 <br_get_date>
    2cb1:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	reader->slice = &br_slice;
    2cb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2cbc:	48 8d 15 43 fb ff ff 	lea    -0x4bd(%rip),%rdx        # 2806 <br_slice>
    2cc3:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
	reader->set_endian = &br_set_endian;
    2cca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2cce:	48 8d 15 a7 fd ff ff 	lea    -0x259(%rip),%rdx        # 2a7c <br_set_endian>
    2cd5:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
    2cdc:	90                   	nop
    2cdd:	5d                   	pop    %rbp
    2cde:	c3                   	ret    

0000000000002cdf <delete_binary_reader>:

void	delete_binary_reader(t_binary_reader *this)
{
    2cdf:	f3 0f 1e fa          	endbr64 
    2ce3:	55                   	push   %rbp
    2ce4:	48 89 e5             	mov    %rsp,%rbp
    2ce7:	48 83 ec 10          	sub    $0x10,%rsp
    2ceb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (!this)
    2cef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2cf4:	74 33                	je     2d29 <delete_binary_reader+0x4a>
		return ;
	if (this->data)
    2cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2cfa:	48 8b 40 08          	mov    0x8(%rax),%rax
    2cfe:	48 85 c0             	test   %rax,%rax
    2d01:	74 10                	je     2d13 <delete_binary_reader+0x34>
		free(this->data);
    2d03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d07:	48 8b 40 08          	mov    0x8(%rax),%rax
    2d0b:	48 89 c7             	mov    %rax,%rdi
    2d0e:	e8 cd f3 ff ff       	call   20e0 <free@plt>
	free(this);
    2d13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d17:	48 89 c7             	mov    %rax,%rdi
    2d1a:	e8 c1 f3 ff ff       	call   20e0 <free@plt>
	this = NULL;
    2d1f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    2d26:	00 
    2d27:	eb 01                	jmp    2d2a <delete_binary_reader+0x4b>
		return ;
    2d29:	90                   	nop
}
    2d2a:	c9                   	leave  
    2d2b:	c3                   	ret    

0000000000002d2c <new_binary_reader>:

t_binary_reader	*new_binary_reader(int fd)
{
    2d2c:	f3 0f 1e fa          	endbr64 
    2d30:	55                   	push   %rbp
    2d31:	48 89 e5             	mov    %rsp,%rbp
    2d34:	48 83 ec 20          	sub    $0x20,%rsp
    2d38:	89 7d ec             	mov    %edi,-0x14(%rbp)
	t_binary_reader	*reader;

	reader = ft_calloc(1, sizeof(t_binary_reader));
    2d3b:	be b0 00 00 00       	mov    $0xb0,%esi
    2d40:	bf 01 00 00 00       	mov    $0x1,%edi
    2d45:	e8 cd 21 00 00       	call   4f17 <ft_calloc>
    2d4a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!reader)
    2d4e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2d53:	75 07                	jne    2d5c <new_binary_reader+0x30>
		return (NULL);
    2d55:	b8 00 00 00 00       	mov    $0x0,%eax
    2d5a:	eb 55                	jmp    2db1 <new_binary_reader+0x85>
	reader->data = ft_read_file(fd, reader->data, &reader->size);
    2d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d60:	48 8d 50 10          	lea    0x10(%rax),%rdx
    2d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d68:	48 8b 48 08          	mov    0x8(%rax),%rcx
    2d6c:	8b 45 ec             	mov    -0x14(%rbp),%eax
    2d6f:	48 89 ce             	mov    %rcx,%rsi
    2d72:	89 c7                	mov    %eax,%edi
    2d74:	e8 be f5 ff ff       	call   2337 <ft_read_file>
    2d79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    2d7d:	48 89 42 08          	mov    %rax,0x8(%rdx)
	if (!reader->data)
    2d81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d85:	48 8b 40 08          	mov    0x8(%rax),%rax
    2d89:	48 85 c0             	test   %rax,%rax
    2d8c:	75 13                	jne    2da1 <new_binary_reader+0x75>
		return (free(reader), NULL);
    2d8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d92:	48 89 c7             	mov    %rax,%rdi
    2d95:	e8 46 f3 ff ff       	call   20e0 <free@plt>
    2d9a:	b8 00 00 00 00       	mov    $0x0,%eax
    2d9f:	eb 10                	jmp    2db1 <new_binary_reader+0x85>
	init_binary_reader(reader);
    2da1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2da5:	48 89 c7             	mov    %rax,%rdi
    2da8:	e8 03 fe ff ff       	call   2bb0 <init_binary_reader>
	return (reader);
    2dad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    2db1:	c9                   	leave  
    2db2:	c3                   	ret    

0000000000002db3 <get_type_name>:
/* ************************************************************************** */

#include "woody.h"

static void	get_type_name(t_binary_reader *reader, t_elf_file *elf_file)
{
    2db3:	f3 0f 1e fa          	endbr64 
    2db7:	55                   	push   %rbp
    2db8:	48 89 e5             	mov    %rsp,%rbp
    2dbb:	48 83 ec 10          	sub    $0x10,%rsp
    2dbf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2dc3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	reader->seek(reader, 0x10);
    2dc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2dcb:	48 8b 50 18          	mov    0x18(%rax),%rdx
    2dcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2dd3:	be 10 00 00 00       	mov    $0x10,%esi
    2dd8:	48 89 c7             	mov    %rax,%rdi
    2ddb:	ff d2                	call   *%rdx
	elf_file->e_type = reader->get_uint16(reader);
    2ddd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2de1:	48 8b 50 30          	mov    0x30(%rax),%rdx
    2de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2de9:	48 89 c7             	mov    %rax,%rdi
    2dec:	ff d2                	call   *%rdx
    2dee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2df2:	66 89 42 10          	mov    %ax,0x10(%rdx)
	 switch(elf_file->e_type) {
    2df6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2dfa:	0f b7 40 10          	movzwl 0x10(%rax),%eax
    2dfe:	0f b7 c0             	movzwl %ax,%eax
    2e01:	3d ff ff 00 00       	cmp    $0xffff,%eax
    2e06:	0f 84 0a 01 00 00    	je     2f16 <get_type_name+0x163>
    2e0c:	3d ff ff 00 00       	cmp    $0xffff,%eax
    2e11:	0f 8f 10 01 00 00    	jg     2f27 <get_type_name+0x174>
    2e17:	3d 00 ff 00 00       	cmp    $0xff00,%eax
    2e1c:	0f 84 e3 00 00 00    	je     2f05 <get_type_name+0x152>
    2e22:	3d 00 ff 00 00       	cmp    $0xff00,%eax
    2e27:	0f 8f fa 00 00 00    	jg     2f27 <get_type_name+0x174>
    2e2d:	3d ff fe 00 00       	cmp    $0xfeff,%eax
    2e32:	0f 84 bc 00 00 00    	je     2ef4 <get_type_name+0x141>
    2e38:	3d ff fe 00 00       	cmp    $0xfeff,%eax
    2e3d:	0f 8f e4 00 00 00    	jg     2f27 <get_type_name+0x174>
    2e43:	83 f8 04             	cmp    $0x4,%eax
    2e46:	7f 34                	jg     2e7c <get_type_name+0xc9>
    2e48:	85 c0                	test   %eax,%eax
    2e4a:	0f 88 d7 00 00 00    	js     2f27 <get_type_name+0x174>
    2e50:	83 f8 04             	cmp    $0x4,%eax
    2e53:	0f 87 ce 00 00 00    	ja     2f27 <get_type_name+0x174>
    2e59:	89 c0                	mov    %eax,%eax
    2e5b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    2e62:	00 
    2e63:	48 8d 05 62 43 00 00 	lea    0x4362(%rip),%rax        # 71cc <_IO_stdin_used+0x1cc>
    2e6a:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    2e6d:	48 98                	cltq   
    2e6f:	48 8d 15 56 43 00 00 	lea    0x4356(%rip),%rdx        # 71cc <_IO_stdin_used+0x1cc>
    2e76:	48 01 d0             	add    %rdx,%rax
    2e79:	3e ff e0             	notrack jmp *%rax
    2e7c:	3d 00 fe 00 00       	cmp    $0xfe00,%eax
    2e81:	74 60                	je     2ee3 <get_type_name+0x130>
    2e83:	e9 9f 00 00 00       	jmp    2f27 <get_type_name+0x174>
		case 0x00 :
			elf_file->e_type_name = "NONE";
    2e88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2e8c:	48 8d 15 1e 43 00 00 	lea    0x431e(%rip),%rdx        # 71b1 <_IO_stdin_used+0x1b1>
    2e93:	48 89 50 18          	mov    %rdx,0x18(%rax)
			break;
    2e97:	e9 9b 00 00 00       	jmp    2f37 <get_type_name+0x184>
		case 0x01 :
			elf_file->e_type_name = "REL";
    2e9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ea0:	48 8d 15 9b 41 00 00 	lea    0x419b(%rip),%rdx        # 7042 <_IO_stdin_used+0x42>
    2ea7:	48 89 50 18          	mov    %rdx,0x18(%rax)
			break;
    2eab:	e9 87 00 00 00       	jmp    2f37 <get_type_name+0x184>
		case 0x02 :
			elf_file->e_type_name = "EXEC";
    2eb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2eb4:	48 8d 15 fb 42 00 00 	lea    0x42fb(%rip),%rdx        # 71b6 <_IO_stdin_used+0x1b6>
    2ebb:	48 89 50 18          	mov    %rdx,0x18(%rax)
			break;
    2ebf:	eb 76                	jmp    2f37 <get_type_name+0x184>
		case 0x03 :
			elf_file->e_type_name = "DYN";
    2ec1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ec5:	48 8d 15 ef 42 00 00 	lea    0x42ef(%rip),%rdx        # 71bb <_IO_stdin_used+0x1bb>
    2ecc:	48 89 50 18          	mov    %rdx,0x18(%rax)
			break;
    2ed0:	eb 65                	jmp    2f37 <get_type_name+0x184>
		case 0x04 :
			elf_file->e_type_name = "CORE";
    2ed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ed6:	48 8d 15 e2 42 00 00 	lea    0x42e2(%rip),%rdx        # 71bf <_IO_stdin_used+0x1bf>
    2edd:	48 89 50 18          	mov    %rdx,0x18(%rax)
			break;
    2ee1:	eb 54                	jmp    2f37 <get_type_name+0x184>
		case 0xFE00 :
			elf_file->e_type_name = "LOOS";
    2ee3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ee7:	48 8d 15 71 42 00 00 	lea    0x4271(%rip),%rdx        # 715f <_IO_stdin_used+0x15f>
    2eee:	48 89 50 18          	mov    %rdx,0x18(%rax)
			break;
    2ef2:	eb 43                	jmp    2f37 <get_type_name+0x184>
		case 0xFEFF :
			elf_file->e_type_name = "HIOS";
    2ef4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ef8:	48 8d 15 9f 42 00 00 	lea    0x429f(%rip),%rdx        # 719e <_IO_stdin_used+0x19e>
    2eff:	48 89 50 18          	mov    %rdx,0x18(%rax)
			break;
    2f03:	eb 32                	jmp    2f37 <get_type_name+0x184>
		case 0xFF00 :
			elf_file->e_type_name = "LOPROC";
    2f05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2f09:	48 8d 15 93 42 00 00 	lea    0x4293(%rip),%rdx        # 71a3 <_IO_stdin_used+0x1a3>
    2f10:	48 89 50 18          	mov    %rdx,0x18(%rax)
			break;
    2f14:	eb 21                	jmp    2f37 <get_type_name+0x184>
		case 0xFFFF :
			elf_file->e_type_name = "HIPROC";
    2f16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2f1a:	48 8d 15 89 42 00 00 	lea    0x4289(%rip),%rdx        # 71aa <_IO_stdin_used+0x1aa>
    2f21:	48 89 50 18          	mov    %rdx,0x18(%rax)
            break;
    2f25:	eb 10                	jmp    2f37 <get_type_name+0x184>
        default:
			elf_file->e_type_name = "Error";
    2f27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2f2b:	48 8d 15 92 42 00 00 	lea    0x4292(%rip),%rdx        # 71c4 <_IO_stdin_used+0x1c4>
    2f32:	48 89 50 18          	mov    %rdx,0x18(%rax)
    }
}
    2f36:	90                   	nop
    2f37:	90                   	nop
    2f38:	c9                   	leave  
    2f39:	c3                   	ret    

0000000000002f3a <get_elf_tables_offset>:

static int	get_elf_tables_offset(t_elf_file *elf_file, t_binary_reader *reader)
{
    2f3a:	f3 0f 1e fa          	endbr64 
    2f3e:	55                   	push   %rbp
    2f3f:	48 89 e5             	mov    %rsp,%rbp
    2f42:	53                   	push   %rbx
    2f43:	48 83 ec 28          	sub    $0x28,%rsp
    2f47:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    2f4b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	reader->seek(reader, elf_file->e_shoff);
    2f4f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2f53:	48 8b 50 18          	mov    0x18(%rax),%rdx
    2f57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2f5b:	48 8b 40 38          	mov    0x38(%rax),%rax
    2f5f:	89 c1                	mov    %eax,%ecx
    2f61:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2f65:	89 ce                	mov    %ecx,%esi
    2f67:	48 89 c7             	mov    %rax,%rdi
    2f6a:	ff d2                	call   *%rdx
	elf_file->section_tables = ft_calloc(elf_file->e_shnum, sizeof(t_elf_section_table));
    2f6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2f70:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    2f74:	0f b7 c0             	movzwl %ax,%eax
    2f77:	be 30 00 00 00       	mov    $0x30,%esi
    2f7c:	48 89 c7             	mov    %rax,%rdi
    2f7f:	e8 93 1f 00 00       	call   4f17 <ft_calloc>
    2f84:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    2f88:	48 89 42 60          	mov    %rax,0x60(%rdx)
	if (elf_file->section_tables == NULL)
    2f8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2f90:	48 8b 40 60          	mov    0x60(%rax),%rax
    2f94:	48 85 c0             	test   %rax,%rax
    2f97:	75 19                	jne    2fb2 <get_elf_tables_offset+0x78>
		return (ft_error(WD_PREFIX"Could not allocate memory.\n"), 1);
    2f99:	48 8d 05 40 42 00 00 	lea    0x4240(%rip),%rax        # 71e0 <_IO_stdin_used+0x1e0>
    2fa0:	48 89 c7             	mov    %rax,%rdi
    2fa3:	e8 89 15 00 00       	call   4531 <ft_error>
    2fa8:	b8 01 00 00 00       	mov    $0x1,%eax
    2fad:	e9 ba 03 00 00       	jmp    336c <get_elf_tables_offset+0x432>
	for (int i = 0; i < elf_file->e_shnum; i++)
    2fb2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
    2fb9:	e9 9e 02 00 00       	jmp    325c <get_elf_tables_offset+0x322>
	{
		elf_file->section_tables[i].sh_name_offset = reader->get_uint32(reader);
    2fbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2fc2:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2fc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2fca:	48 8b 70 60          	mov    0x60(%rax),%rsi
    2fce:	8b 45 e8             	mov    -0x18(%rbp),%eax
    2fd1:	48 63 c8             	movslq %eax,%rcx
    2fd4:	48 89 c8             	mov    %rcx,%rax
    2fd7:	48 01 c0             	add    %rax,%rax
    2fda:	48 01 c8             	add    %rcx,%rax
    2fdd:	48 c1 e0 04          	shl    $0x4,%rax
    2fe1:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    2fe5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2fe9:	48 89 c7             	mov    %rax,%rdi
    2fec:	ff d2                	call   *%rdx
    2fee:	89 03                	mov    %eax,(%rbx)
		elf_file->section_tables[i].sh_type = reader->get_uint32(reader);
    2ff0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2ff4:	48 8b 50 38          	mov    0x38(%rax),%rdx
    2ff8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2ffc:	48 8b 70 60          	mov    0x60(%rax),%rsi
    3000:	8b 45 e8             	mov    -0x18(%rbp),%eax
    3003:	48 63 c8             	movslq %eax,%rcx
    3006:	48 89 c8             	mov    %rcx,%rax
    3009:	48 01 c0             	add    %rax,%rax
    300c:	48 01 c8             	add    %rcx,%rax
    300f:	48 c1 e0 04          	shl    $0x4,%rax
    3013:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    3017:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    301b:	48 89 c7             	mov    %rax,%rdi
    301e:	ff d2                	call   *%rdx
    3020:	89 43 04             	mov    %eax,0x4(%rbx)
		if (elf_file->e_ident.ei_class == WD_32BITS)
    3023:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3027:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    302b:	3c 01                	cmp    $0x1,%al
    302d:	0f 85 e1 00 00 00    	jne    3114 <get_elf_tables_offset+0x1da>
		{
			elf_file->section_tables[i].sh_flags = reader->get_uint32(reader);
    3033:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3037:	48 8b 50 38          	mov    0x38(%rax),%rdx
    303b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    303f:	48 89 c7             	mov    %rax,%rdi
    3042:	ff d2                	call   *%rdx
    3044:	89 c1                	mov    %eax,%ecx
    3046:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    304a:	48 8b 70 60          	mov    0x60(%rax),%rsi
    304e:	8b 45 e8             	mov    -0x18(%rbp),%eax
    3051:	48 63 d0             	movslq %eax,%rdx
    3054:	48 89 d0             	mov    %rdx,%rax
    3057:	48 01 c0             	add    %rax,%rax
    305a:	48 01 d0             	add    %rdx,%rax
    305d:	48 c1 e0 04          	shl    $0x4,%rax
    3061:	48 01 f0             	add    %rsi,%rax
    3064:	89 ca                	mov    %ecx,%edx
    3066:	48 89 50 08          	mov    %rdx,0x8(%rax)
			elf_file->section_tables[i].sh_address = reader->get_uint32(reader);
    306a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    306e:	48 8b 50 38          	mov    0x38(%rax),%rdx
    3072:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3076:	48 89 c7             	mov    %rax,%rdi
    3079:	ff d2                	call   *%rdx
    307b:	89 c1                	mov    %eax,%ecx
    307d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3081:	48 8b 70 60          	mov    0x60(%rax),%rsi
    3085:	8b 45 e8             	mov    -0x18(%rbp),%eax
    3088:	48 63 d0             	movslq %eax,%rdx
    308b:	48 89 d0             	mov    %rdx,%rax
    308e:	48 01 c0             	add    %rax,%rax
    3091:	48 01 d0             	add    %rdx,%rax
    3094:	48 c1 e0 04          	shl    $0x4,%rax
    3098:	48 01 f0             	add    %rsi,%rax
    309b:	89 ca                	mov    %ecx,%edx
    309d:	48 89 50 10          	mov    %rdx,0x10(%rax)
			elf_file->section_tables[i].sh_offset = reader->get_uint32(reader);
    30a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    30a5:	48 8b 50 38          	mov    0x38(%rax),%rdx
    30a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    30ad:	48 89 c7             	mov    %rax,%rdi
    30b0:	ff d2                	call   *%rdx
    30b2:	89 c1                	mov    %eax,%ecx
    30b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    30b8:	48 8b 70 60          	mov    0x60(%rax),%rsi
    30bc:	8b 45 e8             	mov    -0x18(%rbp),%eax
    30bf:	48 63 d0             	movslq %eax,%rdx
    30c2:	48 89 d0             	mov    %rdx,%rax
    30c5:	48 01 c0             	add    %rax,%rax
    30c8:	48 01 d0             	add    %rdx,%rax
    30cb:	48 c1 e0 04          	shl    $0x4,%rax
    30cf:	48 01 f0             	add    %rsi,%rax
    30d2:	89 ca                	mov    %ecx,%edx
    30d4:	48 89 50 18          	mov    %rdx,0x18(%rax)
			elf_file->section_tables[i].sh_size = reader->get_uint32(reader);
    30d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    30dc:	48 8b 50 38          	mov    0x38(%rax),%rdx
    30e0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    30e4:	48 89 c7             	mov    %rax,%rdi
    30e7:	ff d2                	call   *%rdx
    30e9:	89 c1                	mov    %eax,%ecx
    30eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    30ef:	48 8b 70 60          	mov    0x60(%rax),%rsi
    30f3:	8b 45 e8             	mov    -0x18(%rbp),%eax
    30f6:	48 63 d0             	movslq %eax,%rdx
    30f9:	48 89 d0             	mov    %rdx,%rax
    30fc:	48 01 c0             	add    %rax,%rax
    30ff:	48 01 d0             	add    %rdx,%rax
    3102:	48 c1 e0 04          	shl    $0x4,%rax
    3106:	48 01 f0             	add    %rsi,%rax
    3109:	89 ca                	mov    %ecx,%edx
    310b:	48 89 50 20          	mov    %rdx,0x20(%rax)
    310f:	e9 d0 00 00 00       	jmp    31e4 <get_elf_tables_offset+0x2aa>
		}
		else
		{
			elf_file->section_tables[i].sh_flags = reader->get_uint64(reader);
    3114:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3118:	48 8b 50 40          	mov    0x40(%rax),%rdx
    311c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3120:	48 8b 70 60          	mov    0x60(%rax),%rsi
    3124:	8b 45 e8             	mov    -0x18(%rbp),%eax
    3127:	48 63 c8             	movslq %eax,%rcx
    312a:	48 89 c8             	mov    %rcx,%rax
    312d:	48 01 c0             	add    %rax,%rax
    3130:	48 01 c8             	add    %rcx,%rax
    3133:	48 c1 e0 04          	shl    $0x4,%rax
    3137:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    313b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    313f:	48 89 c7             	mov    %rax,%rdi
    3142:	ff d2                	call   *%rdx
    3144:	48 89 43 08          	mov    %rax,0x8(%rbx)
			elf_file->section_tables[i].sh_address = reader->get_uint64(reader);
    3148:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    314c:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3154:	48 8b 70 60          	mov    0x60(%rax),%rsi
    3158:	8b 45 e8             	mov    -0x18(%rbp),%eax
    315b:	48 63 c8             	movslq %eax,%rcx
    315e:	48 89 c8             	mov    %rcx,%rax
    3161:	48 01 c0             	add    %rax,%rax
    3164:	48 01 c8             	add    %rcx,%rax
    3167:	48 c1 e0 04          	shl    $0x4,%rax
    316b:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    316f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3173:	48 89 c7             	mov    %rax,%rdi
    3176:	ff d2                	call   *%rdx
    3178:	48 89 43 10          	mov    %rax,0x10(%rbx)
			elf_file->section_tables[i].sh_offset = reader->get_uint64(reader);
    317c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3180:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3184:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3188:	48 8b 70 60          	mov    0x60(%rax),%rsi
    318c:	8b 45 e8             	mov    -0x18(%rbp),%eax
    318f:	48 63 c8             	movslq %eax,%rcx
    3192:	48 89 c8             	mov    %rcx,%rax
    3195:	48 01 c0             	add    %rax,%rax
    3198:	48 01 c8             	add    %rcx,%rax
    319b:	48 c1 e0 04          	shl    $0x4,%rax
    319f:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    31a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    31a7:	48 89 c7             	mov    %rax,%rdi
    31aa:	ff d2                	call   *%rdx
    31ac:	48 89 43 18          	mov    %rax,0x18(%rbx)
			elf_file->section_tables[i].sh_size = reader->get_uint64(reader);
    31b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    31b4:	48 8b 50 40          	mov    0x40(%rax),%rdx
    31b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    31bc:	48 8b 70 60          	mov    0x60(%rax),%rsi
    31c0:	8b 45 e8             	mov    -0x18(%rbp),%eax
    31c3:	48 63 c8             	movslq %eax,%rcx
    31c6:	48 89 c8             	mov    %rcx,%rax
    31c9:	48 01 c0             	add    %rax,%rax
    31cc:	48 01 c8             	add    %rcx,%rax
    31cf:	48 c1 e0 04          	shl    $0x4,%rax
    31d3:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    31d7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    31db:	48 89 c7             	mov    %rax,%rdi
    31de:	ff d2                	call   *%rdx
    31e0:	48 89 43 20          	mov    %rax,0x20(%rbx)
		}
		(void)reader->get_uint32(reader); // sh_link
    31e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    31e8:	48 8b 50 38          	mov    0x38(%rax),%rdx
    31ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    31f0:	48 89 c7             	mov    %rax,%rdi
    31f3:	ff d2                	call   *%rdx
		(void)reader->get_uint32(reader); // sh_info
    31f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    31f9:	48 8b 50 38          	mov    0x38(%rax),%rdx
    31fd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3201:	48 89 c7             	mov    %rax,%rdi
    3204:	ff d2                	call   *%rdx
		if (elf_file->e_ident.ei_class == WD_32BITS)
    3206:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    320a:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    320e:	3c 01                	cmp    $0x1,%al
    3210:	75 24                	jne    3236 <get_elf_tables_offset+0x2fc>
		{
			(void)reader->get_uint32(reader); // sh_addralign
    3212:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3216:	48 8b 50 38          	mov    0x38(%rax),%rdx
    321a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    321e:	48 89 c7             	mov    %rax,%rdi
    3221:	ff d2                	call   *%rdx
			(void)reader->get_uint32(reader); // sh_entize
    3223:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3227:	48 8b 50 38          	mov    0x38(%rax),%rdx
    322b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    322f:	48 89 c7             	mov    %rax,%rdi
    3232:	ff d2                	call   *%rdx
    3234:	eb 22                	jmp    3258 <get_elf_tables_offset+0x31e>
		}
		else
		{
			(void)reader->get_uint64(reader); // sh_addralign
    3236:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    323a:	48 8b 50 40          	mov    0x40(%rax),%rdx
    323e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3242:	48 89 c7             	mov    %rax,%rdi
    3245:	ff d2                	call   *%rdx
			(void)reader->get_uint64(reader); // sh_entize
    3247:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    324b:	48 8b 50 40          	mov    0x40(%rax),%rdx
    324f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3253:	48 89 c7             	mov    %rax,%rdi
    3256:	ff d2                	call   *%rdx
	for (int i = 0; i < elf_file->e_shnum; i++)
    3258:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
    325c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3260:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    3264:	0f b7 c0             	movzwl %ax,%eax
    3267:	39 45 e8             	cmp    %eax,-0x18(%rbp)
    326a:	0f 8c 4e fd ff ff    	jl     2fbe <get_elf_tables_offset+0x84>
		}
	}
	for (int i = 0; i < elf_file->e_shnum; i++)
    3270:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    3277:	e9 d7 00 00 00       	jmp    3353 <get_elf_tables_offset+0x419>
	{
		reader->seek(reader, elf_file->section_tables[elf_file->e_shstrndx].sh_offset + elf_file->section_tables[i].sh_name_offset);
    327c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3280:	48 8b 50 18          	mov    0x18(%rax),%rdx
    3284:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3288:	48 8b 70 60          	mov    0x60(%rax),%rsi
    328c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3290:	0f b7 40 58          	movzwl 0x58(%rax),%eax
    3294:	0f b7 c8             	movzwl %ax,%ecx
    3297:	48 89 c8             	mov    %rcx,%rax
    329a:	48 01 c0             	add    %rax,%rax
    329d:	48 01 c8             	add    %rcx,%rax
    32a0:	48 c1 e0 04          	shl    $0x4,%rax
    32a4:	48 01 f0             	add    %rsi,%rax
    32a7:	48 8b 40 18          	mov    0x18(%rax),%rax
    32ab:	89 c7                	mov    %eax,%edi
    32ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    32b1:	48 8b 70 60          	mov    0x60(%rax),%rsi
    32b5:	8b 45 ec             	mov    -0x14(%rbp),%eax
    32b8:	48 63 c8             	movslq %eax,%rcx
    32bb:	48 89 c8             	mov    %rcx,%rax
    32be:	48 01 c0             	add    %rax,%rax
    32c1:	48 01 c8             	add    %rcx,%rax
    32c4:	48 c1 e0 04          	shl    $0x4,%rax
    32c8:	48 01 f0             	add    %rsi,%rax
    32cb:	8b 00                	mov    (%rax),%eax
    32cd:	8d 0c 07             	lea    (%rdi,%rax,1),%ecx
    32d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    32d4:	89 ce                	mov    %ecx,%esi
    32d6:	48 89 c7             	mov    %rax,%rdi
    32d9:	ff d2                	call   *%rdx
		elf_file->section_tables[i].sh_name = reader->get_rstring(reader);
    32db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    32df:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
    32e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    32ea:	48 8b 70 60          	mov    0x60(%rax),%rsi
    32ee:	8b 45 ec             	mov    -0x14(%rbp),%eax
    32f1:	48 63 c8             	movslq %eax,%rcx
    32f4:	48 89 c8             	mov    %rcx,%rax
    32f7:	48 01 c0             	add    %rax,%rax
    32fa:	48 01 c8             	add    %rcx,%rax
    32fd:	48 c1 e0 04          	shl    $0x4,%rax
    3301:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    3305:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3309:	48 89 c7             	mov    %rax,%rdi
    330c:	ff d2                	call   *%rdx
    330e:	48 89 43 28          	mov    %rax,0x28(%rbx)
		if (elf_file->section_tables[i].sh_name == NULL)
    3312:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3316:	48 8b 48 60          	mov    0x60(%rax),%rcx
    331a:	8b 45 ec             	mov    -0x14(%rbp),%eax
    331d:	48 63 d0             	movslq %eax,%rdx
    3320:	48 89 d0             	mov    %rdx,%rax
    3323:	48 01 c0             	add    %rax,%rax
    3326:	48 01 d0             	add    %rdx,%rax
    3329:	48 c1 e0 04          	shl    $0x4,%rax
    332d:	48 01 c8             	add    %rcx,%rax
    3330:	48 8b 40 28          	mov    0x28(%rax),%rax
    3334:	48 85 c0             	test   %rax,%rax
    3337:	75 16                	jne    334f <get_elf_tables_offset+0x415>
			return (ft_error(WD_PREFIX"Could not allocate memory.\n"), 1);
    3339:	48 8d 05 a0 3e 00 00 	lea    0x3ea0(%rip),%rax        # 71e0 <_IO_stdin_used+0x1e0>
    3340:	48 89 c7             	mov    %rax,%rdi
    3343:	e8 e9 11 00 00       	call   4531 <ft_error>
    3348:	b8 01 00 00 00       	mov    $0x1,%eax
    334d:	eb 1d                	jmp    336c <get_elf_tables_offset+0x432>
	for (int i = 0; i < elf_file->e_shnum; i++)
    334f:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    3353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3357:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    335b:	0f b7 c0             	movzwl %ax,%eax
    335e:	39 45 ec             	cmp    %eax,-0x14(%rbp)
    3361:	0f 8c 15 ff ff ff    	jl     327c <get_elf_tables_offset+0x342>
	}
	return (0);
    3367:	b8 00 00 00 00       	mov    $0x0,%eax
}
    336c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3370:	c9                   	leave  
    3371:	c3                   	ret    

0000000000003372 <get_elf_program_headers>:

static int	get_elf_program_headers(t_elf_file *elf_file, t_binary_reader *reader)
{
    3372:	f3 0f 1e fa          	endbr64 
    3376:	55                   	push   %rbp
    3377:	48 89 e5             	mov    %rsp,%rbp
    337a:	53                   	push   %rbx
    337b:	48 83 ec 28          	sub    $0x28,%rsp
    337f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3383:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	reader->seek(reader, elf_file->e_phoff);
    3387:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    338b:	48 8b 50 18          	mov    0x18(%rax),%rdx
    338f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3393:	48 8b 40 30          	mov    0x30(%rax),%rax
    3397:	89 c1                	mov    %eax,%ecx
    3399:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    339d:	89 ce                	mov    %ecx,%esi
    339f:	48 89 c7             	mov    %rax,%rdi
    33a2:	ff d2                	call   *%rdx
	elf_file->program_headers = ft_calloc(elf_file->e_phnum, sizeof(t_elf_program_header));
    33a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    33a8:	0f b7 40 52          	movzwl 0x52(%rax),%eax
    33ac:	0f b7 c0             	movzwl %ax,%eax
    33af:	be 38 00 00 00       	mov    $0x38,%esi
    33b4:	48 89 c7             	mov    %rax,%rdi
    33b7:	e8 5b 1b 00 00       	call   4f17 <ft_calloc>
    33bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    33c0:	48 89 42 68          	mov    %rax,0x68(%rdx)
	if (elf_file->program_headers == NULL)
    33c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    33c8:	48 8b 40 68          	mov    0x68(%rax),%rax
    33cc:	48 85 c0             	test   %rax,%rax
    33cf:	75 19                	jne    33ea <get_elf_program_headers+0x78>
		return (ft_error(WD_PREFIX"Could not allocate memory.\n"), 1);
    33d1:	48 8d 05 08 3e 00 00 	lea    0x3e08(%rip),%rax        # 71e0 <_IO_stdin_used+0x1e0>
    33d8:	48 89 c7             	mov    %rax,%rdi
    33db:	e8 51 11 00 00       	call   4531 <ft_error>
    33e0:	b8 01 00 00 00       	mov    $0x1,%eax
    33e5:	e9 67 03 00 00       	jmp    3751 <get_elf_program_headers+0x3df>
	for (int i = 0; i < elf_file->e_phnum; i++)
    33ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    33f1:	e9 42 03 00 00       	jmp    3738 <get_elf_program_headers+0x3c6>
	{
		elf_file->program_headers[i].p_type = reader->get_uint32(reader);
    33f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    33fa:	48 8b 50 38          	mov    0x38(%rax),%rdx
    33fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3402:	48 8b 70 68          	mov    0x68(%rax),%rsi
    3406:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3409:	48 63 c8             	movslq %eax,%rcx
    340c:	48 89 c8             	mov    %rcx,%rax
    340f:	48 c1 e0 03          	shl    $0x3,%rax
    3413:	48 29 c8             	sub    %rcx,%rax
    3416:	48 c1 e0 03          	shl    $0x3,%rax
    341a:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    341e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3422:	48 89 c7             	mov    %rax,%rdi
    3425:	ff d2                	call   *%rdx
    3427:	89 03                	mov    %eax,(%rbx)
		if (elf_file->e_ident.ei_class == WD_32BITS)
    3429:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    342d:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    3431:	3c 01                	cmp    $0x1,%al
    3433:	0f 85 89 01 00 00    	jne    35c2 <get_elf_program_headers+0x250>
		{
			elf_file->program_headers[i].p_offset = reader->get_uint32(reader);
    3439:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    343d:	48 8b 50 38          	mov    0x38(%rax),%rdx
    3441:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3445:	48 89 c7             	mov    %rax,%rdi
    3448:	ff d2                	call   *%rdx
    344a:	89 c1                	mov    %eax,%ecx
    344c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3450:	48 8b 70 68          	mov    0x68(%rax),%rsi
    3454:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3457:	48 63 d0             	movslq %eax,%rdx
    345a:	48 89 d0             	mov    %rdx,%rax
    345d:	48 c1 e0 03          	shl    $0x3,%rax
    3461:	48 29 d0             	sub    %rdx,%rax
    3464:	48 c1 e0 03          	shl    $0x3,%rax
    3468:	48 01 f0             	add    %rsi,%rax
    346b:	89 ca                	mov    %ecx,%edx
    346d:	48 89 50 08          	mov    %rdx,0x8(%rax)
			elf_file->program_headers[i].p_vaddr = reader->get_uint32(reader);
    3471:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3475:	48 8b 50 38          	mov    0x38(%rax),%rdx
    3479:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    347d:	48 89 c7             	mov    %rax,%rdi
    3480:	ff d2                	call   *%rdx
    3482:	89 c1                	mov    %eax,%ecx
    3484:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3488:	48 8b 70 68          	mov    0x68(%rax),%rsi
    348c:	8b 45 ec             	mov    -0x14(%rbp),%eax
    348f:	48 63 d0             	movslq %eax,%rdx
    3492:	48 89 d0             	mov    %rdx,%rax
    3495:	48 c1 e0 03          	shl    $0x3,%rax
    3499:	48 29 d0             	sub    %rdx,%rax
    349c:	48 c1 e0 03          	shl    $0x3,%rax
    34a0:	48 01 f0             	add    %rsi,%rax
    34a3:	89 ca                	mov    %ecx,%edx
    34a5:	48 89 50 10          	mov    %rdx,0x10(%rax)
			elf_file->program_headers[i].p_paddr = reader->get_uint32(reader);
    34a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    34ad:	48 8b 50 38          	mov    0x38(%rax),%rdx
    34b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    34b5:	48 89 c7             	mov    %rax,%rdi
    34b8:	ff d2                	call   *%rdx
    34ba:	89 c1                	mov    %eax,%ecx
    34bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    34c0:	48 8b 70 68          	mov    0x68(%rax),%rsi
    34c4:	8b 45 ec             	mov    -0x14(%rbp),%eax
    34c7:	48 63 d0             	movslq %eax,%rdx
    34ca:	48 89 d0             	mov    %rdx,%rax
    34cd:	48 c1 e0 03          	shl    $0x3,%rax
    34d1:	48 29 d0             	sub    %rdx,%rax
    34d4:	48 c1 e0 03          	shl    $0x3,%rax
    34d8:	48 01 f0             	add    %rsi,%rax
    34db:	89 ca                	mov    %ecx,%edx
    34dd:	48 89 50 18          	mov    %rdx,0x18(%rax)
			elf_file->program_headers[i].p_filesz = reader->get_uint32(reader);
    34e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    34e5:	48 8b 50 38          	mov    0x38(%rax),%rdx
    34e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    34ed:	48 89 c7             	mov    %rax,%rdi
    34f0:	ff d2                	call   *%rdx
    34f2:	89 c1                	mov    %eax,%ecx
    34f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    34f8:	48 8b 70 68          	mov    0x68(%rax),%rsi
    34fc:	8b 45 ec             	mov    -0x14(%rbp),%eax
    34ff:	48 63 d0             	movslq %eax,%rdx
    3502:	48 89 d0             	mov    %rdx,%rax
    3505:	48 c1 e0 03          	shl    $0x3,%rax
    3509:	48 29 d0             	sub    %rdx,%rax
    350c:	48 c1 e0 03          	shl    $0x3,%rax
    3510:	48 01 f0             	add    %rsi,%rax
    3513:	89 ca                	mov    %ecx,%edx
    3515:	48 89 50 20          	mov    %rdx,0x20(%rax)
			elf_file->program_headers[i].p_memsz = reader->get_uint32(reader);
    3519:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    351d:	48 8b 50 38          	mov    0x38(%rax),%rdx
    3521:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3525:	48 89 c7             	mov    %rax,%rdi
    3528:	ff d2                	call   *%rdx
    352a:	89 c1                	mov    %eax,%ecx
    352c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3530:	48 8b 70 68          	mov    0x68(%rax),%rsi
    3534:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3537:	48 63 d0             	movslq %eax,%rdx
    353a:	48 89 d0             	mov    %rdx,%rax
    353d:	48 c1 e0 03          	shl    $0x3,%rax
    3541:	48 29 d0             	sub    %rdx,%rax
    3544:	48 c1 e0 03          	shl    $0x3,%rax
    3548:	48 01 f0             	add    %rsi,%rax
    354b:	89 ca                	mov    %ecx,%edx
    354d:	48 89 50 28          	mov    %rdx,0x28(%rax)
			elf_file->program_headers[i].p_flags = reader->get_uint32(reader);
    3551:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3555:	48 8b 50 38          	mov    0x38(%rax),%rdx
    3559:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    355d:	48 8b 70 68          	mov    0x68(%rax),%rsi
    3561:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3564:	48 63 c8             	movslq %eax,%rcx
    3567:	48 89 c8             	mov    %rcx,%rax
    356a:	48 c1 e0 03          	shl    $0x3,%rax
    356e:	48 29 c8             	sub    %rcx,%rax
    3571:	48 c1 e0 03          	shl    $0x3,%rax
    3575:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    3579:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    357d:	48 89 c7             	mov    %rax,%rdi
    3580:	ff d2                	call   *%rdx
    3582:	89 43 04             	mov    %eax,0x4(%rbx)
			elf_file->program_headers[i].p_align = reader->get_uint32(reader);
    3585:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3589:	48 8b 50 38          	mov    0x38(%rax),%rdx
    358d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3591:	48 89 c7             	mov    %rax,%rdi
    3594:	ff d2                	call   *%rdx
    3596:	89 c1                	mov    %eax,%ecx
    3598:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    359c:	48 8b 70 68          	mov    0x68(%rax),%rsi
    35a0:	8b 45 ec             	mov    -0x14(%rbp),%eax
    35a3:	48 63 d0             	movslq %eax,%rdx
    35a6:	48 89 d0             	mov    %rdx,%rax
    35a9:	48 c1 e0 03          	shl    $0x3,%rax
    35ad:	48 29 d0             	sub    %rdx,%rax
    35b0:	48 c1 e0 03          	shl    $0x3,%rax
    35b4:	48 01 f0             	add    %rsi,%rax
    35b7:	89 ca                	mov    %ecx,%edx
    35b9:	48 89 50 30          	mov    %rdx,0x30(%rax)
    35bd:	e9 72 01 00 00       	jmp    3734 <get_elf_program_headers+0x3c2>
		}
		else
		{
			elf_file->program_headers[i].p_flags = reader->get_uint32(reader);
    35c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    35c6:	48 8b 50 38          	mov    0x38(%rax),%rdx
    35ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    35ce:	48 8b 70 68          	mov    0x68(%rax),%rsi
    35d2:	8b 45 ec             	mov    -0x14(%rbp),%eax
    35d5:	48 63 c8             	movslq %eax,%rcx
    35d8:	48 89 c8             	mov    %rcx,%rax
    35db:	48 c1 e0 03          	shl    $0x3,%rax
    35df:	48 29 c8             	sub    %rcx,%rax
    35e2:	48 c1 e0 03          	shl    $0x3,%rax
    35e6:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    35ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    35ee:	48 89 c7             	mov    %rax,%rdi
    35f1:	ff d2                	call   *%rdx
    35f3:	89 43 04             	mov    %eax,0x4(%rbx)
			elf_file->program_headers[i].p_offset = reader->get_uint64(reader);
    35f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    35fa:	48 8b 50 40          	mov    0x40(%rax),%rdx
    35fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3602:	48 8b 70 68          	mov    0x68(%rax),%rsi
    3606:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3609:	48 63 c8             	movslq %eax,%rcx
    360c:	48 89 c8             	mov    %rcx,%rax
    360f:	48 c1 e0 03          	shl    $0x3,%rax
    3613:	48 29 c8             	sub    %rcx,%rax
    3616:	48 c1 e0 03          	shl    $0x3,%rax
    361a:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    361e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3622:	48 89 c7             	mov    %rax,%rdi
    3625:	ff d2                	call   *%rdx
    3627:	48 89 43 08          	mov    %rax,0x8(%rbx)
			elf_file->program_headers[i].p_vaddr = reader->get_uint64(reader);
    362b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    362f:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3633:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3637:	48 8b 70 68          	mov    0x68(%rax),%rsi
    363b:	8b 45 ec             	mov    -0x14(%rbp),%eax
    363e:	48 63 c8             	movslq %eax,%rcx
    3641:	48 89 c8             	mov    %rcx,%rax
    3644:	48 c1 e0 03          	shl    $0x3,%rax
    3648:	48 29 c8             	sub    %rcx,%rax
    364b:	48 c1 e0 03          	shl    $0x3,%rax
    364f:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    3653:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3657:	48 89 c7             	mov    %rax,%rdi
    365a:	ff d2                	call   *%rdx
    365c:	48 89 43 10          	mov    %rax,0x10(%rbx)
			elf_file->program_headers[i].p_paddr = reader->get_uint64(reader);
    3660:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3664:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3668:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    366c:	48 8b 70 68          	mov    0x68(%rax),%rsi
    3670:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3673:	48 63 c8             	movslq %eax,%rcx
    3676:	48 89 c8             	mov    %rcx,%rax
    3679:	48 c1 e0 03          	shl    $0x3,%rax
    367d:	48 29 c8             	sub    %rcx,%rax
    3680:	48 c1 e0 03          	shl    $0x3,%rax
    3684:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    3688:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    368c:	48 89 c7             	mov    %rax,%rdi
    368f:	ff d2                	call   *%rdx
    3691:	48 89 43 18          	mov    %rax,0x18(%rbx)
			elf_file->program_headers[i].p_filesz = reader->get_uint64(reader);
    3695:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3699:	48 8b 50 40          	mov    0x40(%rax),%rdx
    369d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    36a1:	48 8b 70 68          	mov    0x68(%rax),%rsi
    36a5:	8b 45 ec             	mov    -0x14(%rbp),%eax
    36a8:	48 63 c8             	movslq %eax,%rcx
    36ab:	48 89 c8             	mov    %rcx,%rax
    36ae:	48 c1 e0 03          	shl    $0x3,%rax
    36b2:	48 29 c8             	sub    %rcx,%rax
    36b5:	48 c1 e0 03          	shl    $0x3,%rax
    36b9:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    36bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    36c1:	48 89 c7             	mov    %rax,%rdi
    36c4:	ff d2                	call   *%rdx
    36c6:	48 89 43 20          	mov    %rax,0x20(%rbx)
			elf_file->program_headers[i].p_memsz = reader->get_uint64(reader);
    36ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    36ce:	48 8b 50 40          	mov    0x40(%rax),%rdx
    36d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    36d6:	48 8b 70 68          	mov    0x68(%rax),%rsi
    36da:	8b 45 ec             	mov    -0x14(%rbp),%eax
    36dd:	48 63 c8             	movslq %eax,%rcx
    36e0:	48 89 c8             	mov    %rcx,%rax
    36e3:	48 c1 e0 03          	shl    $0x3,%rax
    36e7:	48 29 c8             	sub    %rcx,%rax
    36ea:	48 c1 e0 03          	shl    $0x3,%rax
    36ee:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    36f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    36f6:	48 89 c7             	mov    %rax,%rdi
    36f9:	ff d2                	call   *%rdx
    36fb:	48 89 43 28          	mov    %rax,0x28(%rbx)
			elf_file->program_headers[i].p_align = reader->get_uint64(reader);
    36ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3703:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3707:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    370b:	48 8b 70 68          	mov    0x68(%rax),%rsi
    370f:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3712:	48 63 c8             	movslq %eax,%rcx
    3715:	48 89 c8             	mov    %rcx,%rax
    3718:	48 c1 e0 03          	shl    $0x3,%rax
    371c:	48 29 c8             	sub    %rcx,%rax
    371f:	48 c1 e0 03          	shl    $0x3,%rax
    3723:	48 8d 1c 06          	lea    (%rsi,%rax,1),%rbx
    3727:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    372b:	48 89 c7             	mov    %rax,%rdi
    372e:	ff d2                	call   *%rdx
    3730:	48 89 43 30          	mov    %rax,0x30(%rbx)
	for (int i = 0; i < elf_file->e_phnum; i++)
    3734:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    3738:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    373c:	0f b7 40 52          	movzwl 0x52(%rax),%eax
    3740:	0f b7 c0             	movzwl %ax,%eax
    3743:	39 45 ec             	cmp    %eax,-0x14(%rbp)
    3746:	0f 8c aa fc ff ff    	jl     33f6 <get_elf_program_headers+0x84>
		}
	}
	return (0);
    374c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    3751:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3755:	c9                   	leave  
    3756:	c3                   	ret    

0000000000003757 <new_elf_file>:

t_elf_file	*new_elf_file(t_binary_reader *reader)
{
    3757:	f3 0f 1e fa          	endbr64 
    375b:	55                   	push   %rbp
    375c:	48 89 e5             	mov    %rsp,%rbp
    375f:	48 83 ec 20          	sub    $0x20,%rsp
    3763:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	t_elf_file *elf_file = ft_calloc(1, sizeof(t_elf_file));
    3767:	be 70 00 00 00       	mov    $0x70,%esi
    376c:	bf 01 00 00 00       	mov    $0x1,%edi
    3771:	e8 a1 17 00 00       	call   4f17 <ft_calloc>
    3776:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (elf_file == NULL)
    377a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    377f:	75 19                	jne    379a <new_elf_file+0x43>
		return (ft_error(WD_PREFIX"Could not allocate memory.\n"), NULL);
    3781:	48 8d 05 58 3a 00 00 	lea    0x3a58(%rip),%rax        # 71e0 <_IO_stdin_used+0x1e0>
    3788:	48 89 c7             	mov    %rax,%rdi
    378b:	e8 a1 0d 00 00       	call   4531 <ft_error>
    3790:	b8 00 00 00 00       	mov    $0x0,%eax
    3795:	e9 11 03 00 00       	jmp    3aab <new_elf_file+0x354>

	/**
	 * By default we set en endianness to little endian because it's the endianness of the header
	 */
	reader->set_endian(reader, READER_LITTLE_ENDIAN);
    379a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    379e:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
    37a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    37a9:	be 01 00 00 00       	mov    $0x1,%esi
    37ae:	48 89 c7             	mov    %rax,%rdi
    37b1:	ff d2                	call   *%rdx
	reader->get_bytes(reader, elf_file->e_ident.raw, 16);
    37b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    37b7:	4c 8b 80 90 00 00 00 	mov    0x90(%rax),%r8
    37be:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    37c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    37c6:	ba 10 00 00 00       	mov    $0x10,%edx
    37cb:	48 89 ce             	mov    %rcx,%rsi
    37ce:	48 89 c7             	mov    %rax,%rdi
    37d1:	41 ff d0             	call   *%r8

	if (elf_file->e_ident.ei_magic != 0x464C457F) // 0x7F 'E' 'L' 'F' but reversed because of endianness
    37d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    37d8:	8b 00                	mov    (%rax),%eax
    37da:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
    37df:	74 25                	je     3806 <new_elf_file+0xaf>
	{
		delete_elf_file(elf_file);
    37e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    37e5:	48 89 c7             	mov    %rax,%rdi
    37e8:	e8 c0 02 00 00       	call   3aad <delete_elf_file>
		return (ft_error(WD_PREFIX"Invalid file format.\n"), NULL);
    37ed:	48 8d 05 0f 3a 00 00 	lea    0x3a0f(%rip),%rax        # 7203 <_IO_stdin_used+0x203>
    37f4:	48 89 c7             	mov    %rax,%rdi
    37f7:	e8 35 0d 00 00       	call   4531 <ft_error>
    37fc:	b8 00 00 00 00       	mov    $0x0,%eax
    3801:	e9 a5 02 00 00       	jmp    3aab <new_elf_file+0x354>
	}

	if (elf_file->e_ident.ei_data == 2)
    3806:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    380a:	0f b6 40 05          	movzbl 0x5(%rax),%eax
    380e:	3c 02                	cmp    $0x2,%al
    3810:	75 19                	jne    382b <new_elf_file+0xd4>
	{
		reader->set_endian(reader, READER_BIG_ENDIAN);
    3812:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3816:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
    381d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3821:	be 00 00 00 00       	mov    $0x0,%esi
    3826:	48 89 c7             	mov    %rax,%rdi
    3829:	ff d2                	call   *%rdx
	}

	/**
	 * We check that the e_ident version is 1, if not the file is not valid
	 */
	if (elf_file->e_ident.ei_version != 1)
    382b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    382f:	0f b6 40 06          	movzbl 0x6(%rax),%eax
    3833:	3c 01                	cmp    $0x1,%al
    3835:	74 25                	je     385c <new_elf_file+0x105>
	{
		delete_elf_file(elf_file);
    3837:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    383b:	48 89 c7             	mov    %rax,%rdi
    383e:	e8 6a 02 00 00       	call   3aad <delete_elf_file>
		return (ft_error(WD_PREFIX"Wrong version.\n"), NULL);
    3843:	48 8d 05 d6 39 00 00 	lea    0x39d6(%rip),%rax        # 7220 <_IO_stdin_used+0x220>
    384a:	48 89 c7             	mov    %rax,%rdi
    384d:	e8 df 0c 00 00       	call   4531 <ft_error>
    3852:	b8 00 00 00 00       	mov    $0x0,%eax
    3857:	e9 4f 02 00 00       	jmp    3aab <new_elf_file+0x354>
	}

	/**
	 * We ensure that the format of the binary matches the current system
	 */
	if (elf_file->e_ident.ei_osabi != 0x00 && elf_file->e_ident.ei_osabi != 0x03)
    385c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3860:	0f b6 40 07          	movzbl 0x7(%rax),%eax
    3864:	84 c0                	test   %al,%al
    3866:	74 31                	je     3899 <new_elf_file+0x142>
    3868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    386c:	0f b6 40 07          	movzbl 0x7(%rax),%eax
    3870:	3c 03                	cmp    $0x3,%al
    3872:	74 25                	je     3899 <new_elf_file+0x142>
	{
		delete_elf_file(elf_file);
    3874:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3878:	48 89 c7             	mov    %rax,%rdi
    387b:	e8 2d 02 00 00       	call   3aad <delete_elf_file>
		return (ft_error(WD_PREFIX"Incompatible ABI.\n"), NULL);
    3880:	48 8d 05 b0 39 00 00 	lea    0x39b0(%rip),%rax        # 7237 <_IO_stdin_used+0x237>
    3887:	48 89 c7             	mov    %rax,%rdi
    388a:	e8 a2 0c 00 00       	call   4531 <ft_error>
    388f:	b8 00 00 00 00       	mov    $0x0,%eax
    3894:	e9 12 02 00 00       	jmp    3aab <new_elf_file+0x354>
	}

	get_type_name(reader, elf_file);
    3899:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    389d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38a1:	48 89 d6             	mov    %rdx,%rsi
    38a4:	48 89 c7             	mov    %rax,%rdi
    38a7:	e8 07 f5 ff ff       	call   2db3 <get_type_name>
	elf_file->e_machine = reader->get_uint16(reader);
    38ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38b0:	48 8b 50 30          	mov    0x30(%rax),%rdx
    38b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38b8:	48 89 c7             	mov    %rax,%rdi
    38bb:	ff d2                	call   *%rdx
    38bd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    38c1:	66 89 42 20          	mov    %ax,0x20(%rdx)
	elf_file->e_version = reader->get_uint32(reader);
    38c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38c9:	48 8b 50 38          	mov    0x38(%rax),%rdx
    38cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38d1:	48 89 c7             	mov    %rax,%rdi
    38d4:	ff d2                	call   *%rdx
    38d6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    38da:	89 42 24             	mov    %eax,0x24(%rdx)

	if (elf_file->e_ident.ei_class == WD_32BITS)
    38dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    38e1:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    38e5:	3c 01                	cmp    $0x1,%al
    38e7:	75 60                	jne    3949 <new_elf_file+0x1f2>
	{
		elf_file->e_entry += reader->get_uint32(reader);
    38e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38ed:	48 8b 50 38          	mov    0x38(%rax),%rdx
    38f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38f5:	48 89 c7             	mov    %rax,%rdi
    38f8:	ff d2                	call   *%rdx
    38fa:	89 c2                	mov    %eax,%edx
    38fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3900:	48 8b 40 28          	mov    0x28(%rax),%rax
    3904:	89 d2                	mov    %edx,%edx
    3906:	48 01 c2             	add    %rax,%rdx
    3909:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    390d:	48 89 50 28          	mov    %rdx,0x28(%rax)
		elf_file->e_phoff = reader->get_uint32(reader);
    3911:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3915:	48 8b 50 38          	mov    0x38(%rax),%rdx
    3919:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    391d:	48 89 c7             	mov    %rax,%rdi
    3920:	ff d2                	call   *%rdx
    3922:	89 c2                	mov    %eax,%edx
    3924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3928:	48 89 50 30          	mov    %rdx,0x30(%rax)
		elf_file->e_shoff = reader->get_uint32(reader);
    392c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3930:	48 8b 50 38          	mov    0x38(%rax),%rdx
    3934:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3938:	48 89 c7             	mov    %rax,%rdi
    393b:	ff d2                	call   *%rdx
    393d:	89 c2                	mov    %eax,%edx
    393f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3943:	48 89 50 38          	mov    %rdx,0x38(%rax)
    3947:	eb 59                	jmp    39a2 <new_elf_file+0x24b>
	}
	else
	{
		elf_file->e_entry += reader->get_uint64(reader);
    3949:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    394d:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3951:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3955:	48 89 c7             	mov    %rax,%rdi
    3958:	ff d2                	call   *%rdx
    395a:	48 89 c2             	mov    %rax,%rdx
    395d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3961:	48 8b 40 28          	mov    0x28(%rax),%rax
    3965:	48 01 c2             	add    %rax,%rdx
    3968:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    396c:	48 89 50 28          	mov    %rdx,0x28(%rax)
		elf_file->e_phoff = reader->get_uint64(reader);
    3970:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3974:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3978:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    397c:	48 89 c7             	mov    %rax,%rdi
    397f:	ff d2                	call   *%rdx
    3981:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3985:	48 89 42 30          	mov    %rax,0x30(%rdx)
		elf_file->e_shoff = reader->get_uint64(reader);
    3989:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    398d:	48 8b 50 40          	mov    0x40(%rax),%rdx
    3991:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3995:	48 89 c7             	mov    %rax,%rdi
    3998:	ff d2                	call   *%rdx
    399a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    399e:	48 89 42 38          	mov    %rax,0x38(%rdx)
	}
	elf_file->e_flags = reader->get_uint32(reader);
    39a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39a6:	48 8b 50 38          	mov    0x38(%rax),%rdx
    39aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39ae:	48 89 c7             	mov    %rax,%rdi
    39b1:	ff d2                	call   *%rdx
    39b3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    39b7:	89 42 40             	mov    %eax,0x40(%rdx)
	elf_file->e_ehsize = reader->get_uint16(reader);
    39ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39be:	48 8b 50 30          	mov    0x30(%rax),%rdx
    39c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39c6:	48 89 c7             	mov    %rax,%rdi
    39c9:	ff d2                	call   *%rdx
    39cb:	0f b7 d0             	movzwl %ax,%edx
    39ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    39d2:	48 89 50 48          	mov    %rdx,0x48(%rax)
	elf_file->e_phentsize = reader->get_uint16(reader);
    39d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39da:	48 8b 50 30          	mov    0x30(%rax),%rdx
    39de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39e2:	48 89 c7             	mov    %rax,%rdi
    39e5:	ff d2                	call   *%rdx
    39e7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    39eb:	66 89 42 50          	mov    %ax,0x50(%rdx)
	elf_file->e_phnum = reader->get_uint16(reader);
    39ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39f3:	48 8b 50 30          	mov    0x30(%rax),%rdx
    39f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    39fb:	48 89 c7             	mov    %rax,%rdi
    39fe:	ff d2                	call   *%rdx
    3a00:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3a04:	66 89 42 52          	mov    %ax,0x52(%rdx)
	elf_file->e_shentsize = reader->get_uint16(reader);
    3a08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a0c:	48 8b 50 30          	mov    0x30(%rax),%rdx
    3a10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a14:	48 89 c7             	mov    %rax,%rdi
    3a17:	ff d2                	call   *%rdx
    3a19:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3a1d:	66 89 42 54          	mov    %ax,0x54(%rdx)
	elf_file->e_shnum = reader->get_uint16(reader);
    3a21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a25:	48 8b 50 30          	mov    0x30(%rax),%rdx
    3a29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a2d:	48 89 c7             	mov    %rax,%rdi
    3a30:	ff d2                	call   *%rdx
    3a32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3a36:	66 89 42 56          	mov    %ax,0x56(%rdx)
	elf_file->e_shstrndx = reader->get_uint16(reader);
    3a3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a3e:	48 8b 50 30          	mov    0x30(%rax),%rdx
    3a42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3a46:	48 89 c7             	mov    %rax,%rdi
    3a49:	ff d2                	call   *%rdx
    3a4b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3a4f:	66 89 42 58          	mov    %ax,0x58(%rdx)

	if (get_elf_tables_offset(elf_file, reader))
    3a53:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    3a57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a5b:	48 89 d6             	mov    %rdx,%rsi
    3a5e:	48 89 c7             	mov    %rax,%rdi
    3a61:	e8 d4 f4 ff ff       	call   2f3a <get_elf_tables_offset>
    3a66:	85 c0                	test   %eax,%eax
    3a68:	74 13                	je     3a7d <new_elf_file+0x326>
	{
		delete_elf_file(elf_file);
    3a6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a6e:	48 89 c7             	mov    %rax,%rdi
    3a71:	e8 37 00 00 00       	call   3aad <delete_elf_file>
		return (NULL);
    3a76:	b8 00 00 00 00       	mov    $0x0,%eax
    3a7b:	eb 2e                	jmp    3aab <new_elf_file+0x354>
	}

	if (get_elf_program_headers(elf_file, reader))
    3a7d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    3a81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a85:	48 89 d6             	mov    %rdx,%rsi
    3a88:	48 89 c7             	mov    %rax,%rdi
    3a8b:	e8 e2 f8 ff ff       	call   3372 <get_elf_program_headers>
    3a90:	85 c0                	test   %eax,%eax
    3a92:	74 13                	je     3aa7 <new_elf_file+0x350>
	{
		delete_elf_file(elf_file);
    3a94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a98:	48 89 c7             	mov    %rax,%rdi
    3a9b:	e8 0d 00 00 00       	call   3aad <delete_elf_file>
		return (NULL);
    3aa0:	b8 00 00 00 00       	mov    $0x0,%eax
    3aa5:	eb 04                	jmp    3aab <new_elf_file+0x354>
	}

	return (elf_file);
    3aa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    3aab:	c9                   	leave  
    3aac:	c3                   	ret    

0000000000003aad <delete_elf_file>:

void	delete_elf_file(t_elf_file *elf_file)
{
    3aad:	f3 0f 1e fa          	endbr64 
    3ab1:	55                   	push   %rbp
    3ab2:	48 89 e5             	mov    %rsp,%rbp
    3ab5:	48 83 ec 20          	sub    $0x20,%rsp
    3ab9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	if (elf_file == NULL)
    3abd:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    3ac2:	0f 84 8f 00 00 00    	je     3b57 <delete_elf_file+0xaa>
		return ;

	if (elf_file->program_headers)
    3ac8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3acc:	48 8b 40 68          	mov    0x68(%rax),%rax
    3ad0:	48 85 c0             	test   %rax,%rax
    3ad3:	74 10                	je     3ae5 <delete_elf_file+0x38>
		free(elf_file->program_headers);
    3ad5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3ad9:	48 8b 40 68          	mov    0x68(%rax),%rax
    3add:	48 89 c7             	mov    %rax,%rdi
    3ae0:	e8 fb e5 ff ff       	call   20e0 <free@plt>

	if (elf_file->section_tables)
    3ae5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3ae9:	48 8b 40 60          	mov    0x60(%rax),%rax
    3aed:	48 85 c0             	test   %rax,%rax
    3af0:	74 57                	je     3b49 <delete_elf_file+0x9c>
	{
		for (int i = 0; i < elf_file->e_shnum; i++)
    3af2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    3af9:	eb 2e                	jmp    3b29 <delete_elf_file+0x7c>
		{
			free(elf_file->section_tables[i].sh_name);
    3afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3aff:	48 8b 48 60          	mov    0x60(%rax),%rcx
    3b03:	8b 45 fc             	mov    -0x4(%rbp),%eax
    3b06:	48 63 d0             	movslq %eax,%rdx
    3b09:	48 89 d0             	mov    %rdx,%rax
    3b0c:	48 01 c0             	add    %rax,%rax
    3b0f:	48 01 d0             	add    %rdx,%rax
    3b12:	48 c1 e0 04          	shl    $0x4,%rax
    3b16:	48 01 c8             	add    %rcx,%rax
    3b19:	48 8b 40 28          	mov    0x28(%rax),%rax
    3b1d:	48 89 c7             	mov    %rax,%rdi
    3b20:	e8 bb e5 ff ff       	call   20e0 <free@plt>
		for (int i = 0; i < elf_file->e_shnum; i++)
    3b25:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    3b29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3b2d:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    3b31:	0f b7 c0             	movzwl %ax,%eax
    3b34:	39 45 fc             	cmp    %eax,-0x4(%rbp)
    3b37:	7c c2                	jl     3afb <delete_elf_file+0x4e>
		}
		free(elf_file->section_tables);
    3b39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3b3d:	48 8b 40 60          	mov    0x60(%rax),%rax
    3b41:	48 89 c7             	mov    %rax,%rdi
    3b44:	e8 97 e5 ff ff       	call   20e0 <free@plt>
	}
	free(elf_file);
    3b49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3b4d:	48 89 c7             	mov    %rax,%rdi
    3b50:	e8 8b e5 ff ff       	call   20e0 <free@plt>
    3b55:	eb 01                	jmp    3b58 <delete_elf_file+0xab>
		return ;
    3b57:	90                   	nop
}
    3b58:	c9                   	leave  
    3b59:	c3                   	ret    

0000000000003b5a <print_elf_program_flag>:

static void	print_elf_program_flag(uint32_t flag)
{
    3b5a:	f3 0f 1e fa          	endbr64 
    3b5e:	55                   	push   %rbp
    3b5f:	48 89 e5             	mov    %rsp,%rbp
    3b62:	48 83 ec 20          	sub    $0x20,%rsp
    3b66:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int res = 0;
    3b69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	if (flag & 0x01)
    3b70:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3b73:	83 e0 01             	and    $0x1,%eax
    3b76:	85 c0                	test   %eax,%eax
    3b78:	74 17                	je     3b91 <print_elf_program_flag+0x37>
		res += printf("X");
    3b7a:	48 8d 05 d0 36 00 00 	lea    0x36d0(%rip),%rax        # 7251 <_IO_stdin_used+0x251>
    3b81:	48 89 c7             	mov    %rax,%rdi
    3b84:	b8 00 00 00 00       	mov    $0x0,%eax
    3b89:	e8 a2 e5 ff ff       	call   2130 <printf@plt>
    3b8e:	01 45 fc             	add    %eax,-0x4(%rbp)
	if (flag & 0x02)
    3b91:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3b94:	83 e0 02             	and    $0x2,%eax
    3b97:	85 c0                	test   %eax,%eax
    3b99:	74 17                	je     3bb2 <print_elf_program_flag+0x58>
		res += printf("W");
    3b9b:	48 8d 05 b1 36 00 00 	lea    0x36b1(%rip),%rax        # 7253 <_IO_stdin_used+0x253>
    3ba2:	48 89 c7             	mov    %rax,%rdi
    3ba5:	b8 00 00 00 00       	mov    $0x0,%eax
    3baa:	e8 81 e5 ff ff       	call   2130 <printf@plt>
    3baf:	01 45 fc             	add    %eax,-0x4(%rbp)
	if (flag & 0x04)
    3bb2:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3bb5:	83 e0 04             	and    $0x4,%eax
    3bb8:	85 c0                	test   %eax,%eax
    3bba:	74 17                	je     3bd3 <print_elf_program_flag+0x79>
		res += printf("R");
    3bbc:	48 8d 05 92 36 00 00 	lea    0x3692(%rip),%rax        # 7255 <_IO_stdin_used+0x255>
    3bc3:	48 89 c7             	mov    %rax,%rdi
    3bc6:	b8 00 00 00 00       	mov    $0x0,%eax
    3bcb:	e8 60 e5 ff ff       	call   2130 <printf@plt>
    3bd0:	01 45 fc             	add    %eax,-0x4(%rbp)
	printf("%*s%s", 3 - res, "", "    ");
    3bd3:	b8 03 00 00 00       	mov    $0x3,%eax
    3bd8:	2b 45 fc             	sub    -0x4(%rbp),%eax
    3bdb:	48 8d 15 75 36 00 00 	lea    0x3675(%rip),%rdx        # 7257 <_IO_stdin_used+0x257>
    3be2:	48 89 d1             	mov    %rdx,%rcx
    3be5:	48 8d 15 70 36 00 00 	lea    0x3670(%rip),%rdx        # 725c <_IO_stdin_used+0x25c>
    3bec:	89 c6                	mov    %eax,%esi
    3bee:	48 8d 05 68 36 00 00 	lea    0x3668(%rip),%rax        # 725d <_IO_stdin_used+0x25d>
    3bf5:	48 89 c7             	mov    %rax,%rdi
    3bf8:	b8 00 00 00 00       	mov    $0x0,%eax
    3bfd:	e8 2e e5 ff ff       	call   2130 <printf@plt>
}
    3c02:	90                   	nop
    3c03:	c9                   	leave  
    3c04:	c3                   	ret    

0000000000003c05 <print_elf_file>:

void	print_elf_file(t_elf_file *elf_file)
{
    3c05:	f3 0f 1e fa          	endbr64 
    3c09:	55                   	push   %rbp
    3c0a:	48 89 e5             	mov    %rsp,%rbp
    3c0d:	48 83 ec 30          	sub    $0x30,%rsp
    3c11:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	printf("ELF Header:\n");
    3c15:	48 8d 05 47 36 00 00 	lea    0x3647(%rip),%rax        # 7263 <_IO_stdin_used+0x263>
    3c1c:	48 89 c7             	mov    %rax,%rdi
    3c1f:	e8 dc e4 ff ff       	call   2100 <puts@plt>
	printf("  Magic:   ");
    3c24:	48 8d 05 44 36 00 00 	lea    0x3644(%rip),%rax        # 726f <_IO_stdin_used+0x26f>
    3c2b:	48 89 c7             	mov    %rax,%rdi
    3c2e:	b8 00 00 00 00       	mov    $0x0,%eax
    3c33:	e8 f8 e4 ff ff       	call   2130 <printf@plt>
	for (int i = 0; i < 16; i++)
    3c38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    3c3f:	eb 2a                	jmp    3c6b <print_elf_file+0x66>
		printf("%02X ", elf_file->e_ident.raw[i]);
    3c41:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    3c45:	8b 45 ec             	mov    -0x14(%rbp),%eax
    3c48:	48 98                	cltq   
    3c4a:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
    3c4e:	0f be c0             	movsbl %al,%eax
    3c51:	89 c6                	mov    %eax,%esi
    3c53:	48 8d 05 21 36 00 00 	lea    0x3621(%rip),%rax        # 727b <_IO_stdin_used+0x27b>
    3c5a:	48 89 c7             	mov    %rax,%rdi
    3c5d:	b8 00 00 00 00       	mov    $0x0,%eax
    3c62:	e8 c9 e4 ff ff       	call   2130 <printf@plt>
	for (int i = 0; i < 16; i++)
    3c67:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    3c6b:	83 7d ec 0f          	cmpl   $0xf,-0x14(%rbp)
    3c6f:	7e d0                	jle    3c41 <print_elf_file+0x3c>
	printf("\n");
    3c71:	bf 0a 00 00 00       	mov    $0xa,%edi
    3c76:	e8 75 e4 ff ff       	call   20f0 <putchar@plt>
	printf("  Class:                             ELF%d\n", elf_file->e_ident.ei_class * 32);
    3c7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3c7f:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    3c83:	0f b6 c0             	movzbl %al,%eax
    3c86:	c1 e0 05             	shl    $0x5,%eax
    3c89:	89 c6                	mov    %eax,%esi
    3c8b:	48 8d 05 f6 35 00 00 	lea    0x35f6(%rip),%rax        # 7288 <_IO_stdin_used+0x288>
    3c92:	48 89 c7             	mov    %rax,%rdi
    3c95:	b8 00 00 00 00       	mov    $0x0,%eax
    3c9a:	e8 91 e4 ff ff       	call   2130 <printf@plt>
	printf("  Data:                              2's complement, %s\n", elf_file->e_ident.ei_data - 1 ? "big endian" : "little endian");
    3c9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ca3:	0f b6 40 05          	movzbl 0x5(%rax),%eax
    3ca7:	3c 01                	cmp    $0x1,%al
    3ca9:	74 09                	je     3cb4 <print_elf_file+0xaf>
    3cab:	48 8d 05 02 36 00 00 	lea    0x3602(%rip),%rax        # 72b4 <_IO_stdin_used+0x2b4>
    3cb2:	eb 07                	jmp    3cbb <print_elf_file+0xb6>
    3cb4:	48 8d 05 04 36 00 00 	lea    0x3604(%rip),%rax        # 72bf <_IO_stdin_used+0x2bf>
    3cbb:	48 89 c6             	mov    %rax,%rsi
    3cbe:	48 8d 05 0b 36 00 00 	lea    0x360b(%rip),%rax        # 72d0 <_IO_stdin_used+0x2d0>
    3cc5:	48 89 c7             	mov    %rax,%rdi
    3cc8:	b8 00 00 00 00       	mov    $0x0,%eax
    3ccd:	e8 5e e4 ff ff       	call   2130 <printf@plt>
	printf("  Version:                           %u (current)\n", elf_file->e_ident.ei_version);
    3cd2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3cd6:	0f b6 40 06          	movzbl 0x6(%rax),%eax
    3cda:	0f b6 c0             	movzbl %al,%eax
    3cdd:	89 c6                	mov    %eax,%esi
    3cdf:	48 8d 05 2a 36 00 00 	lea    0x362a(%rip),%rax        # 7310 <_IO_stdin_used+0x310>
    3ce6:	48 89 c7             	mov    %rax,%rdi
    3ce9:	b8 00 00 00 00       	mov    $0x0,%eax
    3cee:	e8 3d e4 ff ff       	call   2130 <printf@plt>
	printf("  OS/ABI:                            %s\n", g_elf_osabi_name[elf_file->e_ident.ei_osabi]);
    3cf3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3cf7:	0f b6 40 07          	movzbl 0x7(%rax),%eax
    3cfb:	0f b6 c0             	movzbl %al,%eax
    3cfe:	48 98                	cltq   
    3d00:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    3d07:	00 
    3d08:	48 8d 05 b1 63 00 00 	lea    0x63b1(%rip),%rax        # a0c0 <g_elf_osabi_name>
    3d0f:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    3d13:	48 89 c6             	mov    %rax,%rsi
    3d16:	48 8d 05 2b 36 00 00 	lea    0x362b(%rip),%rax        # 7348 <_IO_stdin_used+0x348>
    3d1d:	48 89 c7             	mov    %rax,%rdi
    3d20:	b8 00 00 00 00       	mov    $0x0,%eax
    3d25:	e8 06 e4 ff ff       	call   2130 <printf@plt>
	printf("  ABI Version:                       %u\n", elf_file->e_ident.ei_abi_version);
    3d2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3d2e:	0f b6 40 08          	movzbl 0x8(%rax),%eax
    3d32:	0f b6 c0             	movzbl %al,%eax
    3d35:	89 c6                	mov    %eax,%esi
    3d37:	48 8d 05 3a 36 00 00 	lea    0x363a(%rip),%rax        # 7378 <_IO_stdin_used+0x378>
    3d3e:	48 89 c7             	mov    %rax,%rdi
    3d41:	b8 00 00 00 00       	mov    $0x0,%eax
    3d46:	e8 e5 e3 ff ff       	call   2130 <printf@plt>
	printf("  Type:                              %s\n", elf_file->e_type_name);
    3d4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3d4f:	48 8b 40 18          	mov    0x18(%rax),%rax
    3d53:	48 89 c6             	mov    %rax,%rsi
    3d56:	48 8d 05 4b 36 00 00 	lea    0x364b(%rip),%rax        # 73a8 <_IO_stdin_used+0x3a8>
    3d5d:	48 89 c7             	mov    %rax,%rdi
    3d60:	b8 00 00 00 00       	mov    $0x0,%eax
    3d65:	e8 c6 e3 ff ff       	call   2130 <printf@plt>
	printf("  Version:                           %#x\n", elf_file->e_version);
    3d6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3d6e:	8b 40 24             	mov    0x24(%rax),%eax
    3d71:	89 c6                	mov    %eax,%esi
    3d73:	48 8d 05 5e 36 00 00 	lea    0x365e(%rip),%rax        # 73d8 <_IO_stdin_used+0x3d8>
    3d7a:	48 89 c7             	mov    %rax,%rdi
    3d7d:	b8 00 00 00 00       	mov    $0x0,%eax
    3d82:	e8 a9 e3 ff ff       	call   2130 <printf@plt>
	printf("  Entry point:                       %#lx\n", elf_file->e_entry);
    3d87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3d8b:	48 8b 40 28          	mov    0x28(%rax),%rax
    3d8f:	48 89 c6             	mov    %rax,%rsi
    3d92:	48 8d 05 6f 36 00 00 	lea    0x366f(%rip),%rax        # 7408 <_IO_stdin_used+0x408>
    3d99:	48 89 c7             	mov    %rax,%rdi
    3d9c:	b8 00 00 00 00       	mov    $0x0,%eax
    3da1:	e8 8a e3 ff ff       	call   2130 <printf@plt>
	printf("  Start of program headers:          %ld (bytes into file)\n", elf_file->e_phoff);
    3da6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3daa:	48 8b 40 30          	mov    0x30(%rax),%rax
    3dae:	48 89 c6             	mov    %rax,%rsi
    3db1:	48 8d 05 80 36 00 00 	lea    0x3680(%rip),%rax        # 7438 <_IO_stdin_used+0x438>
    3db8:	48 89 c7             	mov    %rax,%rdi
    3dbb:	b8 00 00 00 00       	mov    $0x0,%eax
    3dc0:	e8 6b e3 ff ff       	call   2130 <printf@plt>
	printf("  Start of section headers:          %ld (bytes into file)\n", elf_file->e_shoff);
    3dc5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3dc9:	48 8b 40 38          	mov    0x38(%rax),%rax
    3dcd:	48 89 c6             	mov    %rax,%rsi
    3dd0:	48 8d 05 a1 36 00 00 	lea    0x36a1(%rip),%rax        # 7478 <_IO_stdin_used+0x478>
    3dd7:	48 89 c7             	mov    %rax,%rdi
    3dda:	b8 00 00 00 00       	mov    $0x0,%eax
    3ddf:	e8 4c e3 ff ff       	call   2130 <printf@plt>
	printf("  Size of this header:               %ld (bytes)\n", elf_file->e_ehsize);
    3de4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3de8:	48 8b 40 48          	mov    0x48(%rax),%rax
    3dec:	48 89 c6             	mov    %rax,%rsi
    3def:	48 8d 05 c2 36 00 00 	lea    0x36c2(%rip),%rax        # 74b8 <_IO_stdin_used+0x4b8>
    3df6:	48 89 c7             	mov    %rax,%rdi
    3df9:	b8 00 00 00 00       	mov    $0x0,%eax
    3dfe:	e8 2d e3 ff ff       	call   2130 <printf@plt>
	printf("  Size of program headers:           %d (bytes)\n", elf_file->e_phentsize);
    3e03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e07:	0f b7 40 50          	movzwl 0x50(%rax),%eax
    3e0b:	0f b7 c0             	movzwl %ax,%eax
    3e0e:	89 c6                	mov    %eax,%esi
    3e10:	48 8d 05 d9 36 00 00 	lea    0x36d9(%rip),%rax        # 74f0 <_IO_stdin_used+0x4f0>
    3e17:	48 89 c7             	mov    %rax,%rdi
    3e1a:	b8 00 00 00 00       	mov    $0x0,%eax
    3e1f:	e8 0c e3 ff ff       	call   2130 <printf@plt>
	printf("  Number of program headers:         %d\n", elf_file->e_phnum);
    3e24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e28:	0f b7 40 52          	movzwl 0x52(%rax),%eax
    3e2c:	0f b7 c0             	movzwl %ax,%eax
    3e2f:	89 c6                	mov    %eax,%esi
    3e31:	48 8d 05 f0 36 00 00 	lea    0x36f0(%rip),%rax        # 7528 <_IO_stdin_used+0x528>
    3e38:	48 89 c7             	mov    %rax,%rdi
    3e3b:	b8 00 00 00 00       	mov    $0x0,%eax
    3e40:	e8 eb e2 ff ff       	call   2130 <printf@plt>
	printf("  Size of section headers:           %d (bytes)\n", elf_file->e_shentsize);
    3e45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e49:	0f b7 40 54          	movzwl 0x54(%rax),%eax
    3e4d:	0f b7 c0             	movzwl %ax,%eax
    3e50:	89 c6                	mov    %eax,%esi
    3e52:	48 8d 05 ff 36 00 00 	lea    0x36ff(%rip),%rax        # 7558 <_IO_stdin_used+0x558>
    3e59:	48 89 c7             	mov    %rax,%rdi
    3e5c:	b8 00 00 00 00       	mov    $0x0,%eax
    3e61:	e8 ca e2 ff ff       	call   2130 <printf@plt>
	printf("  Number of section headers:         %d\n", elf_file->e_shnum);
    3e66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e6a:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    3e6e:	0f b7 c0             	movzwl %ax,%eax
    3e71:	89 c6                	mov    %eax,%esi
    3e73:	48 8d 05 16 37 00 00 	lea    0x3716(%rip),%rax        # 7590 <_IO_stdin_used+0x590>
    3e7a:	48 89 c7             	mov    %rax,%rdi
    3e7d:	b8 00 00 00 00       	mov    $0x0,%eax
    3e82:	e8 a9 e2 ff ff       	call   2130 <printf@plt>
	printf("  Section header string table index: %d\n", elf_file->e_shstrndx);
    3e87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3e8b:	0f b7 40 58          	movzwl 0x58(%rax),%eax
    3e8f:	0f b7 c0             	movzwl %ax,%eax
    3e92:	89 c6                	mov    %eax,%esi
    3e94:	48 8d 05 25 37 00 00 	lea    0x3725(%rip),%rax        # 75c0 <_IO_stdin_used+0x5c0>
    3e9b:	48 89 c7             	mov    %rax,%rdi
    3e9e:	b8 00 00 00 00       	mov    $0x0,%eax
    3ea3:	e8 88 e2 ff ff       	call   2130 <printf@plt>

	printf("\nSection Headers:\n");
    3ea8:	48 8d 05 3a 37 00 00 	lea    0x373a(%rip),%rax        # 75e9 <_IO_stdin_used+0x5e9>
    3eaf:	48 89 c7             	mov    %rax,%rdi
    3eb2:	e8 49 e2 ff ff       	call   2100 <puts@plt>
	printf("  [Nr] Name               Type               Address            Offset             Size\n");
    3eb7:	48 8d 05 42 37 00 00 	lea    0x3742(%rip),%rax        # 7600 <_IO_stdin_used+0x600>
    3ebe:	48 89 c7             	mov    %rax,%rdi
    3ec1:	e8 3a e2 ff ff       	call   2100 <puts@plt>
	for (int i = 0; i < elf_file->e_shnum; i++)
    3ec6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
    3ecd:	e9 ad 01 00 00       	jmp    407f <print_elf_file+0x47a>
	{
		printf("  [%2d] ", i);
    3ed2:	8b 45 f0             	mov    -0x10(%rbp),%eax
    3ed5:	89 c6                	mov    %eax,%esi
    3ed7:	48 8d 05 7a 37 00 00 	lea    0x377a(%rip),%rax        # 7658 <_IO_stdin_used+0x658>
    3ede:	48 89 c7             	mov    %rax,%rdi
    3ee1:	b8 00 00 00 00       	mov    $0x0,%eax
    3ee6:	e8 45 e2 ff ff       	call   2130 <printf@plt>
		printf("%-18s ", elf_file->section_tables[i].sh_name);
    3eeb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3eef:	48 8b 48 60          	mov    0x60(%rax),%rcx
    3ef3:	8b 45 f0             	mov    -0x10(%rbp),%eax
    3ef6:	48 63 d0             	movslq %eax,%rdx
    3ef9:	48 89 d0             	mov    %rdx,%rax
    3efc:	48 01 c0             	add    %rax,%rax
    3eff:	48 01 d0             	add    %rdx,%rax
    3f02:	48 c1 e0 04          	shl    $0x4,%rax
    3f06:	48 01 c8             	add    %rcx,%rax
    3f09:	48 8b 40 28          	mov    0x28(%rax),%rax
    3f0d:	48 89 c6             	mov    %rax,%rsi
    3f10:	48 8d 05 4a 37 00 00 	lea    0x374a(%rip),%rax        # 7661 <_IO_stdin_used+0x661>
    3f17:	48 89 c7             	mov    %rax,%rdi
    3f1a:	b8 00 00 00 00       	mov    $0x0,%eax
    3f1f:	e8 0c e2 ff ff       	call   2130 <printf@plt>
		if (elf_file->section_tables[i].sh_type < 0x13)
    3f24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f28:	48 8b 48 60          	mov    0x60(%rax),%rcx
    3f2c:	8b 45 f0             	mov    -0x10(%rbp),%eax
    3f2f:	48 63 d0             	movslq %eax,%rdx
    3f32:	48 89 d0             	mov    %rdx,%rax
    3f35:	48 01 c0             	add    %rax,%rax
    3f38:	48 01 d0             	add    %rdx,%rax
    3f3b:	48 c1 e0 04          	shl    $0x4,%rax
    3f3f:	48 01 c8             	add    %rcx,%rax
    3f42:	8b 40 04             	mov    0x4(%rax),%eax
    3f45:	83 f8 12             	cmp    $0x12,%eax
    3f48:	77 4f                	ja     3f99 <print_elf_file+0x394>
			printf("%-18s ", g_elf_section_table_type[elf_file->section_tables[i].sh_type]);
    3f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f4e:	48 8b 48 60          	mov    0x60(%rax),%rcx
    3f52:	8b 45 f0             	mov    -0x10(%rbp),%eax
    3f55:	48 63 d0             	movslq %eax,%rdx
    3f58:	48 89 d0             	mov    %rdx,%rax
    3f5b:	48 01 c0             	add    %rax,%rax
    3f5e:	48 01 d0             	add    %rdx,%rax
    3f61:	48 c1 e0 04          	shl    $0x4,%rax
    3f65:	48 01 c8             	add    %rcx,%rax
    3f68:	8b 40 04             	mov    0x4(%rax),%eax
    3f6b:	89 c0                	mov    %eax,%eax
    3f6d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    3f74:	00 
    3f75:	48 8d 05 a4 60 00 00 	lea    0x60a4(%rip),%rax        # a020 <g_elf_section_table_type>
    3f7c:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    3f80:	48 89 c6             	mov    %rax,%rsi
    3f83:	48 8d 05 d7 36 00 00 	lea    0x36d7(%rip),%rax        # 7661 <_IO_stdin_used+0x661>
    3f8a:	48 89 c7             	mov    %rax,%rdi
    3f8d:	b8 00 00 00 00       	mov    $0x0,%eax
    3f92:	e8 99 e1 ff ff       	call   2130 <printf@plt>
    3f97:	eb 37                	jmp    3fd0 <print_elf_file+0x3cb>
		else
			printf("%#-18x ", elf_file->section_tables[i].sh_type);
    3f99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3f9d:	48 8b 48 60          	mov    0x60(%rax),%rcx
    3fa1:	8b 45 f0             	mov    -0x10(%rbp),%eax
    3fa4:	48 63 d0             	movslq %eax,%rdx
    3fa7:	48 89 d0             	mov    %rdx,%rax
    3faa:	48 01 c0             	add    %rax,%rax
    3fad:	48 01 d0             	add    %rdx,%rax
    3fb0:	48 c1 e0 04          	shl    $0x4,%rax
    3fb4:	48 01 c8             	add    %rcx,%rax
    3fb7:	8b 40 04             	mov    0x4(%rax),%eax
    3fba:	89 c6                	mov    %eax,%esi
    3fbc:	48 8d 05 a5 36 00 00 	lea    0x36a5(%rip),%rax        # 7668 <_IO_stdin_used+0x668>
    3fc3:	48 89 c7             	mov    %rax,%rdi
    3fc6:	b8 00 00 00 00       	mov    $0x0,%eax
    3fcb:	e8 60 e1 ff ff       	call   2130 <printf@plt>
		printf("%#018lx ", elf_file->section_tables[i].sh_address);
    3fd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3fd4:	48 8b 48 60          	mov    0x60(%rax),%rcx
    3fd8:	8b 45 f0             	mov    -0x10(%rbp),%eax
    3fdb:	48 63 d0             	movslq %eax,%rdx
    3fde:	48 89 d0             	mov    %rdx,%rax
    3fe1:	48 01 c0             	add    %rax,%rax
    3fe4:	48 01 d0             	add    %rdx,%rax
    3fe7:	48 c1 e0 04          	shl    $0x4,%rax
    3feb:	48 01 c8             	add    %rcx,%rax
    3fee:	48 8b 40 10          	mov    0x10(%rax),%rax
    3ff2:	48 89 c6             	mov    %rax,%rsi
    3ff5:	48 8d 05 74 36 00 00 	lea    0x3674(%rip),%rax        # 7670 <_IO_stdin_used+0x670>
    3ffc:	48 89 c7             	mov    %rax,%rdi
    3fff:	b8 00 00 00 00       	mov    $0x0,%eax
    4004:	e8 27 e1 ff ff       	call   2130 <printf@plt>
		printf("%#018lx ", elf_file->section_tables[i].sh_offset);
    4009:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    400d:	48 8b 48 60          	mov    0x60(%rax),%rcx
    4011:	8b 45 f0             	mov    -0x10(%rbp),%eax
    4014:	48 63 d0             	movslq %eax,%rdx
    4017:	48 89 d0             	mov    %rdx,%rax
    401a:	48 01 c0             	add    %rax,%rax
    401d:	48 01 d0             	add    %rdx,%rax
    4020:	48 c1 e0 04          	shl    $0x4,%rax
    4024:	48 01 c8             	add    %rcx,%rax
    4027:	48 8b 40 18          	mov    0x18(%rax),%rax
    402b:	48 89 c6             	mov    %rax,%rsi
    402e:	48 8d 05 3b 36 00 00 	lea    0x363b(%rip),%rax        # 7670 <_IO_stdin_used+0x670>
    4035:	48 89 c7             	mov    %rax,%rdi
    4038:	b8 00 00 00 00       	mov    $0x0,%eax
    403d:	e8 ee e0 ff ff       	call   2130 <printf@plt>
		printf("%#018lx\n", elf_file->section_tables[i].sh_size);
    4042:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4046:	48 8b 48 60          	mov    0x60(%rax),%rcx
    404a:	8b 45 f0             	mov    -0x10(%rbp),%eax
    404d:	48 63 d0             	movslq %eax,%rdx
    4050:	48 89 d0             	mov    %rdx,%rax
    4053:	48 01 c0             	add    %rax,%rax
    4056:	48 01 d0             	add    %rdx,%rax
    4059:	48 c1 e0 04          	shl    $0x4,%rax
    405d:	48 01 c8             	add    %rcx,%rax
    4060:	48 8b 40 20          	mov    0x20(%rax),%rax
    4064:	48 89 c6             	mov    %rax,%rsi
    4067:	48 8d 05 0b 36 00 00 	lea    0x360b(%rip),%rax        # 7679 <_IO_stdin_used+0x679>
    406e:	48 89 c7             	mov    %rax,%rdi
    4071:	b8 00 00 00 00       	mov    $0x0,%eax
    4076:	e8 b5 e0 ff ff       	call   2130 <printf@plt>
	for (int i = 0; i < elf_file->e_shnum; i++)
    407b:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
    407f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4083:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    4087:	0f b7 c0             	movzwl %ax,%eax
    408a:	39 45 f0             	cmp    %eax,-0x10(%rbp)
    408d:	0f 8c 3f fe ff ff    	jl     3ed2 <print_elf_file+0x2cd>
	}

	printf("\nProgram Headers:\n");
    4093:	48 8d 05 e8 35 00 00 	lea    0x35e8(%rip),%rax        # 7682 <_IO_stdin_used+0x682>
    409a:	48 89 c7             	mov    %rax,%rdi
    409d:	e8 5e e0 ff ff       	call   2100 <puts@plt>
	printf("  Type           Offset             VirtAddr           PhysAddr           FileSiz            MemSiz             Flags  Align\n");
    40a2:	48 8d 05 ef 35 00 00 	lea    0x35ef(%rip),%rax        # 7698 <_IO_stdin_used+0x698>
    40a9:	48 89 c7             	mov    %rax,%rdi
    40ac:	e8 4f e0 ff ff       	call   2100 <puts@plt>
	for (int i = 0; i < elf_file->e_phnum; i++)
    40b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    40b8:	e9 49 02 00 00       	jmp    4306 <print_elf_file+0x701>
	{
		printf("  ");
    40bd:	48 8d 05 51 36 00 00 	lea    0x3651(%rip),%rax        # 7715 <_IO_stdin_used+0x715>
    40c4:	48 89 c7             	mov    %rax,%rdi
    40c7:	b8 00 00 00 00       	mov    $0x0,%eax
    40cc:	e8 5f e0 ff ff       	call   2130 <printf@plt>
		if (elf_file->program_headers[i].p_type < 0x08)
    40d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    40d5:	48 8b 48 68          	mov    0x68(%rax),%rcx
    40d9:	8b 45 f4             	mov    -0xc(%rbp),%eax
    40dc:	48 63 d0             	movslq %eax,%rdx
    40df:	48 89 d0             	mov    %rdx,%rax
    40e2:	48 c1 e0 03          	shl    $0x3,%rax
    40e6:	48 29 d0             	sub    %rdx,%rax
    40e9:	48 c1 e0 03          	shl    $0x3,%rax
    40ed:	48 01 c8             	add    %rcx,%rax
    40f0:	8b 00                	mov    (%rax),%eax
    40f2:	83 f8 07             	cmp    $0x7,%eax
    40f5:	77 4f                	ja     4146 <print_elf_file+0x541>
			printf("%-14s ", g_elf_program_header_type[elf_file->program_headers[i].p_type]);
    40f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    40fb:	48 8b 48 68          	mov    0x68(%rax),%rcx
    40ff:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4102:	48 63 d0             	movslq %eax,%rdx
    4105:	48 89 d0             	mov    %rdx,%rax
    4108:	48 c1 e0 03          	shl    $0x3,%rax
    410c:	48 29 d0             	sub    %rdx,%rax
    410f:	48 c1 e0 03          	shl    $0x3,%rax
    4113:	48 01 c8             	add    %rcx,%rax
    4116:	8b 00                	mov    (%rax),%eax
    4118:	89 c0                	mov    %eax,%eax
    411a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    4121:	00 
    4122:	48 8d 05 37 60 00 00 	lea    0x6037(%rip),%rax        # a160 <g_elf_program_header_type>
    4129:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    412d:	48 89 c6             	mov    %rax,%rsi
    4130:	48 8d 05 e1 35 00 00 	lea    0x35e1(%rip),%rax        # 7718 <_IO_stdin_used+0x718>
    4137:	48 89 c7             	mov    %rax,%rdi
    413a:	b8 00 00 00 00       	mov    $0x0,%eax
    413f:	e8 ec df ff ff       	call   2130 <printf@plt>
    4144:	eb 37                	jmp    417d <print_elf_file+0x578>
		else
			printf("%#-14x ", elf_file->program_headers[i].p_type);
    4146:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    414a:	48 8b 48 68          	mov    0x68(%rax),%rcx
    414e:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4151:	48 63 d0             	movslq %eax,%rdx
    4154:	48 89 d0             	mov    %rdx,%rax
    4157:	48 c1 e0 03          	shl    $0x3,%rax
    415b:	48 29 d0             	sub    %rdx,%rax
    415e:	48 c1 e0 03          	shl    $0x3,%rax
    4162:	48 01 c8             	add    %rcx,%rax
    4165:	8b 00                	mov    (%rax),%eax
    4167:	89 c6                	mov    %eax,%esi
    4169:	48 8d 05 af 35 00 00 	lea    0x35af(%rip),%rax        # 771f <_IO_stdin_used+0x71f>
    4170:	48 89 c7             	mov    %rax,%rdi
    4173:	b8 00 00 00 00       	mov    $0x0,%eax
    4178:	e8 b3 df ff ff       	call   2130 <printf@plt>
		printf("%#018lx ", elf_file->program_headers[i].p_offset);
    417d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4181:	48 8b 48 68          	mov    0x68(%rax),%rcx
    4185:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4188:	48 63 d0             	movslq %eax,%rdx
    418b:	48 89 d0             	mov    %rdx,%rax
    418e:	48 c1 e0 03          	shl    $0x3,%rax
    4192:	48 29 d0             	sub    %rdx,%rax
    4195:	48 c1 e0 03          	shl    $0x3,%rax
    4199:	48 01 c8             	add    %rcx,%rax
    419c:	48 8b 40 08          	mov    0x8(%rax),%rax
    41a0:	48 89 c6             	mov    %rax,%rsi
    41a3:	48 8d 05 c6 34 00 00 	lea    0x34c6(%rip),%rax        # 7670 <_IO_stdin_used+0x670>
    41aa:	48 89 c7             	mov    %rax,%rdi
    41ad:	b8 00 00 00 00       	mov    $0x0,%eax
    41b2:	e8 79 df ff ff       	call   2130 <printf@plt>
		printf("%#018lx ", elf_file->program_headers[i].p_vaddr);
    41b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    41bb:	48 8b 48 68          	mov    0x68(%rax),%rcx
    41bf:	8b 45 f4             	mov    -0xc(%rbp),%eax
    41c2:	48 63 d0             	movslq %eax,%rdx
    41c5:	48 89 d0             	mov    %rdx,%rax
    41c8:	48 c1 e0 03          	shl    $0x3,%rax
    41cc:	48 29 d0             	sub    %rdx,%rax
    41cf:	48 c1 e0 03          	shl    $0x3,%rax
    41d3:	48 01 c8             	add    %rcx,%rax
    41d6:	48 8b 40 10          	mov    0x10(%rax),%rax
    41da:	48 89 c6             	mov    %rax,%rsi
    41dd:	48 8d 05 8c 34 00 00 	lea    0x348c(%rip),%rax        # 7670 <_IO_stdin_used+0x670>
    41e4:	48 89 c7             	mov    %rax,%rdi
    41e7:	b8 00 00 00 00       	mov    $0x0,%eax
    41ec:	e8 3f df ff ff       	call   2130 <printf@plt>
		printf("%#018lx ", elf_file->program_headers[i].p_paddr);
    41f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    41f5:	48 8b 48 68          	mov    0x68(%rax),%rcx
    41f9:	8b 45 f4             	mov    -0xc(%rbp),%eax
    41fc:	48 63 d0             	movslq %eax,%rdx
    41ff:	48 89 d0             	mov    %rdx,%rax
    4202:	48 c1 e0 03          	shl    $0x3,%rax
    4206:	48 29 d0             	sub    %rdx,%rax
    4209:	48 c1 e0 03          	shl    $0x3,%rax
    420d:	48 01 c8             	add    %rcx,%rax
    4210:	48 8b 40 18          	mov    0x18(%rax),%rax
    4214:	48 89 c6             	mov    %rax,%rsi
    4217:	48 8d 05 52 34 00 00 	lea    0x3452(%rip),%rax        # 7670 <_IO_stdin_used+0x670>
    421e:	48 89 c7             	mov    %rax,%rdi
    4221:	b8 00 00 00 00       	mov    $0x0,%eax
    4226:	e8 05 df ff ff       	call   2130 <printf@plt>
		printf("%#018lx ", elf_file->program_headers[i].p_filesz);
    422b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    422f:	48 8b 48 68          	mov    0x68(%rax),%rcx
    4233:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4236:	48 63 d0             	movslq %eax,%rdx
    4239:	48 89 d0             	mov    %rdx,%rax
    423c:	48 c1 e0 03          	shl    $0x3,%rax
    4240:	48 29 d0             	sub    %rdx,%rax
    4243:	48 c1 e0 03          	shl    $0x3,%rax
    4247:	48 01 c8             	add    %rcx,%rax
    424a:	48 8b 40 20          	mov    0x20(%rax),%rax
    424e:	48 89 c6             	mov    %rax,%rsi
    4251:	48 8d 05 18 34 00 00 	lea    0x3418(%rip),%rax        # 7670 <_IO_stdin_used+0x670>
    4258:	48 89 c7             	mov    %rax,%rdi
    425b:	b8 00 00 00 00       	mov    $0x0,%eax
    4260:	e8 cb de ff ff       	call   2130 <printf@plt>
		printf("%#018lx ", elf_file->program_headers[i].p_memsz);
    4265:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4269:	48 8b 48 68          	mov    0x68(%rax),%rcx
    426d:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4270:	48 63 d0             	movslq %eax,%rdx
    4273:	48 89 d0             	mov    %rdx,%rax
    4276:	48 c1 e0 03          	shl    $0x3,%rax
    427a:	48 29 d0             	sub    %rdx,%rax
    427d:	48 c1 e0 03          	shl    $0x3,%rax
    4281:	48 01 c8             	add    %rcx,%rax
    4284:	48 8b 40 28          	mov    0x28(%rax),%rax
    4288:	48 89 c6             	mov    %rax,%rsi
    428b:	48 8d 05 de 33 00 00 	lea    0x33de(%rip),%rax        # 7670 <_IO_stdin_used+0x670>
    4292:	48 89 c7             	mov    %rax,%rdi
    4295:	b8 00 00 00 00       	mov    $0x0,%eax
    429a:	e8 91 de ff ff       	call   2130 <printf@plt>
		print_elf_program_flag(elf_file->program_headers[i].p_flags);
    429f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    42a3:	48 8b 48 68          	mov    0x68(%rax),%rcx
    42a7:	8b 45 f4             	mov    -0xc(%rbp),%eax
    42aa:	48 63 d0             	movslq %eax,%rdx
    42ad:	48 89 d0             	mov    %rdx,%rax
    42b0:	48 c1 e0 03          	shl    $0x3,%rax
    42b4:	48 29 d0             	sub    %rdx,%rax
    42b7:	48 c1 e0 03          	shl    $0x3,%rax
    42bb:	48 01 c8             	add    %rcx,%rax
    42be:	8b 40 04             	mov    0x4(%rax),%eax
    42c1:	89 c7                	mov    %eax,%edi
    42c3:	e8 92 f8 ff ff       	call   3b5a <print_elf_program_flag>
		printf("%#lx\n", elf_file->program_headers[i].p_align);
    42c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    42cc:	48 8b 48 68          	mov    0x68(%rax),%rcx
    42d0:	8b 45 f4             	mov    -0xc(%rbp),%eax
    42d3:	48 63 d0             	movslq %eax,%rdx
    42d6:	48 89 d0             	mov    %rdx,%rax
    42d9:	48 c1 e0 03          	shl    $0x3,%rax
    42dd:	48 29 d0             	sub    %rdx,%rax
    42e0:	48 c1 e0 03          	shl    $0x3,%rax
    42e4:	48 01 c8             	add    %rcx,%rax
    42e7:	48 8b 40 30          	mov    0x30(%rax),%rax
    42eb:	48 89 c6             	mov    %rax,%rsi
    42ee:	48 8d 05 32 34 00 00 	lea    0x3432(%rip),%rax        # 7727 <_IO_stdin_used+0x727>
    42f5:	48 89 c7             	mov    %rax,%rdi
    42f8:	b8 00 00 00 00       	mov    $0x0,%eax
    42fd:	e8 2e de ff ff       	call   2130 <printf@plt>
	for (int i = 0; i < elf_file->e_phnum; i++)
    4302:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
    4306:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    430a:	0f b7 40 52          	movzwl 0x52(%rax),%eax
    430e:	0f b7 c0             	movzwl %ax,%eax
    4311:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    4314:	0f 8c a3 fd ff ff    	jl     40bd <print_elf_file+0x4b8>
	}

	printf("\nSection to Segment mapping:\n");
    431a:	48 8d 05 0c 34 00 00 	lea    0x340c(%rip),%rax        # 772d <_IO_stdin_used+0x72d>
    4321:	48 89 c7             	mov    %rax,%rdi
    4324:	e8 d7 dd ff ff       	call   2100 <puts@plt>
	printf("  Segment Sections...\n");
    4329:	48 8d 05 1a 34 00 00 	lea    0x341a(%rip),%rax        # 774a <_IO_stdin_used+0x74a>
    4330:	48 89 c7             	mov    %rax,%rdi
    4333:	e8 c8 dd ff ff       	call   2100 <puts@plt>
	for (int i = 0; i < elf_file->e_phnum; i++)
    4338:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    433f:	e9 67 01 00 00       	jmp    44ab <print_elf_file+0x8a6>
	{
		printf("   %02d     ", i);
    4344:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4347:	89 c6                	mov    %eax,%esi
    4349:	48 8d 05 10 34 00 00 	lea    0x3410(%rip),%rax        # 7760 <_IO_stdin_used+0x760>
    4350:	48 89 c7             	mov    %rax,%rdi
    4353:	b8 00 00 00 00       	mov    $0x0,%eax
    4358:	e8 d3 dd ff ff       	call   2130 <printf@plt>
		for (int j = 1; j < elf_file->e_shnum; j++)
    435d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
    4364:	e9 20 01 00 00       	jmp    4489 <print_elf_file+0x884>
		{
			if (elf_file->section_tables[j].sh_offset >= elf_file->program_headers[i].p_offset &&
    4369:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    436d:	48 8b 48 60          	mov    0x60(%rax),%rcx
    4371:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4374:	48 63 d0             	movslq %eax,%rdx
    4377:	48 89 d0             	mov    %rdx,%rax
    437a:	48 01 c0             	add    %rax,%rax
    437d:	48 01 d0             	add    %rdx,%rax
    4380:	48 c1 e0 04          	shl    $0x4,%rax
    4384:	48 01 c8             	add    %rcx,%rax
    4387:	48 8b 48 18          	mov    0x18(%rax),%rcx
    438b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    438f:	48 8b 70 68          	mov    0x68(%rax),%rsi
    4393:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4396:	48 63 d0             	movslq %eax,%rdx
    4399:	48 89 d0             	mov    %rdx,%rax
    439c:	48 c1 e0 03          	shl    $0x3,%rax
    43a0:	48 29 d0             	sub    %rdx,%rax
    43a3:	48 c1 e0 03          	shl    $0x3,%rax
    43a7:	48 01 f0             	add    %rsi,%rax
    43aa:	48 8b 40 08          	mov    0x8(%rax),%rax
    43ae:	48 39 c1             	cmp    %rax,%rcx
    43b1:	0f 82 ce 00 00 00    	jb     4485 <print_elf_file+0x880>
				elf_file->section_tables[j].sh_offset + elf_file->section_tables[j].sh_size <=
    43b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    43bb:	48 8b 48 60          	mov    0x60(%rax),%rcx
    43bf:	8b 45 fc             	mov    -0x4(%rbp),%eax
    43c2:	48 63 d0             	movslq %eax,%rdx
    43c5:	48 89 d0             	mov    %rdx,%rax
    43c8:	48 01 c0             	add    %rax,%rax
    43cb:	48 01 d0             	add    %rdx,%rax
    43ce:	48 c1 e0 04          	shl    $0x4,%rax
    43d2:	48 01 c8             	add    %rcx,%rax
    43d5:	48 8b 48 18          	mov    0x18(%rax),%rcx
    43d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    43dd:	48 8b 70 60          	mov    0x60(%rax),%rsi
    43e1:	8b 45 fc             	mov    -0x4(%rbp),%eax
    43e4:	48 63 d0             	movslq %eax,%rdx
    43e7:	48 89 d0             	mov    %rdx,%rax
    43ea:	48 01 c0             	add    %rax,%rax
    43ed:	48 01 d0             	add    %rdx,%rax
    43f0:	48 c1 e0 04          	shl    $0x4,%rax
    43f4:	48 01 f0             	add    %rsi,%rax
    43f7:	48 8b 40 20          	mov    0x20(%rax),%rax
    43fb:	48 01 c1             	add    %rax,%rcx
				elf_file->program_headers[i].p_offset + elf_file->program_headers[i].p_filesz)
    43fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4402:	48 8b 70 68          	mov    0x68(%rax),%rsi
    4406:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4409:	48 63 d0             	movslq %eax,%rdx
    440c:	48 89 d0             	mov    %rdx,%rax
    440f:	48 c1 e0 03          	shl    $0x3,%rax
    4413:	48 29 d0             	sub    %rdx,%rax
    4416:	48 c1 e0 03          	shl    $0x3,%rax
    441a:	48 01 f0             	add    %rsi,%rax
    441d:	48 8b 70 08          	mov    0x8(%rax),%rsi
    4421:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4425:	48 8b 78 68          	mov    0x68(%rax),%rdi
    4429:	8b 45 f8             	mov    -0x8(%rbp),%eax
    442c:	48 63 d0             	movslq %eax,%rdx
    442f:	48 89 d0             	mov    %rdx,%rax
    4432:	48 c1 e0 03          	shl    $0x3,%rax
    4436:	48 29 d0             	sub    %rdx,%rax
    4439:	48 c1 e0 03          	shl    $0x3,%rax
    443d:	48 01 f8             	add    %rdi,%rax
    4440:	48 8b 40 20          	mov    0x20(%rax),%rax
    4444:	48 01 f0             	add    %rsi,%rax
			if (elf_file->section_tables[j].sh_offset >= elf_file->program_headers[i].p_offset &&
    4447:	48 39 c1             	cmp    %rax,%rcx
    444a:	77 39                	ja     4485 <print_elf_file+0x880>
			{
				printf("%s ", elf_file->section_tables[j].sh_name);
    444c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4450:	48 8b 48 60          	mov    0x60(%rax),%rcx
    4454:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4457:	48 63 d0             	movslq %eax,%rdx
    445a:	48 89 d0             	mov    %rdx,%rax
    445d:	48 01 c0             	add    %rax,%rax
    4460:	48 01 d0             	add    %rdx,%rax
    4463:	48 c1 e0 04          	shl    $0x4,%rax
    4467:	48 01 c8             	add    %rcx,%rax
    446a:	48 8b 40 28          	mov    0x28(%rax),%rax
    446e:	48 89 c6             	mov    %rax,%rsi
    4471:	48 8d 05 f5 32 00 00 	lea    0x32f5(%rip),%rax        # 776d <_IO_stdin_used+0x76d>
    4478:	48 89 c7             	mov    %rax,%rdi
    447b:	b8 00 00 00 00       	mov    $0x0,%eax
    4480:	e8 ab dc ff ff       	call   2130 <printf@plt>
		for (int j = 1; j < elf_file->e_shnum; j++)
    4485:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    4489:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    448d:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    4491:	0f b7 c0             	movzwl %ax,%eax
    4494:	39 45 fc             	cmp    %eax,-0x4(%rbp)
    4497:	0f 8c cc fe ff ff    	jl     4369 <print_elf_file+0x764>
			}
		}
		printf("\n");
    449d:	bf 0a 00 00 00       	mov    $0xa,%edi
    44a2:	e8 49 dc ff ff       	call   20f0 <putchar@plt>
	for (int i = 0; i < elf_file->e_phnum; i++)
    44a7:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
    44ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    44af:	0f b7 40 52          	movzwl 0x52(%rax),%eax
    44b3:	0f b7 c0             	movzwl %ax,%eax
    44b6:	39 45 f8             	cmp    %eax,-0x8(%rbp)
    44b9:	0f 8c 85 fe ff ff    	jl     4344 <print_elf_file+0x73f>
	}
}
    44bf:	90                   	nop
    44c0:	90                   	nop
    44c1:	c9                   	leave  
    44c2:	c3                   	ret    

00000000000044c3 <ft_memset>:
/* ************************************************************************** */

#include "utils.h"

void	*ft_memset(void *b, int c, size_t len)
{
    44c3:	f3 0f 1e fa          	endbr64 
    44c7:	55                   	push   %rbp
    44c8:	48 89 e5             	mov    %rsp,%rbp
    44cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    44cf:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    44d2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	size_t	i;

	i = 0;
    44d6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    44dd:	00 
	while (i < len)
    44de:	eb 15                	jmp    44f5 <ft_memset+0x32>
	{
		((char *)b)[i] = (unsigned char)c;
    44e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    44e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44e8:	48 01 d0             	add    %rdx,%rax
    44eb:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    44ee:	88 10                	mov    %dl,(%rax)
		i++;
    44f0:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	while (i < len)
    44f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44f9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    44fd:	72 e1                	jb     44e0 <ft_memset+0x1d>
	}
	return (b);
    44ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
    4503:	5d                   	pop    %rbp
    4504:	c3                   	ret    

0000000000004505 <ft_bzero>:

void	ft_bzero(void *s, size_t n)
{
    4505:	f3 0f 1e fa          	endbr64 
    4509:	55                   	push   %rbp
    450a:	48 89 e5             	mov    %rsp,%rbp
    450d:	48 83 ec 10          	sub    $0x10,%rsp
    4511:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4515:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	ft_memset(s, '\0', n);
    4519:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    451d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4521:	be 00 00 00 00       	mov    $0x0,%esi
    4526:	48 89 c7             	mov    %rax,%rdi
    4529:	e8 95 ff ff ff       	call   44c3 <ft_memset>
}
    452e:	90                   	nop
    452f:	c9                   	leave  
    4530:	c3                   	ret    

0000000000004531 <ft_error>:

#include "utils.h"
#include "pcolors.h"

int	ft_error(const char *str)
{
    4531:	f3 0f 1e fa          	endbr64 
    4535:	55                   	push   %rbp
    4536:	48 89 e5             	mov    %rsp,%rbp
    4539:	48 83 ec 20          	sub    $0x20,%rsp
    453d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int	r;

	r = 0;
    4541:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	r += write(2, B_RED, 8);
    4548:	ba 08 00 00 00       	mov    $0x8,%edx
    454d:	48 8d 05 1d 32 00 00 	lea    0x321d(%rip),%rax        # 7771 <_IO_stdin_used+0x771>
    4554:	48 89 c6             	mov    %rax,%rsi
    4557:	bf 02 00 00 00       	mov    $0x2,%edi
    455c:	e8 af db ff ff       	call   2110 <write@plt>
    4561:	89 c2                	mov    %eax,%edx
    4563:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4566:	01 d0                	add    %edx,%eax
    4568:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, str, ft_strlen(str));
    456b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    456f:	48 89 c7             	mov    %rax,%rdi
    4572:	e8 38 0b 00 00       	call   50af <ft_strlen>
    4577:	48 89 c2             	mov    %rax,%rdx
    457a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    457e:	48 89 c6             	mov    %rax,%rsi
    4581:	bf 02 00 00 00       	mov    $0x2,%edi
    4586:	e8 85 db ff ff       	call   2110 <write@plt>
    458b:	89 c2                	mov    %eax,%edx
    458d:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4590:	01 d0                	add    %edx,%eax
    4592:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, RESET, 4);
    4595:	ba 04 00 00 00       	mov    $0x4,%edx
    459a:	48 8d 05 d8 31 00 00 	lea    0x31d8(%rip),%rax        # 7779 <_IO_stdin_used+0x779>
    45a1:	48 89 c6             	mov    %rax,%rsi
    45a4:	bf 02 00 00 00       	mov    $0x2,%edi
    45a9:	e8 62 db ff ff       	call   2110 <write@plt>
    45ae:	89 c2                	mov    %eax,%edx
    45b0:	8b 45 fc             	mov    -0x4(%rbp),%eax
    45b3:	01 d0                	add    %edx,%eax
    45b5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return (r);
    45b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    45bb:	c9                   	leave  
    45bc:	c3                   	ret    

00000000000045bd <ft_error_msg>:

int	ft_error_msg(const char *str, const char *msg)
{
    45bd:	f3 0f 1e fa          	endbr64 
    45c1:	55                   	push   %rbp
    45c2:	48 89 e5             	mov    %rsp,%rbp
    45c5:	48 83 ec 20          	sub    $0x20,%rsp
    45c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    45cd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int	r;

	r = 0;
    45d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	r += write(2, B_RED, 8);
    45d8:	ba 08 00 00 00       	mov    $0x8,%edx
    45dd:	48 8d 05 8d 31 00 00 	lea    0x318d(%rip),%rax        # 7771 <_IO_stdin_used+0x771>
    45e4:	48 89 c6             	mov    %rax,%rsi
    45e7:	bf 02 00 00 00       	mov    $0x2,%edi
    45ec:	e8 1f db ff ff       	call   2110 <write@plt>
    45f1:	89 c2                	mov    %eax,%edx
    45f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
    45f6:	01 d0                	add    %edx,%eax
    45f8:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, str, ft_strlen(str));
    45fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    45ff:	48 89 c7             	mov    %rax,%rdi
    4602:	e8 a8 0a 00 00       	call   50af <ft_strlen>
    4607:	48 89 c2             	mov    %rax,%rdx
    460a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    460e:	48 89 c6             	mov    %rax,%rsi
    4611:	bf 02 00 00 00       	mov    $0x2,%edi
    4616:	e8 f5 da ff ff       	call   2110 <write@plt>
    461b:	89 c2                	mov    %eax,%edx
    461d:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4620:	01 d0                	add    %edx,%eax
    4622:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, ": ", 2);
    4625:	ba 02 00 00 00       	mov    $0x2,%edx
    462a:	48 8d 05 4d 31 00 00 	lea    0x314d(%rip),%rax        # 777e <_IO_stdin_used+0x77e>
    4631:	48 89 c6             	mov    %rax,%rsi
    4634:	bf 02 00 00 00       	mov    $0x2,%edi
    4639:	e8 d2 da ff ff       	call   2110 <write@plt>
    463e:	89 c2                	mov    %eax,%edx
    4640:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4643:	01 d0                	add    %edx,%eax
    4645:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, msg, ft_strlen(msg));
    4648:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    464c:	48 89 c7             	mov    %rax,%rdi
    464f:	e8 5b 0a 00 00       	call   50af <ft_strlen>
    4654:	48 89 c2             	mov    %rax,%rdx
    4657:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    465b:	48 89 c6             	mov    %rax,%rsi
    465e:	bf 02 00 00 00       	mov    $0x2,%edi
    4663:	e8 a8 da ff ff       	call   2110 <write@plt>
    4668:	89 c2                	mov    %eax,%edx
    466a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    466d:	01 d0                	add    %edx,%eax
    466f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, "\n", 1);
    4672:	ba 01 00 00 00       	mov    $0x1,%edx
    4677:	48 8d 05 03 31 00 00 	lea    0x3103(%rip),%rax        # 7781 <_IO_stdin_used+0x781>
    467e:	48 89 c6             	mov    %rax,%rsi
    4681:	bf 02 00 00 00       	mov    $0x2,%edi
    4686:	e8 85 da ff ff       	call   2110 <write@plt>
    468b:	89 c2                	mov    %eax,%edx
    468d:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4690:	01 d0                	add    %edx,%eax
    4692:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, RESET, 4);
    4695:	ba 04 00 00 00       	mov    $0x4,%edx
    469a:	48 8d 05 d8 30 00 00 	lea    0x30d8(%rip),%rax        # 7779 <_IO_stdin_used+0x779>
    46a1:	48 89 c6             	mov    %rax,%rsi
    46a4:	bf 02 00 00 00       	mov    $0x2,%edi
    46a9:	e8 62 da ff ff       	call   2110 <write@plt>
    46ae:	89 c2                	mov    %eax,%edx
    46b0:	8b 45 fc             	mov    -0x4(%rbp),%eax
    46b3:	01 d0                	add    %edx,%eax
    46b5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return (r);
    46b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    46bb:	c9                   	leave  
    46bc:	c3                   	ret    

00000000000046bd <ft_warning>:

int	ft_warning(const char *str)
{
    46bd:	f3 0f 1e fa          	endbr64 
    46c1:	55                   	push   %rbp
    46c2:	48 89 e5             	mov    %rsp,%rbp
    46c5:	48 83 ec 20          	sub    $0x20,%rsp
    46c9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int	r;

	r = 0;
    46cd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	r += write(2, B_YELLOW, 8);
    46d4:	ba 08 00 00 00       	mov    $0x8,%edx
    46d9:	48 8d 05 a3 30 00 00 	lea    0x30a3(%rip),%rax        # 7783 <_IO_stdin_used+0x783>
    46e0:	48 89 c6             	mov    %rax,%rsi
    46e3:	bf 02 00 00 00       	mov    $0x2,%edi
    46e8:	e8 23 da ff ff       	call   2110 <write@plt>
    46ed:	89 c2                	mov    %eax,%edx
    46ef:	8b 45 fc             	mov    -0x4(%rbp),%eax
    46f2:	01 d0                	add    %edx,%eax
    46f4:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, str, ft_strlen(str));
    46f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    46fb:	48 89 c7             	mov    %rax,%rdi
    46fe:	e8 ac 09 00 00       	call   50af <ft_strlen>
    4703:	48 89 c2             	mov    %rax,%rdx
    4706:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    470a:	48 89 c6             	mov    %rax,%rsi
    470d:	bf 02 00 00 00       	mov    $0x2,%edi
    4712:	e8 f9 d9 ff ff       	call   2110 <write@plt>
    4717:	89 c2                	mov    %eax,%edx
    4719:	8b 45 fc             	mov    -0x4(%rbp),%eax
    471c:	01 d0                	add    %edx,%eax
    471e:	89 45 fc             	mov    %eax,-0x4(%rbp)
	r += write(2, RESET, 4);
    4721:	ba 04 00 00 00       	mov    $0x4,%edx
    4726:	48 8d 05 4c 30 00 00 	lea    0x304c(%rip),%rax        # 7779 <_IO_stdin_used+0x779>
    472d:	48 89 c6             	mov    %rax,%rsi
    4730:	bf 02 00 00 00       	mov    $0x2,%edi
    4735:	e8 d6 d9 ff ff       	call   2110 <write@plt>
    473a:	89 c2                	mov    %eax,%edx
    473c:	8b 45 fc             	mov    -0x4(%rbp),%eax
    473f:	01 d0                	add    %edx,%eax
    4741:	89 45 fc             	mov    %eax,-0x4(%rbp)
	return (r);
    4744:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    4747:	c9                   	leave  
    4748:	c3                   	ret    

0000000000004749 <ft_info>:

int	ft_info(const char *str)
{
    4749:	f3 0f 1e fa          	endbr64 
    474d:	55                   	push   %rbp
    474e:	48 89 e5             	mov    %rsp,%rbp
    4751:	48 83 ec 10          	sub    $0x10,%rsp
    4755:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (printf("%s%s%s", B_YELLOW, str, RESET));
    4759:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    475d:	48 8d 15 15 30 00 00 	lea    0x3015(%rip),%rdx        # 7779 <_IO_stdin_used+0x779>
    4764:	48 89 d1             	mov    %rdx,%rcx
    4767:	48 89 c2             	mov    %rax,%rdx
    476a:	48 8d 05 12 30 00 00 	lea    0x3012(%rip),%rax        # 7783 <_IO_stdin_used+0x783>
    4771:	48 89 c6             	mov    %rax,%rsi
    4774:	48 8d 05 10 30 00 00 	lea    0x3010(%rip),%rax        # 778b <_IO_stdin_used+0x78b>
    477b:	48 89 c7             	mov    %rax,%rdi
    477e:	b8 00 00 00 00       	mov    $0x0,%eax
    4783:	e8 a8 d9 ff ff       	call   2130 <printf@plt>
}
    4788:	c9                   	leave  
    4789:	c3                   	ret    

000000000000478a <ft_char_in_set>:
/* ************************************************************************** */

#include "utils.h"

static int	ft_char_in_set(char c, char const *set)
{
    478a:	f3 0f 1e fa          	endbr64 
    478e:	55                   	push   %rbp
    478f:	48 89 e5             	mov    %rsp,%rbp
    4792:	89 f8                	mov    %edi,%eax
    4794:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4798:	88 45 ec             	mov    %al,-0x14(%rbp)
	size_t	i;

	i = 0;
    479b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    47a2:	00 
	while (set[i])
    47a3:	eb 1f                	jmp    47c4 <ft_char_in_set+0x3a>
	{
		if (set[i] == c)
    47a5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    47a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    47ad:	48 01 d0             	add    %rdx,%rax
    47b0:	0f b6 00             	movzbl (%rax),%eax
    47b3:	38 45 ec             	cmp    %al,-0x14(%rbp)
    47b6:	75 07                	jne    47bf <ft_char_in_set+0x35>
			return (1);
    47b8:	b8 01 00 00 00       	mov    $0x1,%eax
    47bd:	eb 1c                	jmp    47db <ft_char_in_set+0x51>
		i++;
    47bf:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	while (set[i])
    47c4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    47c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    47cc:	48 01 d0             	add    %rdx,%rax
    47cf:	0f b6 00             	movzbl (%rax),%eax
    47d2:	84 c0                	test   %al,%al
    47d4:	75 cf                	jne    47a5 <ft_char_in_set+0x1b>
	}
	return (0);
    47d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
    47db:	5d                   	pop    %rbp
    47dc:	c3                   	ret    

00000000000047dd <ft_strtrim>:

char	*ft_strtrim(char const *s1, char const *set)
{
    47dd:	f3 0f 1e fa          	endbr64 
    47e1:	55                   	push   %rbp
    47e2:	48 89 e5             	mov    %rsp,%rbp
    47e5:	48 83 ec 30          	sub    $0x30,%rsp
    47e9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    47ed:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	char	*str;
	size_t	i;
	size_t	start;
	size_t	end;

	start = 0;
    47f1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    47f8:	00 
	while (s1[start] && ft_char_in_set(s1[start], set))
    47f9:	eb 05                	jmp    4800 <ft_strtrim+0x23>
		start++;
    47fb:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	while (s1[start] && ft_char_in_set(s1[start], set))
    4800:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    4804:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4808:	48 01 d0             	add    %rdx,%rax
    480b:	0f b6 00             	movzbl (%rax),%eax
    480e:	84 c0                	test   %al,%al
    4810:	74 23                	je     4835 <ft_strtrim+0x58>
    4812:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    4816:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    481a:	48 01 d0             	add    %rdx,%rax
    481d:	0f b6 00             	movzbl (%rax),%eax
    4820:	0f be c0             	movsbl %al,%eax
    4823:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4827:	48 89 d6             	mov    %rdx,%rsi
    482a:	89 c7                	mov    %eax,%edi
    482c:	e8 59 ff ff ff       	call   478a <ft_char_in_set>
    4831:	85 c0                	test   %eax,%eax
    4833:	75 c6                	jne    47fb <ft_strtrim+0x1e>
	end = ft_strlen(s1);
    4835:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4839:	48 89 c7             	mov    %rax,%rdi
    483c:	e8 6e 08 00 00       	call   50af <ft_strlen>
    4841:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (end > start && ft_char_in_set(s1[end - 1], set))
    4845:	eb 05                	jmp    484c <ft_strtrim+0x6f>
		end--;
    4847:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
	while (end > start && ft_char_in_set(s1[end - 1], set))
    484c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4850:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
    4854:	76 27                	jbe    487d <ft_strtrim+0xa0>
    4856:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    485a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    485e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4862:	48 01 d0             	add    %rdx,%rax
    4865:	0f b6 00             	movzbl (%rax),%eax
    4868:	0f be c0             	movsbl %al,%eax
    486b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    486f:	48 89 d6             	mov    %rdx,%rsi
    4872:	89 c7                	mov    %eax,%edi
    4874:	e8 11 ff ff ff       	call   478a <ft_char_in_set>
    4879:	85 c0                	test   %eax,%eax
    487b:	75 ca                	jne    4847 <ft_strtrim+0x6a>
	str = (char *)malloc(sizeof(*s1) * (end - start + 1));
    487d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4881:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    4885:	48 83 c0 01          	add    $0x1,%rax
    4889:	48 89 c7             	mov    %rax,%rdi
    488c:	e8 cf d8 ff ff       	call   2160 <malloc@plt>
    4891:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!str)
    4895:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    489a:	75 07                	jne    48a3 <ft_strtrim+0xc6>
		return (NULL);
    489c:	b8 00 00 00 00       	mov    $0x0,%eax
    48a1:	eb 52                	jmp    48f5 <ft_strtrim+0x118>
	i = 0;
    48a3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    48aa:	00 
	while (start < end)
    48ab:	eb 2c                	jmp    48d9 <ft_strtrim+0xfc>
		str[i++] = s1[start++];
    48ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    48b1:	48 8d 50 01          	lea    0x1(%rax),%rdx
    48b5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    48b9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    48bd:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
    48c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    48c5:	48 8d 50 01          	lea    0x1(%rax),%rdx
    48c9:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    48cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    48d1:	48 01 c2             	add    %rax,%rdx
    48d4:	0f b6 01             	movzbl (%rcx),%eax
    48d7:	88 02                	mov    %al,(%rdx)
	while (start < end)
    48d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    48dd:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    48e1:	72 ca                	jb     48ad <ft_strtrim+0xd0>
	str[i] = 0;
    48e3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    48e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    48eb:	48 01 d0             	add    %rdx,%rax
    48ee:	c6 00 00             	movb   $0x0,(%rax)
	return (str);
    48f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    48f5:	c9                   	leave  
    48f6:	c3                   	ret    

00000000000048f7 <ft_ljoin>:

#include "utils.h"

void	*ft_ljoin(void *s1, void *s2,
	unsigned int size, unsigned int length)
{
    48f7:	f3 0f 1e fa          	endbr64 
    48fb:	55                   	push   %rbp
    48fc:	48 89 e5             	mov    %rsp,%rbp
    48ff:	48 83 ec 30          	sub    $0x30,%rsp
    4903:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4907:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    490b:	89 55 dc             	mov    %edx,-0x24(%rbp)
    490e:	89 4d d8             	mov    %ecx,-0x28(%rbp)
	void	*str;

	if (!s1)
    4911:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    4916:	75 0e                	jne    4926 <ft_ljoin+0x2f>
		s1 = (void *)malloc(sizeof(void *));
    4918:	bf 08 00 00 00       	mov    $0x8,%edi
    491d:	e8 3e d8 ff ff       	call   2160 <malloc@plt>
    4922:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (!s1)
    4926:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    492b:	75 0a                	jne    4937 <ft_ljoin+0x40>
		return (NULL);
    492d:	b8 00 00 00 00       	mov    $0x0,%eax
    4932:	e9 8c 00 00 00       	jmp    49c3 <ft_ljoin+0xcc>
	if (!s2)
    4937:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    493c:	75 13                	jne    4951 <ft_ljoin+0x5a>
		return (free(s1), NULL);
    493e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4942:	48 89 c7             	mov    %rax,%rdi
    4945:	e8 96 d7 ff ff       	call   20e0 <free@plt>
    494a:	b8 00 00 00 00       	mov    $0x0,%eax
    494f:	eb 72                	jmp    49c3 <ft_ljoin+0xcc>
	str = malloc(sizeof(void) * (size + length));
    4951:	8b 55 dc             	mov    -0x24(%rbp),%edx
    4954:	8b 45 d8             	mov    -0x28(%rbp),%eax
    4957:	01 d0                	add    %edx,%eax
    4959:	89 c0                	mov    %eax,%eax
    495b:	48 89 c7             	mov    %rax,%rdi
    495e:	e8 fd d7 ff ff       	call   2160 <malloc@plt>
    4963:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!str)
    4967:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    496c:	75 13                	jne    4981 <ft_ljoin+0x8a>
		return (free(s1), NULL);
    496e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4972:	48 89 c7             	mov    %rax,%rdi
    4975:	e8 66 d7 ff ff       	call   20e0 <free@plt>
    497a:	b8 00 00 00 00       	mov    $0x0,%eax
    497f:	eb 42                	jmp    49c3 <ft_ljoin+0xcc>
	ft_memcpy(str, s1, size);
    4981:	8b 55 dc             	mov    -0x24(%rbp),%edx
    4984:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    498c:	48 89 ce             	mov    %rcx,%rsi
    498f:	48 89 c7             	mov    %rax,%rdi
    4992:	e8 5f 01 00 00       	call   4af6 <ft_memcpy>
	ft_memcpy(str + size, s2, length);
    4997:	8b 55 d8             	mov    -0x28(%rbp),%edx
    499a:	8b 4d dc             	mov    -0x24(%rbp),%ecx
    499d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49a1:	48 01 c1             	add    %rax,%rcx
    49a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    49a8:	48 89 c6             	mov    %rax,%rsi
    49ab:	48 89 cf             	mov    %rcx,%rdi
    49ae:	e8 43 01 00 00       	call   4af6 <ft_memcpy>
	free(s1);
    49b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    49b7:	48 89 c7             	mov    %rax,%rdi
    49ba:	e8 21 d7 ff ff       	call   20e0 <free@plt>
	return (str);
    49bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    49c3:	c9                   	leave  
    49c4:	c3                   	ret    

00000000000049c5 <ft_strchr>:
/* ************************************************************************** */

#include "utils.h"

char	*ft_strchr(char *s, int c)
{
    49c5:	f3 0f 1e fa          	endbr64 
    49c9:	55                   	push   %rbp
    49ca:	48 89 e5             	mov    %rsp,%rbp
    49cd:	48 83 ec 20          	sub    $0x20,%rsp
    49d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    49d5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	int		i;

	i = 0;
    49d8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	if (!s)
    49df:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    49e4:	75 07                	jne    49ed <ft_strchr+0x28>
		return (NULL);
    49e6:	b8 00 00 00 00       	mov    $0x0,%eax
    49eb:	eb 5e                	jmp    4a4b <ft_strchr+0x86>
	if (c == '\0')
    49ed:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
    49f1:	75 3f                	jne    4a32 <ft_strchr+0x6d>
		return ((char *)&s[ft_strlen(s)]);
    49f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    49f7:	48 89 c7             	mov    %rax,%rdi
    49fa:	e8 b0 06 00 00       	call   50af <ft_strlen>
    49ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    4a03:	48 01 d0             	add    %rdx,%rax
    4a06:	eb 43                	jmp    4a4b <ft_strchr+0x86>
	while (s[i] != '\0')
	{
		if (s[i] == (char) c)
    4a08:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4a0b:	48 63 d0             	movslq %eax,%rdx
    4a0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4a12:	48 01 d0             	add    %rdx,%rax
    4a15:	0f b6 00             	movzbl (%rax),%eax
    4a18:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    4a1b:	38 d0                	cmp    %dl,%al
    4a1d:	75 0f                	jne    4a2e <ft_strchr+0x69>
			return ((char *)&s[i]);
    4a1f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4a22:	48 63 d0             	movslq %eax,%rdx
    4a25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4a29:	48 01 d0             	add    %rdx,%rax
    4a2c:	eb 1d                	jmp    4a4b <ft_strchr+0x86>
		i++;
    4a2e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	while (s[i] != '\0')
    4a32:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4a35:	48 63 d0             	movslq %eax,%rdx
    4a38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4a3c:	48 01 d0             	add    %rdx,%rax
    4a3f:	0f b6 00             	movzbl (%rax),%eax
    4a42:	84 c0                	test   %al,%al
    4a44:	75 c2                	jne    4a08 <ft_strchr+0x43>
	}
	return (NULL);
    4a46:	b8 00 00 00 00       	mov    $0x0,%eax
}
    4a4b:	c9                   	leave  
    4a4c:	c3                   	ret    

0000000000004a4d <ft_strmultichr>:

int	ft_strmultichr(char *str, char *chrlst)
{
    4a4d:	f3 0f 1e fa          	endbr64 
    4a51:	55                   	push   %rbp
    4a52:	48 89 e5             	mov    %rsp,%rbp
    4a55:	48 83 ec 20          	sub    $0x20,%rsp
    4a59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4a5d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int		i;
	char	*ptr;

	i = 0;
    4a61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	ptr = NULL;
    4a68:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    4a6f:	00 
	if (!str)
    4a70:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    4a75:	75 07                	jne    4a7e <ft_strmultichr+0x31>
		return (1);
    4a77:	b8 01 00 00 00       	mov    $0x1,%eax
    4a7c:	eb 76                	jmp    4af4 <ft_strmultichr+0xa7>
	if ((str == NULL && chrlst == NULL) || ft_strlen(str) == 0)
    4a7e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    4a83:	75 07                	jne    4a8c <ft_strmultichr+0x3f>
    4a85:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    4a8a:	74 11                	je     4a9d <ft_strmultichr+0x50>
    4a8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4a90:	48 89 c7             	mov    %rax,%rdi
    4a93:	e8 17 06 00 00       	call   50af <ft_strlen>
    4a98:	48 85 c0             	test   %rax,%rax
    4a9b:	75 3e                	jne    4adb <ft_strmultichr+0x8e>
		return (0);
    4a9d:	b8 00 00 00 00       	mov    $0x0,%eax
    4aa2:	eb 50                	jmp    4af4 <ft_strmultichr+0xa7>
	while (str[i])
	{
		ptr = ft_strchr(chrlst, str[i]);
    4aa4:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4aa7:	48 63 d0             	movslq %eax,%rdx
    4aaa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4aae:	48 01 d0             	add    %rdx,%rax
    4ab1:	0f b6 00             	movzbl (%rax),%eax
    4ab4:	0f be d0             	movsbl %al,%edx
    4ab7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4abb:	89 d6                	mov    %edx,%esi
    4abd:	48 89 c7             	mov    %rax,%rdi
    4ac0:	e8 00 ff ff ff       	call   49c5 <ft_strchr>
    4ac5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (!ptr)
    4ac9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    4ace:	75 07                	jne    4ad7 <ft_strmultichr+0x8a>
			return (0);
    4ad0:	b8 00 00 00 00       	mov    $0x0,%eax
    4ad5:	eb 1d                	jmp    4af4 <ft_strmultichr+0xa7>
		i++;
    4ad7:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
	while (str[i])
    4adb:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4ade:	48 63 d0             	movslq %eax,%rdx
    4ae1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4ae5:	48 01 d0             	add    %rdx,%rax
    4ae8:	0f b6 00             	movzbl (%rax),%eax
    4aeb:	84 c0                	test   %al,%al
    4aed:	75 b5                	jne    4aa4 <ft_strmultichr+0x57>
	}
	return (1);
    4aef:	b8 01 00 00 00       	mov    $0x1,%eax
}
    4af4:	c9                   	leave  
    4af5:	c3                   	ret    

0000000000004af6 <ft_memcpy>:
/* ************************************************************************** */

#include "utils.h"

void	*ft_memcpy(void *dst, const void *src, size_t n)
{
    4af6:	f3 0f 1e fa          	endbr64 
    4afa:	55                   	push   %rbp
    4afb:	48 89 e5             	mov    %rsp,%rbp
    4afe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4b02:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4b06:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	size_t	i;
	void	*lst_dst;

	if (n == 0 || dst == src)
    4b0a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    4b0f:	74 0a                	je     4b1b <ft_memcpy+0x25>
    4b11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4b15:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
    4b19:	75 06                	jne    4b21 <ft_memcpy+0x2b>
		return (dst);
    4b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4b1f:	eb 40                	jmp    4b61 <ft_memcpy+0x6b>
	i = 0;
    4b21:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    4b28:	00 
	lst_dst = dst;
    4b29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4b2d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	while (i < n)
    4b31:	eb 20                	jmp    4b53 <ft_memcpy+0x5d>
	{
		((char *)dst)[i] = ((char *)src)[i];
    4b33:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4b37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b3b:	48 01 d0             	add    %rdx,%rax
    4b3e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4b42:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4b46:	48 01 ca             	add    %rcx,%rdx
    4b49:	0f b6 00             	movzbl (%rax),%eax
    4b4c:	88 02                	mov    %al,(%rdx)
		i++;
    4b4e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	while (i < n)
    4b53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b57:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
    4b5b:	72 d6                	jb     4b33 <ft_memcpy+0x3d>
	}
	return (lst_dst);
    4b5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    4b61:	5d                   	pop    %rbp
    4b62:	c3                   	ret    

0000000000004b63 <ft_strdup>:
/* ************************************************************************** */

#include "utils.h"

char	*ft_strdup(const char *src)
{
    4b63:	f3 0f 1e fa          	endbr64 
    4b67:	55                   	push   %rbp
    4b68:	48 89 e5             	mov    %rsp,%rbp
    4b6b:	48 83 ec 20          	sub    $0x20,%rsp
    4b6f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	char	*str;
	int		i;

	if (!src)
    4b73:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    4b78:	75 07                	jne    4b81 <ft_strdup+0x1e>
		return (NULL);
    4b7a:	b8 00 00 00 00       	mov    $0x0,%eax
    4b7f:	eb 6d                	jmp    4bee <ft_strdup+0x8b>
	i = ft_strlen(src);
    4b81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4b85:	48 89 c7             	mov    %rax,%rdi
    4b88:	e8 22 05 00 00       	call   50af <ft_strlen>
    4b8d:	89 45 f4             	mov    %eax,-0xc(%rbp)
	str = malloc((i + 1) * sizeof(char));
    4b90:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4b93:	83 c0 01             	add    $0x1,%eax
    4b96:	48 98                	cltq   
    4b98:	48 89 c7             	mov    %rax,%rdi
    4b9b:	e8 c0 d5 ff ff       	call   2160 <malloc@plt>
    4ba0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!str)
    4ba4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    4ba9:	75 07                	jne    4bb2 <ft_strdup+0x4f>
		return (NULL);
    4bab:	b8 00 00 00 00       	mov    $0x0,%eax
    4bb0:	eb 3c                	jmp    4bee <ft_strdup+0x8b>
	ft_memcpy(str, src, i);
    4bb2:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4bb5:	48 63 d0             	movslq %eax,%rdx
    4bb8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4bc0:	48 89 ce             	mov    %rcx,%rsi
    4bc3:	48 89 c7             	mov    %rax,%rdi
    4bc6:	e8 2b ff ff ff       	call   4af6 <ft_memcpy>
	ft_memset(str + i, '\0', sizeof(char));
    4bcb:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4bce:	48 63 d0             	movslq %eax,%rdx
    4bd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4bd5:	48 01 d0             	add    %rdx,%rax
    4bd8:	ba 01 00 00 00       	mov    $0x1,%edx
    4bdd:	be 00 00 00 00       	mov    $0x0,%esi
    4be2:	48 89 c7             	mov    %rax,%rdi
    4be5:	e8 d9 f8 ff ff       	call   44c3 <ft_memset>
	return (str);
    4bea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    4bee:	c9                   	leave  
    4bef:	c3                   	ret    

0000000000004bf0 <count_strings>:
/* ************************************************************************** */

#include "utils.h"

static int	count_strings(const char *str, char *charset)
{
    4bf0:	f3 0f 1e fa          	endbr64 
    4bf4:	55                   	push   %rbp
    4bf5:	48 89 e5             	mov    %rsp,%rbp
    4bf8:	48 83 ec 20          	sub    $0x20,%rsp
    4bfc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4c00:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int	i;
	int	count;

	count = 0;
    4c04:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	i = 0;
    4c0b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	while (str[i] != '\0')
    4c12:	e9 94 00 00 00       	jmp    4cab <count_strings+0xbb>
	{
		while (str[i] != '\0' && check_separator(str[i], charset))
			i++;
    4c17:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
		while (str[i] != '\0' && check_separator(str[i], charset))
    4c1b:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4c1e:	48 63 d0             	movslq %eax,%rdx
    4c21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c25:	48 01 d0             	add    %rdx,%rax
    4c28:	0f b6 00             	movzbl (%rax),%eax
    4c2b:	84 c0                	test   %al,%al
    4c2d:	74 25                	je     4c54 <count_strings+0x64>
    4c2f:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4c32:	48 63 d0             	movslq %eax,%rdx
    4c35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c39:	48 01 d0             	add    %rdx,%rax
    4c3c:	0f b6 00             	movzbl (%rax),%eax
    4c3f:	0f be c0             	movsbl %al,%eax
    4c42:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4c46:	48 89 d6             	mov    %rdx,%rsi
    4c49:	89 c7                	mov    %eax,%edi
    4c4b:	e8 04 08 00 00       	call   5454 <check_separator>
    4c50:	85 c0                	test   %eax,%eax
    4c52:	75 c3                	jne    4c17 <count_strings+0x27>
		if (str[i] != '\0')
    4c54:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4c57:	48 63 d0             	movslq %eax,%rdx
    4c5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c5e:	48 01 d0             	add    %rdx,%rax
    4c61:	0f b6 00             	movzbl (%rax),%eax
    4c64:	84 c0                	test   %al,%al
    4c66:	74 0a                	je     4c72 <count_strings+0x82>
			count++;
    4c68:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		while (str[i] != '\0' && !check_separator(str[i], charset))
    4c6c:	eb 04                	jmp    4c72 <count_strings+0x82>
			i++;
    4c6e:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
		while (str[i] != '\0' && !check_separator(str[i], charset))
    4c72:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4c75:	48 63 d0             	movslq %eax,%rdx
    4c78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c7c:	48 01 d0             	add    %rdx,%rax
    4c7f:	0f b6 00             	movzbl (%rax),%eax
    4c82:	84 c0                	test   %al,%al
    4c84:	74 25                	je     4cab <count_strings+0xbb>
    4c86:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4c89:	48 63 d0             	movslq %eax,%rdx
    4c8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c90:	48 01 d0             	add    %rdx,%rax
    4c93:	0f b6 00             	movzbl (%rax),%eax
    4c96:	0f be c0             	movsbl %al,%eax
    4c99:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4c9d:	48 89 d6             	mov    %rdx,%rsi
    4ca0:	89 c7                	mov    %eax,%edi
    4ca2:	e8 ad 07 00 00       	call   5454 <check_separator>
    4ca7:	85 c0                	test   %eax,%eax
    4ca9:	74 c3                	je     4c6e <count_strings+0x7e>
	while (str[i] != '\0')
    4cab:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4cae:	48 63 d0             	movslq %eax,%rdx
    4cb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4cb5:	48 01 d0             	add    %rdx,%rax
    4cb8:	0f b6 00             	movzbl (%rax),%eax
    4cbb:	84 c0                	test   %al,%al
    4cbd:	0f 85 58 ff ff ff    	jne    4c1b <count_strings+0x2b>
	}
	return (count);
    4cc3:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    4cc6:	c9                   	leave  
    4cc7:	c3                   	ret    

0000000000004cc8 <ft_strlen_sep>:

static int	ft_strlen_sep(const char *str, char *charset)
{
    4cc8:	f3 0f 1e fa          	endbr64 
    4ccc:	55                   	push   %rbp
    4ccd:	48 89 e5             	mov    %rsp,%rbp
    4cd0:	48 83 ec 20          	sub    $0x20,%rsp
    4cd4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4cd8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int	i;

	i = 0;
    4cdc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	while (str[i] && !check_separator(str[i], charset))
    4ce3:	eb 04                	jmp    4ce9 <ft_strlen_sep+0x21>
		i++;
    4ce5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	while (str[i] && !check_separator(str[i], charset))
    4ce9:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4cec:	48 63 d0             	movslq %eax,%rdx
    4cef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4cf3:	48 01 d0             	add    %rdx,%rax
    4cf6:	0f b6 00             	movzbl (%rax),%eax
    4cf9:	84 c0                	test   %al,%al
    4cfb:	74 25                	je     4d22 <ft_strlen_sep+0x5a>
    4cfd:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4d00:	48 63 d0             	movslq %eax,%rdx
    4d03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d07:	48 01 d0             	add    %rdx,%rax
    4d0a:	0f b6 00             	movzbl (%rax),%eax
    4d0d:	0f be c0             	movsbl %al,%eax
    4d10:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4d14:	48 89 d6             	mov    %rdx,%rsi
    4d17:	89 c7                	mov    %eax,%edi
    4d19:	e8 36 07 00 00       	call   5454 <check_separator>
    4d1e:	85 c0                	test   %eax,%eax
    4d20:	74 c3                	je     4ce5 <ft_strlen_sep+0x1d>
	return (i);
    4d22:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    4d25:	c9                   	leave  
    4d26:	c3                   	ret    

0000000000004d27 <ft_word>:

static char	*ft_word(const char *str, char *charset)
{
    4d27:	f3 0f 1e fa          	endbr64 
    4d2b:	55                   	push   %rbp
    4d2c:	48 89 e5             	mov    %rsp,%rbp
    4d2f:	48 83 ec 20          	sub    $0x20,%rsp
    4d33:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4d37:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int		len_word;
	int		i;
	char	*word;

	i = 0;
    4d3b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	len_word = ft_strlen_sep(str, charset);
    4d42:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4d46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d4a:	48 89 d6             	mov    %rdx,%rsi
    4d4d:	48 89 c7             	mov    %rax,%rdi
    4d50:	e8 73 ff ff ff       	call   4cc8 <ft_strlen_sep>
    4d55:	89 45 f4             	mov    %eax,-0xc(%rbp)
	word = (char *)malloc(sizeof(char) * (len_word + 1));
    4d58:	8b 45 f4             	mov    -0xc(%rbp),%eax
    4d5b:	83 c0 01             	add    $0x1,%eax
    4d5e:	48 98                	cltq   
    4d60:	48 89 c7             	mov    %rax,%rdi
    4d63:	e8 f8 d3 ff ff       	call   2160 <malloc@plt>
    4d68:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!word)
    4d6c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    4d71:	75 2a                	jne    4d9d <ft_word+0x76>
		return (0);
    4d73:	b8 00 00 00 00       	mov    $0x0,%eax
    4d78:	eb 3f                	jmp    4db9 <ft_word+0x92>
	while (i < len_word)
	{
		word[i] = str[i];
    4d7a:	8b 45 f0             	mov    -0x10(%rbp),%eax
    4d7d:	48 63 d0             	movslq %eax,%rdx
    4d80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d84:	48 01 d0             	add    %rdx,%rax
    4d87:	8b 55 f0             	mov    -0x10(%rbp),%edx
    4d8a:	48 63 ca             	movslq %edx,%rcx
    4d8d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4d91:	48 01 ca             	add    %rcx,%rdx
    4d94:	0f b6 00             	movzbl (%rax),%eax
    4d97:	88 02                	mov    %al,(%rdx)
		i++;
    4d99:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
	while (i < len_word)
    4d9d:	8b 45 f0             	mov    -0x10(%rbp),%eax
    4da0:	3b 45 f4             	cmp    -0xc(%rbp),%eax
    4da3:	7c d5                	jl     4d7a <ft_word+0x53>
	}
	word[i] = '\0';
    4da5:	8b 45 f0             	mov    -0x10(%rbp),%eax
    4da8:	48 63 d0             	movslq %eax,%rdx
    4dab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4daf:	48 01 d0             	add    %rdx,%rax
    4db2:	c6 00 00             	movb   $0x0,(%rax)
	return (word);
    4db5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    4db9:	c9                   	leave  
    4dba:	c3                   	ret    

0000000000004dbb <ft_split>:

char	**ft_split(const char *str, char *charset)
{
    4dbb:	f3 0f 1e fa          	endbr64 
    4dbf:	55                   	push   %rbp
    4dc0:	48 89 e5             	mov    %rsp,%rbp
    4dc3:	53                   	push   %rbx
    4dc4:	48 83 ec 28          	sub    $0x28,%rsp
    4dc8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    4dcc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	char	**strings;
	int		i;

	if (str == NULL)
    4dd0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
    4dd5:	75 0a                	jne    4de1 <ft_split+0x26>
		return (NULL);
    4dd7:	b8 00 00 00 00       	mov    $0x0,%eax
    4ddc:	e9 30 01 00 00       	jmp    4f11 <ft_split+0x156>
	i = 0;
    4de1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
	strings = (char **)malloc(sizeof(char *)
			* (count_strings(str, charset) + 1));
    4de8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4dec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4df0:	48 89 d6             	mov    %rdx,%rsi
    4df3:	48 89 c7             	mov    %rax,%rdi
    4df6:	e8 f5 fd ff ff       	call   4bf0 <count_strings>
    4dfb:	83 c0 01             	add    $0x1,%eax
    4dfe:	48 98                	cltq   
	strings = (char **)malloc(sizeof(char *)
    4e00:	48 c1 e0 03          	shl    $0x3,%rax
    4e04:	48 89 c7             	mov    %rax,%rdi
    4e07:	e8 54 d3 ff ff       	call   2160 <malloc@plt>
    4e0c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (!strings)
    4e10:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    4e15:	0f 85 c8 00 00 00    	jne    4ee3 <ft_split+0x128>
		return (0);
    4e1b:	b8 00 00 00 00       	mov    $0x0,%eax
    4e20:	e9 ec 00 00 00       	jmp    4f11 <ft_split+0x156>
	while (*str != '\0')
	{
		while (*str != '\0' && check_separator(*str, charset))
			str++;
    4e25:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
		while (*str != '\0' && check_separator(*str, charset))
    4e2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e2e:	0f b6 00             	movzbl (%rax),%eax
    4e31:	84 c0                	test   %al,%al
    4e33:	74 1c                	je     4e51 <ft_split+0x96>
    4e35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e39:	0f b6 00             	movzbl (%rax),%eax
    4e3c:	0f be c0             	movsbl %al,%eax
    4e3f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4e43:	48 89 d6             	mov    %rdx,%rsi
    4e46:	89 c7                	mov    %eax,%edi
    4e48:	e8 07 06 00 00       	call   5454 <check_separator>
    4e4d:	85 c0                	test   %eax,%eax
    4e4f:	75 d4                	jne    4e25 <ft_split+0x6a>
		if (*str != '\0')
    4e51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e55:	0f b6 00             	movzbl (%rax),%eax
    4e58:	84 c0                	test   %al,%al
    4e5a:	74 60                	je     4ebc <ft_split+0x101>
		{
			strings[i] = ft_word(str, charset);
    4e5c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    4e5f:	48 98                	cltq   
    4e61:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    4e68:	00 
    4e69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4e6d:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
    4e71:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4e75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e79:	48 89 d6             	mov    %rdx,%rsi
    4e7c:	48 89 c7             	mov    %rax,%rdi
    4e7f:	e8 a3 fe ff ff       	call   4d27 <ft_word>
    4e84:	48 89 03             	mov    %rax,(%rbx)
			if (strings[i++] == 0)
    4e87:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    4e8a:	8d 50 01             	lea    0x1(%rax),%edx
    4e8d:	89 55 e4             	mov    %edx,-0x1c(%rbp)
    4e90:	48 98                	cltq   
    4e92:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    4e99:	00 
    4e9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4e9e:	48 01 d0             	add    %rdx,%rax
    4ea1:	48 8b 00             	mov    (%rax),%rax
    4ea4:	48 85 c0             	test   %rax,%rax
    4ea7:	75 13                	jne    4ebc <ft_split+0x101>
				return (free_tab(strings));
    4ea9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4ead:	48 89 c7             	mov    %rax,%rdi
    4eb0:	e8 32 05 00 00       	call   53e7 <free_tab>
    4eb5:	eb 5a                	jmp    4f11 <ft_split+0x156>
		}
		while (*str && !check_separator(*str, charset))
			str++;
    4eb7:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
		while (*str && !check_separator(*str, charset))
    4ebc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4ec0:	0f b6 00             	movzbl (%rax),%eax
    4ec3:	84 c0                	test   %al,%al
    4ec5:	74 1c                	je     4ee3 <ft_split+0x128>
    4ec7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4ecb:	0f b6 00             	movzbl (%rax),%eax
    4ece:	0f be c0             	movsbl %al,%eax
    4ed1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4ed5:	48 89 d6             	mov    %rdx,%rsi
    4ed8:	89 c7                	mov    %eax,%edi
    4eda:	e8 75 05 00 00       	call   5454 <check_separator>
    4edf:	85 c0                	test   %eax,%eax
    4ee1:	74 d4                	je     4eb7 <ft_split+0xfc>
	while (*str != '\0')
    4ee3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4ee7:	0f b6 00             	movzbl (%rax),%eax
    4eea:	84 c0                	test   %al,%al
    4eec:	0f 85 38 ff ff ff    	jne    4e2a <ft_split+0x6f>
	}
	strings[i] = 0;
    4ef2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    4ef5:	48 98                	cltq   
    4ef7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    4efe:	00 
    4eff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4f03:	48 01 d0             	add    %rdx,%rax
    4f06:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	return (strings);
    4f0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
    4f11:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    4f15:	c9                   	leave  
    4f16:	c3                   	ret    

0000000000004f17 <ft_calloc>:
/* ************************************************************************** */

#include "utils.h"

void	*ft_calloc(size_t count, size_t size)
{
    4f17:	f3 0f 1e fa          	endbr64 
    4f1b:	55                   	push   %rbp
    4f1c:	48 89 e5             	mov    %rsp,%rbp
    4f1f:	48 83 ec 20          	sub    $0x20,%rsp
    4f23:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4f27:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	void	*ptr;

	if (count == 0 || size == 0)
    4f2b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    4f30:	74 07                	je     4f39 <ft_calloc+0x22>
    4f32:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    4f37:	75 10                	jne    4f49 <ft_calloc+0x32>
	{
		count = 1;
    4f39:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
    4f40:	00 
		size = 1;
    4f41:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
    4f48:	00 
	}
	if (SIZE_MAX / count < size)
    4f49:	b9 00 00 00 00       	mov    $0x0,%ecx
    4f4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4f52:	48 f7 65 e8          	mulq   -0x18(%rbp)
    4f56:	71 05                	jno    4f5d <ft_calloc+0x46>
    4f58:	b9 01 00 00 00       	mov    $0x1,%ecx
    4f5d:	48 89 c8             	mov    %rcx,%rax
    4f60:	48 85 c0             	test   %rax,%rax
    4f63:	74 07                	je     4f6c <ft_calloc+0x55>
		return (NULL);
    4f65:	b8 00 00 00 00       	mov    $0x0,%eax
    4f6a:	eb 3b                	jmp    4fa7 <ft_calloc+0x90>
	ptr = malloc(count * size);
    4f6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4f70:	48 0f af 45 e0       	imul   -0x20(%rbp),%rax
    4f75:	48 89 c7             	mov    %rax,%rdi
    4f78:	e8 e3 d1 ff ff       	call   2160 <malloc@plt>
    4f7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (ptr)
    4f81:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    4f86:	74 1b                	je     4fa3 <ft_calloc+0x8c>
		ft_bzero(ptr, count * size);
    4f88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4f8c:	48 0f af 45 e0       	imul   -0x20(%rbp),%rax
    4f91:	48 89 c2             	mov    %rax,%rdx
    4f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4f98:	48 89 d6             	mov    %rdx,%rsi
    4f9b:	48 89 c7             	mov    %rax,%rdi
    4f9e:	e8 62 f5 ff ff       	call   4505 <ft_bzero>
	return (ptr);
    4fa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    4fa7:	c9                   	leave  
    4fa8:	c3                   	ret    

0000000000004fa9 <ft_strlcpy>:
/* ************************************************************************** */

#include "utils.h"

int	ft_strlcpy(char *dest, char *src, uint32_t size)
{
    4fa9:	f3 0f 1e fa          	endbr64 
    4fad:	55                   	push   %rbp
    4fae:	48 89 e5             	mov    %rsp,%rbp
    4fb1:	48 83 ec 30          	sub    $0x30,%rsp
    4fb5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4fb9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4fbd:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint32_t	i;
	uint32_t	x;

	x = ft_strlen(src);
    4fc0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4fc4:	48 89 c7             	mov    %rax,%rdi
    4fc7:	e8 e3 00 00 00       	call   50af <ft_strlen>
    4fcc:	89 45 fc             	mov    %eax,-0x4(%rbp)
	i = 0;
    4fcf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	if (size != 0)
    4fd6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    4fda:	74 38                	je     5014 <ft_strlcpy+0x6b>
	{
		while (i < size && src[i] != '\0')
    4fdc:	eb 1d                	jmp    4ffb <ft_strlcpy+0x52>
		{
			dest[i] = src[i];
    4fde:	8b 55 f8             	mov    -0x8(%rbp),%edx
    4fe1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4fe5:	48 01 d0             	add    %rdx,%rax
    4fe8:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    4feb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    4fef:	48 01 ca             	add    %rcx,%rdx
    4ff2:	0f b6 00             	movzbl (%rax),%eax
    4ff5:	88 02                	mov    %al,(%rdx)
			i++;
    4ff7:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
		while (i < size && src[i] != '\0')
    4ffb:	8b 45 f8             	mov    -0x8(%rbp),%eax
    4ffe:	3b 45 dc             	cmp    -0x24(%rbp),%eax
    5001:	73 11                	jae    5014 <ft_strlcpy+0x6b>
    5003:	8b 55 f8             	mov    -0x8(%rbp),%edx
    5006:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    500a:	48 01 d0             	add    %rdx,%rax
    500d:	0f b6 00             	movzbl (%rax),%eax
    5010:	84 c0                	test   %al,%al
    5012:	75 ca                	jne    4fde <ft_strlcpy+0x35>
		}
	}
	return (x);
    5014:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    5017:	c9                   	leave  
    5018:	c3                   	ret    

0000000000005019 <ft_max>:
/* ************************************************************************** */

#include "utils.h"

int	ft_max(int a, int b)
{
    5019:	f3 0f 1e fa          	endbr64 
    501d:	55                   	push   %rbp
    501e:	48 89 e5             	mov    %rsp,%rbp
    5021:	89 7d fc             	mov    %edi,-0x4(%rbp)
    5024:	89 75 f8             	mov    %esi,-0x8(%rbp)
	if (a < b)
    5027:	8b 45 fc             	mov    -0x4(%rbp),%eax
    502a:	3b 45 f8             	cmp    -0x8(%rbp),%eax
    502d:	7d 05                	jge    5034 <ft_max+0x1b>
		return (b);
    502f:	8b 45 f8             	mov    -0x8(%rbp),%eax
    5032:	eb 03                	jmp    5037 <ft_max+0x1e>
	return (a);
    5034:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    5037:	5d                   	pop    %rbp
    5038:	c3                   	ret    

0000000000005039 <ft_min>:

int	ft_min(int a, int b)
{
    5039:	f3 0f 1e fa          	endbr64 
    503d:	55                   	push   %rbp
    503e:	48 89 e5             	mov    %rsp,%rbp
    5041:	89 7d fc             	mov    %edi,-0x4(%rbp)
    5044:	89 75 f8             	mov    %esi,-0x8(%rbp)
	if (a > b)
    5047:	8b 45 fc             	mov    -0x4(%rbp),%eax
    504a:	3b 45 f8             	cmp    -0x8(%rbp),%eax
    504d:	7e 05                	jle    5054 <ft_min+0x1b>
		return (b);
    504f:	8b 45 f8             	mov    -0x8(%rbp),%eax
    5052:	eb 03                	jmp    5057 <ft_min+0x1e>
	return (a);
    5054:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    5057:	5d                   	pop    %rbp
    5058:	c3                   	ret    

0000000000005059 <ft_fmax>:

float	ft_fmax(float a, float b)
{
    5059:	f3 0f 1e fa          	endbr64 
    505d:	55                   	push   %rbp
    505e:	48 89 e5             	mov    %rsp,%rbp
    5061:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
    5066:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
	if (a < b)
    506b:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
    5070:	0f 2f 45 fc          	comiss -0x4(%rbp),%xmm0
    5074:	76 07                	jbe    507d <ft_fmax+0x24>
		return (b);
    5076:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
    507b:	eb 05                	jmp    5082 <ft_fmax+0x29>
	return (a);
    507d:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
}
    5082:	5d                   	pop    %rbp
    5083:	c3                   	ret    

0000000000005084 <ft_fmin>:

float	ft_fmin(float a, float b)
{
    5084:	f3 0f 1e fa          	endbr64 
    5088:	55                   	push   %rbp
    5089:	48 89 e5             	mov    %rsp,%rbp
    508c:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
    5091:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
	if (a > b)
    5096:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
    509b:	0f 2f 45 f8          	comiss -0x8(%rbp),%xmm0
    509f:	76 07                	jbe    50a8 <ft_fmin+0x24>
		return (b);
    50a1:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
    50a6:	eb 05                	jmp    50ad <ft_fmin+0x29>
	return (a);
    50a8:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
}
    50ad:	5d                   	pop    %rbp
    50ae:	c3                   	ret    

00000000000050af <ft_strlen>:
/* ************************************************************************** */

#include "utils.h"

size_t	ft_strlen(const char *str)
{
    50af:	f3 0f 1e fa          	endbr64 
    50b3:	55                   	push   %rbp
    50b4:	48 89 e5             	mov    %rsp,%rbp
    50b7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	size_t	count;

	count = 0;
    50bb:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    50c2:	00 
	if (!str)
    50c3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    50c8:	75 0b                	jne    50d5 <ft_strlen+0x26>
		return (count);
    50ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    50ce:	eb 1b                	jmp    50eb <ft_strlen+0x3c>
	while (str[count])
		count++;
    50d0:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	while (str[count])
    50d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    50d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    50dd:	48 01 d0             	add    %rdx,%rax
    50e0:	0f b6 00             	movzbl (%rax),%eax
    50e3:	84 c0                	test   %al,%al
    50e5:	75 e9                	jne    50d0 <ft_strlen+0x21>
	return (count);
    50e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    50eb:	5d                   	pop    %rbp
    50ec:	c3                   	ret    

00000000000050ed <ft_tablen>:

int	ft_tablen(char **str)
{
    50ed:	f3 0f 1e fa          	endbr64 
    50f1:	55                   	push   %rbp
    50f2:	48 89 e5             	mov    %rsp,%rbp
    50f5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int	count;

	count = -1;
    50f9:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
	while (str[++count])
    5100:	90                   	nop
    5101:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    5105:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5108:	48 98                	cltq   
    510a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5111:	00 
    5112:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5116:	48 01 d0             	add    %rdx,%rax
    5119:	48 8b 00             	mov    (%rax),%rax
    511c:	48 85 c0             	test   %rax,%rax
    511f:	75 e0                	jne    5101 <ft_tablen+0x14>
		;
	return (count);
    5121:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    5124:	5d                   	pop    %rbp
    5125:	c3                   	ret    

0000000000005126 <ft_strcmp>:
/* ************************************************************************** */

#include "utils.h"

int	ft_strcmp(const char *s1, const char *s2)
{
    5126:	f3 0f 1e fa          	endbr64 
    512a:	55                   	push   %rbp
    512b:	48 89 e5             	mov    %rsp,%rbp
    512e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5132:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t	i;

	i = 0;
    5136:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	while ((char)s1[i] == (char)s2[i] \
    513d:	eb 04                	jmp    5143 <ft_strcmp+0x1d>
		&& (char)s1[i] != '\0' && (char)s2[i] != '\0')
	{
		i++;
    513f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	while ((char)s1[i] == (char)s2[i] \
    5143:	8b 55 fc             	mov    -0x4(%rbp),%edx
    5146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    514a:	48 01 d0             	add    %rdx,%rax
    514d:	0f b6 10             	movzbl (%rax),%edx
    5150:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    5153:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5157:	48 01 c8             	add    %rcx,%rax
    515a:	0f b6 00             	movzbl (%rax),%eax
		&& (char)s1[i] != '\0' && (char)s2[i] != '\0')
    515d:	38 c2                	cmp    %al,%dl
    515f:	75 22                	jne    5183 <ft_strcmp+0x5d>
    5161:	8b 55 fc             	mov    -0x4(%rbp),%edx
    5164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5168:	48 01 d0             	add    %rdx,%rax
    516b:	0f b6 00             	movzbl (%rax),%eax
    516e:	84 c0                	test   %al,%al
    5170:	74 11                	je     5183 <ft_strcmp+0x5d>
    5172:	8b 55 fc             	mov    -0x4(%rbp),%edx
    5175:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5179:	48 01 d0             	add    %rdx,%rax
    517c:	0f b6 00             	movzbl (%rax),%eax
    517f:	84 c0                	test   %al,%al
    5181:	75 bc                	jne    513f <ft_strcmp+0x19>
	}
	return ((unsigned char)s1[i] - (unsigned char)s2[i]);
    5183:	8b 55 fc             	mov    -0x4(%rbp),%edx
    5186:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    518a:	48 01 d0             	add    %rdx,%rax
    518d:	0f b6 00             	movzbl (%rax),%eax
    5190:	0f b6 c0             	movzbl %al,%eax
    5193:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    5196:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    519a:	48 01 ca             	add    %rcx,%rdx
    519d:	0f b6 12             	movzbl (%rdx),%edx
    51a0:	0f b6 d2             	movzbl %dl,%edx
    51a3:	29 d0                	sub    %edx,%eax
}
    51a5:	5d                   	pop    %rbp
    51a6:	c3                   	ret    

00000000000051a7 <ft_strncmp>:

int	ft_strncmp(const char *s1, const char *s2, uint32_t n)
{
    51a7:	f3 0f 1e fa          	endbr64 
    51ab:	55                   	push   %rbp
    51ac:	48 89 e5             	mov    %rsp,%rbp
    51af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    51b3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    51b7:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint32_t	i;

	i = 0;
    51ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	if (n == 0)
    51c1:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    51c5:	75 0b                	jne    51d2 <ft_strncmp+0x2b>
		return (0);
    51c7:	b8 00 00 00 00       	mov    $0x0,%eax
    51cc:	eb 71                	jmp    523f <ft_strncmp+0x98>
	while ((char)s1[i] == (char)s2[i] && i < n - 1 \
		&& (char)s1[i] != '\0' && (char)s2[i] != '\0')
	{
		i++;
    51ce:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	while ((char)s1[i] == (char)s2[i] && i < n - 1 \
    51d2:	8b 55 fc             	mov    -0x4(%rbp),%edx
    51d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    51d9:	48 01 d0             	add    %rdx,%rax
    51dc:	0f b6 10             	movzbl (%rax),%edx
    51df:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    51e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    51e6:	48 01 c8             	add    %rcx,%rax
    51e9:	0f b6 00             	movzbl (%rax),%eax
		&& (char)s1[i] != '\0' && (char)s2[i] != '\0')
    51ec:	38 c2                	cmp    %al,%dl
    51ee:	75 2d                	jne    521d <ft_strncmp+0x76>
	while ((char)s1[i] == (char)s2[i] && i < n - 1 \
    51f0:	8b 45 dc             	mov    -0x24(%rbp),%eax
    51f3:	83 e8 01             	sub    $0x1,%eax
    51f6:	39 45 fc             	cmp    %eax,-0x4(%rbp)
    51f9:	73 22                	jae    521d <ft_strncmp+0x76>
		&& (char)s1[i] != '\0' && (char)s2[i] != '\0')
    51fb:	8b 55 fc             	mov    -0x4(%rbp),%edx
    51fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5202:	48 01 d0             	add    %rdx,%rax
    5205:	0f b6 00             	movzbl (%rax),%eax
    5208:	84 c0                	test   %al,%al
    520a:	74 11                	je     521d <ft_strncmp+0x76>
    520c:	8b 55 fc             	mov    -0x4(%rbp),%edx
    520f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5213:	48 01 d0             	add    %rdx,%rax
    5216:	0f b6 00             	movzbl (%rax),%eax
    5219:	84 c0                	test   %al,%al
    521b:	75 b1                	jne    51ce <ft_strncmp+0x27>
	}
	return ((unsigned char)s1[i] - (unsigned char)s2[i]);
    521d:	8b 55 fc             	mov    -0x4(%rbp),%edx
    5220:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5224:	48 01 d0             	add    %rdx,%rax
    5227:	0f b6 00             	movzbl (%rax),%eax
    522a:	0f b6 c0             	movzbl %al,%eax
    522d:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    5230:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    5234:	48 01 ca             	add    %rcx,%rdx
    5237:	0f b6 12             	movzbl (%rdx),%edx
    523a:	0f b6 d2             	movzbl %dl,%edx
    523d:	29 d0                	sub    %edx,%eax
}
    523f:	5d                   	pop    %rbp
    5240:	c3                   	ret    

0000000000005241 <ft_strnrcmp>:

int	ft_strnrcmp(const char *s1, const char *s2, uint32_t n)
{
    5241:	f3 0f 1e fa          	endbr64 
    5245:	55                   	push   %rbp
    5246:	48 89 e5             	mov    %rsp,%rbp
    5249:	53                   	push   %rbx
    524a:	48 83 ec 38          	sub    $0x38,%rsp
    524e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5252:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5256:	89 55 cc             	mov    %edx,-0x34(%rbp)
	uint32_t	i;

	i = ft_max(ft_strlen(s1), ft_strlen(s2)) - 1;
    5259:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    525d:	48 89 c7             	mov    %rax,%rdi
    5260:	e8 4a fe ff ff       	call   50af <ft_strlen>
    5265:	89 c3                	mov    %eax,%ebx
    5267:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    526b:	48 89 c7             	mov    %rax,%rdi
    526e:	e8 3c fe ff ff       	call   50af <ft_strlen>
    5273:	89 de                	mov    %ebx,%esi
    5275:	89 c7                	mov    %eax,%edi
    5277:	e8 9d fd ff ff       	call   5019 <ft_max>
    527c:	83 e8 01             	sub    $0x1,%eax
    527f:	89 45 ec             	mov    %eax,-0x14(%rbp)
	while (n > 0 && i > 0 && (char)s1[i] == (char)s2[n - 1])
    5282:	eb 15                	jmp    5299 <ft_strnrcmp+0x58>
	{
		i--;
    5284:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
		n--;
    5288:	83 6d cc 01          	subl   $0x1,-0x34(%rbp)
		if (n == 0)
    528c:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    5290:	75 07                	jne    5299 <ft_strnrcmp+0x58>
			return (0);
    5292:	b8 00 00 00 00       	mov    $0x0,%eax
    5297:	eb 51                	jmp    52ea <ft_strnrcmp+0xa9>
	while (n > 0 && i > 0 && (char)s1[i] == (char)s2[n - 1])
    5299:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
    529d:	74 29                	je     52c8 <ft_strnrcmp+0x87>
    529f:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
    52a3:	74 23                	je     52c8 <ft_strnrcmp+0x87>
    52a5:	8b 55 ec             	mov    -0x14(%rbp),%edx
    52a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    52ac:	48 01 d0             	add    %rdx,%rax
    52af:	0f b6 10             	movzbl (%rax),%edx
    52b2:	8b 45 cc             	mov    -0x34(%rbp),%eax
    52b5:	83 e8 01             	sub    $0x1,%eax
    52b8:	89 c1                	mov    %eax,%ecx
    52ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    52be:	48 01 c8             	add    %rcx,%rax
    52c1:	0f b6 00             	movzbl (%rax),%eax
    52c4:	38 c2                	cmp    %al,%dl
    52c6:	74 bc                	je     5284 <ft_strnrcmp+0x43>
	}
	return ((unsigned char)s1[i] - (unsigned char)s2[n]);
    52c8:	8b 55 ec             	mov    -0x14(%rbp),%edx
    52cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    52cf:	48 01 d0             	add    %rdx,%rax
    52d2:	0f b6 00             	movzbl (%rax),%eax
    52d5:	0f b6 c0             	movzbl %al,%eax
    52d8:	8b 4d cc             	mov    -0x34(%rbp),%ecx
    52db:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    52df:	48 01 ca             	add    %rcx,%rdx
    52e2:	0f b6 12             	movzbl (%rdx),%edx
    52e5:	0f b6 d2             	movzbl %dl,%edx
    52e8:	29 d0                	sub    %edx,%eax
}
    52ea:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    52ee:	c9                   	leave  
    52ef:	c3                   	ret    

00000000000052f0 <ft_extension>:

int	ft_extension(char *str, char *end)
{
    52f0:	f3 0f 1e fa          	endbr64 
    52f4:	55                   	push   %rbp
    52f5:	48 89 e5             	mov    %rsp,%rbp
    52f8:	48 83 ec 20          	sub    $0x20,%rsp
    52fc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5300:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int	len;
	int	count;

	len = ft_strlen(str) - 1;
    5304:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5308:	48 89 c7             	mov    %rax,%rdi
    530b:	e8 9f fd ff ff       	call   50af <ft_strlen>
    5310:	83 e8 01             	sub    $0x1,%eax
    5313:	89 45 f8             	mov    %eax,-0x8(%rbp)
	count = ft_strlen(end) - 1;
    5316:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    531a:	48 89 c7             	mov    %rax,%rdi
    531d:	e8 8d fd ff ff       	call   50af <ft_strlen>
    5322:	83 e8 01             	sub    $0x1,%eax
    5325:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (len == count)
    5328:	8b 45 f8             	mov    -0x8(%rbp),%eax
    532b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
    532e:	75 0b                	jne    533b <ft_extension+0x4b>
		return (0);
    5330:	b8 00 00 00 00       	mov    $0x0,%eax
    5335:	eb 4c                	jmp    5383 <ft_extension+0x93>
	while ((str[len--] == end[count]) && ((count > 0) && (len > 0)))
		count--;
    5337:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
	while ((str[len--] == end[count]) && ((count > 0) && (len > 0)))
    533b:	8b 45 f8             	mov    -0x8(%rbp),%eax
    533e:	8d 50 ff             	lea    -0x1(%rax),%edx
    5341:	89 55 f8             	mov    %edx,-0x8(%rbp)
    5344:	48 63 d0             	movslq %eax,%rdx
    5347:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    534b:	48 01 d0             	add    %rdx,%rax
    534e:	0f b6 10             	movzbl (%rax),%edx
    5351:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5354:	48 63 c8             	movslq %eax,%rcx
    5357:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    535b:	48 01 c8             	add    %rcx,%rax
    535e:	0f b6 00             	movzbl (%rax),%eax
    5361:	38 c2                	cmp    %al,%dl
    5363:	75 0c                	jne    5371 <ft_extension+0x81>
    5365:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    5369:	7e 06                	jle    5371 <ft_extension+0x81>
    536b:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
    536f:	7f c6                	jg     5337 <ft_extension+0x47>
	if (count == 0)
    5371:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    5375:	75 07                	jne    537e <ft_extension+0x8e>
		return (1);
    5377:	b8 01 00 00 00       	mov    $0x1,%eax
    537c:	eb 05                	jmp    5383 <ft_extension+0x93>
	return (0);
    537e:	b8 00 00 00 00       	mov    $0x0,%eax
}
    5383:	c9                   	leave  
    5384:	c3                   	ret    

0000000000005385 <ft_realloc>:
/* ************************************************************************** */

#include "utils.h"

void	*ft_realloc(void *ptr, size_t size)
{
    5385:	f3 0f 1e fa          	endbr64 
    5389:	55                   	push   %rbp
    538a:	48 89 e5             	mov    %rsp,%rbp
    538d:	48 83 ec 20          	sub    $0x20,%rsp
    5391:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5395:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	void	*new_ptr;

	new_ptr = malloc(size);
    5399:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    539d:	48 89 c7             	mov    %rax,%rdi
    53a0:	e8 bb cd ff ff       	call   2160 <malloc@plt>
    53a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!new_ptr)
    53a9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    53ae:	75 07                	jne    53b7 <ft_realloc+0x32>
		return (NULL);
    53b0:	b8 00 00 00 00       	mov    $0x0,%eax
    53b5:	eb 2e                	jmp    53e5 <ft_realloc+0x60>
	if (ptr)
    53b7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    53bc:	74 23                	je     53e1 <ft_realloc+0x5c>
	{
		ft_memcpy(new_ptr, ptr, size);
    53be:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    53c2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    53c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    53ca:	48 89 ce             	mov    %rcx,%rsi
    53cd:	48 89 c7             	mov    %rax,%rdi
    53d0:	e8 21 f7 ff ff       	call   4af6 <ft_memcpy>
		free(ptr);
    53d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    53d9:	48 89 c7             	mov    %rax,%rdi
    53dc:	e8 ff cc ff ff       	call   20e0 <free@plt>
	}
	return (new_ptr);
    53e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    53e5:	c9                   	leave  
    53e6:	c3                   	ret    

00000000000053e7 <free_tab>:
/* ************************************************************************** */

#include "utils.h"

char	**free_tab(char **tab)
{
    53e7:	f3 0f 1e fa          	endbr64 
    53eb:	55                   	push   %rbp
    53ec:	48 89 e5             	mov    %rsp,%rbp
    53ef:	48 83 ec 20          	sub    $0x20,%rsp
    53f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int	i;

	i = 0;
    53f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	while (tab[i])
    53fe:	eb 25                	jmp    5425 <free_tab+0x3e>
	{
		free(tab[i++]);
    5400:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5403:	8d 50 01             	lea    0x1(%rax),%edx
    5406:	89 55 fc             	mov    %edx,-0x4(%rbp)
    5409:	48 98                	cltq   
    540b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5412:	00 
    5413:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5417:	48 01 d0             	add    %rdx,%rax
    541a:	48 8b 00             	mov    (%rax),%rax
    541d:	48 89 c7             	mov    %rax,%rdi
    5420:	e8 bb cc ff ff       	call   20e0 <free@plt>
	while (tab[i])
    5425:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5428:	48 98                	cltq   
    542a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5431:	00 
    5432:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5436:	48 01 d0             	add    %rdx,%rax
    5439:	48 8b 00             	mov    (%rax),%rax
    543c:	48 85 c0             	test   %rax,%rax
    543f:	75 bf                	jne    5400 <free_tab+0x19>
	}
	free(tab);
    5441:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5445:	48 89 c7             	mov    %rax,%rdi
    5448:	e8 93 cc ff ff       	call   20e0 <free@plt>
	return (0);
    544d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    5452:	c9                   	leave  
    5453:	c3                   	ret    

0000000000005454 <check_separator>:

int	check_separator(char c, char *charset)
{
    5454:	f3 0f 1e fa          	endbr64 
    5458:	55                   	push   %rbp
    5459:	48 89 e5             	mov    %rsp,%rbp
    545c:	89 f8                	mov    %edi,%eax
    545e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    5462:	88 45 ec             	mov    %al,-0x14(%rbp)
	int	i;

	i = 0;
    5465:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	while (charset[i] != '\0')
    546c:	eb 20                	jmp    548e <check_separator+0x3a>
	{
		if (c == charset[i])
    546e:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5471:	48 63 d0             	movslq %eax,%rdx
    5474:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5478:	48 01 d0             	add    %rdx,%rax
    547b:	0f b6 00             	movzbl (%rax),%eax
    547e:	38 45 ec             	cmp    %al,-0x14(%rbp)
    5481:	75 07                	jne    548a <check_separator+0x36>
			return (1);
    5483:	b8 01 00 00 00       	mov    $0x1,%eax
    5488:	eb 1d                	jmp    54a7 <check_separator+0x53>
		i++;
    548a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	while (charset[i] != '\0')
    548e:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5491:	48 63 d0             	movslq %eax,%rdx
    5494:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5498:	48 01 d0             	add    %rdx,%rax
    549b:	0f b6 00             	movzbl (%rax),%eax
    549e:	84 c0                	test   %al,%al
    54a0:	75 cc                	jne    546e <check_separator+0x1a>
	}
	return (0);
    54a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
    54a7:	5d                   	pop    %rbp
    54a8:	c3                   	ret    

00000000000054a9 <ft_abs>:
/* ************************************************************************** */

#include "utils.h"

static int	ft_abs(int nbr)
{
    54a9:	f3 0f 1e fa          	endbr64 
    54ad:	55                   	push   %rbp
    54ae:	48 89 e5             	mov    %rsp,%rbp
    54b1:	89 7d fc             	mov    %edi,-0x4(%rbp)
	if (nbr < 0)
    54b4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    54b8:	79 07                	jns    54c1 <ft_abs+0x18>
		return (-nbr);
    54ba:	8b 45 fc             	mov    -0x4(%rbp),%eax
    54bd:	f7 d8                	neg    %eax
    54bf:	eb 03                	jmp    54c4 <ft_abs+0x1b>
	return (nbr);
    54c1:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    54c4:	5d                   	pop    %rbp
    54c5:	c3                   	ret    

00000000000054c6 <ft_strrev>:

static void	ft_strrev(char *str)
{
    54c6:	f3 0f 1e fa          	endbr64 
    54ca:	55                   	push   %rbp
    54cb:	48 89 e5             	mov    %rsp,%rbp
    54ce:	48 83 ec 30          	sub    $0x30,%rsp
    54d2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	size_t	length;
	size_t	i;
	char	tmp;

	length = ft_strlen(str);
    54d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    54da:	48 89 c7             	mov    %rax,%rdi
    54dd:	e8 cd fb ff ff       	call   50af <ft_strlen>
    54e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	i = 0;
    54e6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    54ed:	00 
	while (i < length >> 1)
    54ee:	eb 52                	jmp    5542 <ft_strrev+0x7c>
	{
		tmp = str[i];
    54f0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    54f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    54f8:	48 01 d0             	add    %rdx,%rax
    54fb:	0f b6 00             	movzbl (%rax),%eax
    54fe:	88 45 ef             	mov    %al,-0x11(%rbp)
		str[i] = str[length - i - 1];
    5501:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5505:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    5509:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    550d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5511:	48 01 d0             	add    %rdx,%rax
    5514:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    5518:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    551c:	48 01 ca             	add    %rcx,%rdx
    551f:	0f b6 00             	movzbl (%rax),%eax
    5522:	88 02                	mov    %al,(%rdx)
		str[length - i - 1] = tmp;
    5524:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5528:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
    552c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    5530:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5534:	48 01 c2             	add    %rax,%rdx
    5537:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
    553b:	88 02                	mov    %al,(%rdx)
		i++;
    553d:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
	while (i < length >> 1)
    5542:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5546:	48 d1 e8             	shr    %rax
    5549:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    554d:	72 a1                	jb     54f0 <ft_strrev+0x2a>
	}
}
    554f:	90                   	nop
    5550:	90                   	nop
    5551:	c9                   	leave  
    5552:	c3                   	ret    

0000000000005553 <get_num_len>:

static int	get_num_len(int num)
{
    5553:	f3 0f 1e fa          	endbr64 
    5557:	55                   	push   %rbp
    5558:	48 89 e5             	mov    %rsp,%rbp
    555b:	48 83 ec 18          	sub    $0x18,%rsp
    555f:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int	count;

	count = 0;
    5562:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	num = ft_abs(num);
    5569:	8b 45 ec             	mov    -0x14(%rbp),%eax
    556c:	89 c7                	mov    %eax,%edi
    556e:	e8 36 ff ff ff       	call   54a9 <ft_abs>
    5573:	89 45 ec             	mov    %eax,-0x14(%rbp)
	while (num != 0)
    5576:	eb 24                	jmp    559c <get_num_len+0x49>
	{
		num = num / 10;
    5578:	8b 45 ec             	mov    -0x14(%rbp),%eax
    557b:	48 63 d0             	movslq %eax,%rdx
    557e:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    5585:	48 c1 ea 20          	shr    $0x20,%rdx
    5589:	c1 fa 02             	sar    $0x2,%edx
    558c:	c1 f8 1f             	sar    $0x1f,%eax
    558f:	89 c1                	mov    %eax,%ecx
    5591:	89 d0                	mov    %edx,%eax
    5593:	29 c8                	sub    %ecx,%eax
    5595:	89 45 ec             	mov    %eax,-0x14(%rbp)
		count++;
    5598:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	while (num != 0)
    559c:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
    55a0:	75 d6                	jne    5578 <get_num_len+0x25>
	}
	if (count == 0)
    55a2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    55a6:	75 07                	jne    55af <get_num_len+0x5c>
		count = 1;
    55a8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
	return (count);
    55af:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
    55b2:	c9                   	leave  
    55b3:	c3                   	ret    

00000000000055b4 <ft_itoa>:

char	*ft_itoa(int n)
{
    55b4:	f3 0f 1e fa          	endbr64 
    55b8:	55                   	push   %rbp
    55b9:	48 89 e5             	mov    %rsp,%rbp
    55bc:	48 83 ec 30          	sub    $0x30,%rsp
    55c0:	89 7d dc             	mov    %edi,-0x24(%rbp)
	char	*str;
	int		is_neg;
	size_t	length;

	is_neg = (n < 0);
    55c3:	8b 45 dc             	mov    -0x24(%rbp),%eax
    55c6:	c1 e8 1f             	shr    $0x1f,%eax
    55c9:	0f b6 c0             	movzbl %al,%eax
    55cc:	89 45 ec             	mov    %eax,-0x14(%rbp)
	str = malloc((get_num_len(n) + 1 + is_neg) * sizeof(*str));
    55cf:	8b 45 dc             	mov    -0x24(%rbp),%eax
    55d2:	89 c7                	mov    %eax,%edi
    55d4:	e8 7a ff ff ff       	call   5553 <get_num_len>
    55d9:	8d 50 01             	lea    0x1(%rax),%edx
    55dc:	8b 45 ec             	mov    -0x14(%rbp),%eax
    55df:	01 d0                	add    %edx,%eax
    55e1:	48 98                	cltq   
    55e3:	48 89 c7             	mov    %rax,%rdi
    55e6:	e8 75 cb ff ff       	call   2160 <malloc@plt>
    55eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!str)
    55ef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    55f4:	75 0a                	jne    5600 <ft_itoa+0x4c>
		return (NULL);
    55f6:	b8 00 00 00 00       	mov    $0x0,%eax
    55fb:	e9 ac 00 00 00       	jmp    56ac <ft_itoa+0xf8>
	if (n == 0)
    5600:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    5604:	75 07                	jne    560d <ft_itoa+0x59>
		str[0] = '0';
    5606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    560a:	c6 00 30             	movb   $0x30,(%rax)
	length = 0;
    560d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    5614:	00 
	while (n != 0)
    5615:	eb 6b                	jmp    5682 <ft_itoa+0xce>
	{
		str[length++] = '0' + ft_abs(n % 10);
    5617:	8b 4d dc             	mov    -0x24(%rbp),%ecx
    561a:	48 63 c1             	movslq %ecx,%rax
    561d:	48 69 c0 67 66 66 66 	imul   $0x66666667,%rax,%rax
    5624:	48 c1 e8 20          	shr    $0x20,%rax
    5628:	c1 f8 02             	sar    $0x2,%eax
    562b:	89 ce                	mov    %ecx,%esi
    562d:	c1 fe 1f             	sar    $0x1f,%esi
    5630:	29 f0                	sub    %esi,%eax
    5632:	89 c2                	mov    %eax,%edx
    5634:	89 d0                	mov    %edx,%eax
    5636:	c1 e0 02             	shl    $0x2,%eax
    5639:	01 d0                	add    %edx,%eax
    563b:	01 c0                	add    %eax,%eax
    563d:	29 c1                	sub    %eax,%ecx
    563f:	89 ca                	mov    %ecx,%edx
    5641:	89 d7                	mov    %edx,%edi
    5643:	e8 61 fe ff ff       	call   54a9 <ft_abs>
    5648:	8d 48 30             	lea    0x30(%rax),%ecx
    564b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    564f:	48 8d 50 01          	lea    0x1(%rax),%rdx
    5653:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    5657:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    565b:	48 01 d0             	add    %rdx,%rax
    565e:	89 ca                	mov    %ecx,%edx
    5660:	88 10                	mov    %dl,(%rax)
		n = (n / 10);
    5662:	8b 45 dc             	mov    -0x24(%rbp),%eax
    5665:	48 63 d0             	movslq %eax,%rdx
    5668:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    566f:	48 c1 ea 20          	shr    $0x20,%rdx
    5673:	c1 fa 02             	sar    $0x2,%edx
    5676:	c1 f8 1f             	sar    $0x1f,%eax
    5679:	89 c1                	mov    %eax,%ecx
    567b:	89 d0                	mov    %edx,%eax
    567d:	29 c8                	sub    %ecx,%eax
    567f:	89 45 dc             	mov    %eax,-0x24(%rbp)
	while (n != 0)
    5682:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    5686:	75 8f                	jne    5617 <ft_itoa+0x63>
	}
	if (is_neg)
    5688:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
    568c:	74 0e                	je     569c <ft_itoa+0xe8>
		str[length] = '-';
    568e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5696:	48 01 d0             	add    %rdx,%rax
    5699:	c6 00 2d             	movb   $0x2d,(%rax)
	ft_strrev(str);
    569c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    56a0:	48 89 c7             	mov    %rax,%rdi
    56a3:	e8 1e fe ff ff       	call   54c6 <ft_strrev>
	return (str);
    56a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    56ac:	c9                   	leave  
    56ad:	c3                   	ret    

00000000000056ae <ft_strcpy>:
/* ************************************************************************** */

#include "utils.h"

static char	*ft_strcpy(char *dest, char *src)
{
    56ae:	f3 0f 1e fa          	endbr64 
    56b2:	55                   	push   %rbp
    56b3:	48 89 e5             	mov    %rsp,%rbp
    56b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    56ba:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int	index;

	index = 0;
    56be:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	while (src[index] != '\0')
    56c5:	eb 23                	jmp    56ea <ft_strcpy+0x3c>
	{
		dest[index] = src[index];
    56c7:	8b 45 fc             	mov    -0x4(%rbp),%eax
    56ca:	48 63 d0             	movslq %eax,%rdx
    56cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    56d1:	48 01 d0             	add    %rdx,%rax
    56d4:	8b 55 fc             	mov    -0x4(%rbp),%edx
    56d7:	48 63 ca             	movslq %edx,%rcx
    56da:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    56de:	48 01 ca             	add    %rcx,%rdx
    56e1:	0f b6 00             	movzbl (%rax),%eax
    56e4:	88 02                	mov    %al,(%rdx)
		index++;
    56e6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	while (src[index] != '\0')
    56ea:	8b 45 fc             	mov    -0x4(%rbp),%eax
    56ed:	48 63 d0             	movslq %eax,%rdx
    56f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    56f4:	48 01 d0             	add    %rdx,%rax
    56f7:	0f b6 00             	movzbl (%rax),%eax
    56fa:	84 c0                	test   %al,%al
    56fc:	75 c9                	jne    56c7 <ft_strcpy+0x19>
	}
	dest[index] = '\0';
    56fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5701:	48 63 d0             	movslq %eax,%rdx
    5704:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5708:	48 01 d0             	add    %rdx,%rax
    570b:	c6 00 00             	movb   $0x0,(%rax)
	return (dest);
    570e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
    5712:	5d                   	pop    %rbp
    5713:	c3                   	ret    

0000000000005714 <ft_compute_final_length>:

static int	ft_compute_final_length(char **strings, int size, int sep_length)
{
    5714:	f3 0f 1e fa          	endbr64 
    5718:	55                   	push   %rbp
    5719:	48 89 e5             	mov    %rsp,%rbp
    571c:	48 83 ec 20          	sub    $0x20,%rsp
    5720:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5724:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    5727:	89 55 e0             	mov    %edx,-0x20(%rbp)
	int	final_length;
	int	i;

	final_length = 0;
    572a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	i = -1;
    5731:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
	while (++i < size)
    5738:	eb 3a                	jmp    5774 <ft_compute_final_length+0x60>
	{
		final_length += ft_strlen(strings[i]);
    573a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    573d:	48 98                	cltq   
    573f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5746:	00 
    5747:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    574b:	48 01 d0             	add    %rdx,%rax
    574e:	48 8b 00             	mov    (%rax),%rax
    5751:	48 89 c7             	mov    %rax,%rdi
    5754:	e8 56 f9 ff ff       	call   50af <ft_strlen>
    5759:	89 c2                	mov    %eax,%edx
    575b:	8b 45 f8             	mov    -0x8(%rbp),%eax
    575e:	01 d0                	add    %edx,%eax
    5760:	89 45 f8             	mov    %eax,-0x8(%rbp)
		if (i < size - 1)
    5763:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    5766:	83 e8 01             	sub    $0x1,%eax
    5769:	39 45 fc             	cmp    %eax,-0x4(%rbp)
    576c:	7d 06                	jge    5774 <ft_compute_final_length+0x60>
			final_length += sep_length;
    576e:	8b 45 e0             	mov    -0x20(%rbp),%eax
    5771:	01 45 f8             	add    %eax,-0x8(%rbp)
	while (++i < size)
    5774:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    5778:	8b 45 fc             	mov    -0x4(%rbp),%eax
    577b:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    577e:	7c ba                	jl     573a <ft_compute_final_length+0x26>
	}
	return (final_length);
    5780:	8b 45 f8             	mov    -0x8(%rbp),%eax
}
    5783:	c9                   	leave  
    5784:	c3                   	ret    

0000000000005785 <ft_strjoin_arr>:

char	*ft_strjoin_arr(int size, char **strs, char *sep)
{
    5785:	f3 0f 1e fa          	endbr64 
    5789:	55                   	push   %rbp
    578a:	48 89 e5             	mov    %rsp,%rbp
    578d:	48 83 ec 40          	sub    $0x40,%rsp
    5791:	89 7d dc             	mov    %edi,-0x24(%rbp)
    5794:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5798:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int		full_length;
	int		i;
	char	*string;
	char	*tmp;

	if (!size)
    579c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
    57a0:	75 14                	jne    57b6 <ft_strjoin_arr+0x31>
		return ((char *)ft_calloc(1, sizeof(char)));
    57a2:	be 01 00 00 00       	mov    $0x1,%esi
    57a7:	bf 01 00 00 00       	mov    $0x1,%edi
    57ac:	e8 66 f7 ff ff       	call   4f17 <ft_calloc>
    57b1:	e9 ea 00 00 00       	jmp    58a0 <ft_strjoin_arr+0x11b>
	full_length = ft_compute_final_length(strs, size, ft_strlen(sep));
    57b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57ba:	48 89 c7             	mov    %rax,%rdi
    57bd:	e8 ed f8 ff ff       	call   50af <ft_strlen>
    57c2:	89 c2                	mov    %eax,%edx
    57c4:	8b 4d dc             	mov    -0x24(%rbp),%ecx
    57c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    57cb:	89 ce                	mov    %ecx,%esi
    57cd:	48 89 c7             	mov    %rax,%rdi
    57d0:	e8 3f ff ff ff       	call   5714 <ft_compute_final_length>
    57d5:	89 45 ec             	mov    %eax,-0x14(%rbp)
	string = (char *)malloc((full_length + 1) * sizeof(char));
    57d8:	8b 45 ec             	mov    -0x14(%rbp),%eax
    57db:	83 c0 01             	add    $0x1,%eax
    57de:	48 98                	cltq   
    57e0:	48 89 c7             	mov    %rax,%rdi
    57e3:	e8 78 c9 ff ff       	call   2160 <malloc@plt>
    57e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!string)
    57ec:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    57f1:	75 0a                	jne    57fd <ft_strjoin_arr+0x78>
		return (NULL);
    57f3:	b8 00 00 00 00       	mov    $0x0,%eax
    57f8:	e9 a3 00 00 00       	jmp    58a0 <ft_strjoin_arr+0x11b>
	tmp = string;
    57fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5801:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	i = -1;
    5805:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
	while (++i < size)
    580c:	eb 77                	jmp    5885 <ft_strjoin_arr+0x100>
	{
		ft_strcpy(tmp, strs[i]);
    580e:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5811:	48 98                	cltq   
    5813:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    581a:	00 
    581b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    581f:	48 01 d0             	add    %rdx,%rax
    5822:	48 8b 10             	mov    (%rax),%rdx
    5825:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5829:	48 89 d6             	mov    %rdx,%rsi
    582c:	48 89 c7             	mov    %rax,%rdi
    582f:	e8 7a fe ff ff       	call   56ae <ft_strcpy>
		tmp += ft_strlen(strs[i]);
    5834:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5837:	48 98                	cltq   
    5839:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5840:	00 
    5841:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5845:	48 01 d0             	add    %rdx,%rax
    5848:	48 8b 00             	mov    (%rax),%rax
    584b:	48 89 c7             	mov    %rax,%rdi
    584e:	e8 5c f8 ff ff       	call   50af <ft_strlen>
    5853:	48 01 45 f0          	add    %rax,-0x10(%rbp)
		if (i < size - 1)
    5857:	8b 45 dc             	mov    -0x24(%rbp),%eax
    585a:	83 e8 01             	sub    $0x1,%eax
    585d:	39 45 e8             	cmp    %eax,-0x18(%rbp)
    5860:	7d 23                	jge    5885 <ft_strjoin_arr+0x100>
		{
			ft_strcpy(tmp, sep);
    5862:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    5866:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    586a:	48 89 d6             	mov    %rdx,%rsi
    586d:	48 89 c7             	mov    %rax,%rdi
    5870:	e8 39 fe ff ff       	call   56ae <ft_strcpy>
			tmp += ft_strlen(sep);
    5875:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5879:	48 89 c7             	mov    %rax,%rdi
    587c:	e8 2e f8 ff ff       	call   50af <ft_strlen>
    5881:	48 01 45 f0          	add    %rax,-0x10(%rbp)
	while (++i < size)
    5885:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
    5889:	8b 45 e8             	mov    -0x18(%rbp),%eax
    588c:	3b 45 dc             	cmp    -0x24(%rbp),%eax
    588f:	0f 8c 79 ff ff ff    	jl     580e <ft_strjoin_arr+0x89>
		}
	}
	*tmp = '\0';
    5895:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5899:	c6 00 00             	movb   $0x0,(%rax)
	return (string);
    589c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    58a0:	c9                   	leave  
    58a1:	c3                   	ret    

00000000000058a2 <ft_strjoin>:

char	*ft_strjoin(char *s1, char *s2)
{
    58a2:	f3 0f 1e fa          	endbr64 
    58a6:	55                   	push   %rbp
    58a7:	48 89 e5             	mov    %rsp,%rbp
    58aa:	48 83 ec 20          	sub    $0x20,%rsp
    58ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    58b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	char	*str;
	int		i;
	int		j;

	if (!s1)
    58b6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    58bb:	75 13                	jne    58d0 <ft_strjoin+0x2e>
		s1 = (char *)ft_calloc(1, sizeof(char));
    58bd:	be 01 00 00 00       	mov    $0x1,%esi
    58c2:	bf 01 00 00 00       	mov    $0x1,%edi
    58c7:	e8 4b f6 ff ff       	call   4f17 <ft_calloc>
    58cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (!s1)
    58d0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    58d5:	75 0a                	jne    58e1 <ft_strjoin+0x3f>
		return (NULL);
    58d7:	b8 00 00 00 00       	mov    $0x0,%eax
    58dc:	e9 e0 00 00 00       	jmp    59c1 <ft_strjoin+0x11f>
	if (!s2)
    58e1:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    58e6:	75 16                	jne    58fe <ft_strjoin+0x5c>
		return (free(s1), NULL);
    58e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    58ec:	48 89 c7             	mov    %rax,%rdi
    58ef:	e8 ec c7 ff ff       	call   20e0 <free@plt>
    58f4:	b8 00 00 00 00       	mov    $0x0,%eax
    58f9:	e9 c3 00 00 00       	jmp    59c1 <ft_strjoin+0x11f>
	i = ft_strlen(s1);
    58fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5902:	48 89 c7             	mov    %rax,%rdi
    5905:	e8 a5 f7 ff ff       	call   50af <ft_strlen>
    590a:	89 45 f0             	mov    %eax,-0x10(%rbp)
	j = ft_strlen(s2);
    590d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5911:	48 89 c7             	mov    %rax,%rdi
    5914:	e8 96 f7 ff ff       	call   50af <ft_strlen>
    5919:	89 45 f4             	mov    %eax,-0xc(%rbp)
	str = malloc(
			sizeof(char) * (i + j + 1));
    591c:	8b 55 f0             	mov    -0x10(%rbp),%edx
    591f:	8b 45 f4             	mov    -0xc(%rbp),%eax
    5922:	01 d0                	add    %edx,%eax
    5924:	83 c0 01             	add    $0x1,%eax
	str = malloc(
    5927:	48 98                	cltq   
    5929:	48 89 c7             	mov    %rax,%rdi
    592c:	e8 2f c8 ff ff       	call   2160 <malloc@plt>
    5931:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (!str)
    5935:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    593a:	75 13                	jne    594f <ft_strjoin+0xad>
		return (free(s1), NULL);
    593c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5940:	48 89 c7             	mov    %rax,%rdi
    5943:	e8 98 c7 ff ff       	call   20e0 <free@plt>
    5948:	b8 00 00 00 00       	mov    $0x0,%eax
    594d:	eb 72                	jmp    59c1 <ft_strjoin+0x11f>
	ft_memcpy(str, s1, i);
    594f:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5952:	48 63 d0             	movslq %eax,%rdx
    5955:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    5959:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    595d:	48 89 ce             	mov    %rcx,%rsi
    5960:	48 89 c7             	mov    %rax,%rdi
    5963:	e8 8e f1 ff ff       	call   4af6 <ft_memcpy>
	ft_memcpy(str + i, s2, j);
    5968:	8b 45 f4             	mov    -0xc(%rbp),%eax
    596b:	48 63 d0             	movslq %eax,%rdx
    596e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5971:	48 63 c8             	movslq %eax,%rcx
    5974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5978:	48 01 c1             	add    %rax,%rcx
    597b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    597f:	48 89 c6             	mov    %rax,%rsi
    5982:	48 89 cf             	mov    %rcx,%rdi
    5985:	e8 6c f1 ff ff       	call   4af6 <ft_memcpy>
	ft_memset(str + i + j, '\0', sizeof(char));
    598a:	8b 45 f0             	mov    -0x10(%rbp),%eax
    598d:	48 63 d0             	movslq %eax,%rdx
    5990:	8b 45 f4             	mov    -0xc(%rbp),%eax
    5993:	48 98                	cltq   
    5995:	48 01 c2             	add    %rax,%rdx
    5998:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    599c:	48 01 d0             	add    %rdx,%rax
    599f:	ba 01 00 00 00       	mov    $0x1,%edx
    59a4:	be 00 00 00 00       	mov    $0x0,%esi
    59a9:	48 89 c7             	mov    %rax,%rdi
    59ac:	e8 12 eb ff ff       	call   44c3 <ft_memset>
	free(s1);
    59b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    59b5:	48 89 c7             	mov    %rax,%rdi
    59b8:	e8 23 c7 ff ff       	call   20e0 <free@plt>
	return (str);
    59bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    59c1:	c9                   	leave  
    59c2:	c3                   	ret    

00000000000059c3 <ft_ctoi>:
/* ************************************************************************** */

#include "utils.h"

int	ft_ctoi(const char str)
{
    59c3:	f3 0f 1e fa          	endbr64 
    59c7:	55                   	push   %rbp
    59c8:	48 89 e5             	mov    %rsp,%rbp
    59cb:	89 f8                	mov    %edi,%eax
    59cd:	88 45 ec             	mov    %al,-0x14(%rbp)
	unsigned long int	nbr;

	nbr = 0;
    59d0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    59d7:	00 
	if ((char)str == '-')
    59d8:	80 7d ec 2d          	cmpb   $0x2d,-0x14(%rbp)
    59dc:	75 07                	jne    59e5 <ft_ctoi+0x22>
		return (-1);
    59de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    59e3:	eb 34                	jmp    5a19 <ft_ctoi+0x56>
	if ((char)str >= '0' && (char)str <= '9')
    59e5:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
    59e9:	7e 2a                	jle    5a15 <ft_ctoi+0x52>
    59eb:	80 7d ec 39          	cmpb   $0x39,-0x14(%rbp)
    59ef:	7f 24                	jg     5a15 <ft_ctoi+0x52>
		nbr = nbr * 10 + ((char)str - '0');
    59f1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    59f5:	48 89 d0             	mov    %rdx,%rax
    59f8:	48 c1 e0 02          	shl    $0x2,%rax
    59fc:	48 01 d0             	add    %rdx,%rax
    59ff:	48 01 c0             	add    %rax,%rax
    5a02:	48 89 c2             	mov    %rax,%rdx
    5a05:	0f be 45 ec          	movsbl -0x14(%rbp),%eax
    5a09:	83 e8 30             	sub    $0x30,%eax
    5a0c:	48 98                	cltq   
    5a0e:	48 01 d0             	add    %rdx,%rax
    5a11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return (nbr);
    5a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    5a19:	5d                   	pop    %rbp
    5a1a:	c3                   	ret    

0000000000005a1b <ft_atoi>:

int	ft_atoi(const char *str)
{
    5a1b:	f3 0f 1e fa          	endbr64 
    5a1f:	55                   	push   %rbp
    5a20:	48 89 e5             	mov    %rsp,%rbp
    5a23:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int					i;
	unsigned long int	nbr;
	int					sign;

	i = 0;
    5a27:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	nbr = 0;
    5a2e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    5a35:	00 
	sign = 0;
    5a36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (!str)
    5a3d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
    5a42:	75 0e                	jne    5a52 <ft_atoi+0x37>
		return (0);
    5a44:	b8 00 00 00 00       	mov    $0x0,%eax
    5a49:	e9 08 01 00 00       	jmp    5b56 <ft_atoi+0x13b>
	while ((str[i] >= 9 && str[i] <= 13) || str[i] == ' ')
		i++;
    5a4e:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
	while ((str[i] >= 9 && str[i] <= 13) || str[i] == ' ')
    5a52:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5a55:	48 63 d0             	movslq %eax,%rdx
    5a58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5a5c:	48 01 d0             	add    %rdx,%rax
    5a5f:	0f b6 00             	movzbl (%rax),%eax
    5a62:	3c 08                	cmp    $0x8,%al
    5a64:	7e 14                	jle    5a7a <ft_atoi+0x5f>
    5a66:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5a69:	48 63 d0             	movslq %eax,%rdx
    5a6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5a70:	48 01 d0             	add    %rdx,%rax
    5a73:	0f b6 00             	movzbl (%rax),%eax
    5a76:	3c 0d                	cmp    $0xd,%al
    5a78:	7e d4                	jle    5a4e <ft_atoi+0x33>
    5a7a:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5a7d:	48 63 d0             	movslq %eax,%rdx
    5a80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5a84:	48 01 d0             	add    %rdx,%rax
    5a87:	0f b6 00             	movzbl (%rax),%eax
    5a8a:	3c 20                	cmp    $0x20,%al
    5a8c:	74 c0                	je     5a4e <ft_atoi+0x33>
	if ((char)str[i] == '-' || (char)str[i] == '+')
    5a8e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5a91:	48 63 d0             	movslq %eax,%rdx
    5a94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5a98:	48 01 d0             	add    %rdx,%rax
    5a9b:	0f b6 00             	movzbl (%rax),%eax
    5a9e:	3c 2d                	cmp    $0x2d,%al
    5aa0:	74 14                	je     5ab6 <ft_atoi+0x9b>
    5aa2:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5aa5:	48 63 d0             	movslq %eax,%rdx
    5aa8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5aac:	48 01 d0             	add    %rdx,%rax
    5aaf:	0f b6 00             	movzbl (%rax),%eax
    5ab2:	3c 2b                	cmp    $0x2b,%al
    5ab4:	75 59                	jne    5b0f <ft_atoi+0xf4>
		if ((char)str[i++] == '-')
    5ab6:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5ab9:	8d 50 01             	lea    0x1(%rax),%edx
    5abc:	89 55 f0             	mov    %edx,-0x10(%rbp)
    5abf:	48 63 d0             	movslq %eax,%rdx
    5ac2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ac6:	48 01 d0             	add    %rdx,%rax
    5ac9:	0f b6 00             	movzbl (%rax),%eax
    5acc:	3c 2d                	cmp    $0x2d,%al
    5ace:	75 3f                	jne    5b0f <ft_atoi+0xf4>
			sign++;
    5ad0:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
	while ((char)str[i] >= '0' && (char)str[i] <= '9')
    5ad4:	eb 39                	jmp    5b0f <ft_atoi+0xf4>
		nbr = nbr * 10 + ((char)str[i++] - '0');
    5ad6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    5ada:	48 89 d0             	mov    %rdx,%rax
    5add:	48 c1 e0 02          	shl    $0x2,%rax
    5ae1:	48 01 d0             	add    %rdx,%rax
    5ae4:	48 01 c0             	add    %rax,%rax
    5ae7:	48 89 c1             	mov    %rax,%rcx
    5aea:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5aed:	8d 50 01             	lea    0x1(%rax),%edx
    5af0:	89 55 f0             	mov    %edx,-0x10(%rbp)
    5af3:	48 63 d0             	movslq %eax,%rdx
    5af6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5afa:	48 01 d0             	add    %rdx,%rax
    5afd:	0f b6 00             	movzbl (%rax),%eax
    5b00:	0f be c0             	movsbl %al,%eax
    5b03:	83 e8 30             	sub    $0x30,%eax
    5b06:	48 98                	cltq   
    5b08:	48 01 c8             	add    %rcx,%rax
    5b0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	while ((char)str[i] >= '0' && (char)str[i] <= '9')
    5b0f:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5b12:	48 63 d0             	movslq %eax,%rdx
    5b15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b19:	48 01 d0             	add    %rdx,%rax
    5b1c:	0f b6 00             	movzbl (%rax),%eax
    5b1f:	3c 2f                	cmp    $0x2f,%al
    5b21:	7e 14                	jle    5b37 <ft_atoi+0x11c>
    5b23:	8b 45 f0             	mov    -0x10(%rbp),%eax
    5b26:	48 63 d0             	movslq %eax,%rdx
    5b29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b2d:	48 01 d0             	add    %rdx,%rax
    5b30:	0f b6 00             	movzbl (%rax),%eax
    5b33:	3c 39                	cmp    $0x39,%al
    5b35:	7e 9f                	jle    5ad6 <ft_atoi+0xbb>
	if (sign % 2 == 1)
    5b37:	8b 45 f4             	mov    -0xc(%rbp),%eax
    5b3a:	99                   	cltd   
    5b3b:	c1 ea 1f             	shr    $0x1f,%edx
    5b3e:	01 d0                	add    %edx,%eax
    5b40:	83 e0 01             	and    $0x1,%eax
    5b43:	29 d0                	sub    %edx,%eax
    5b45:	83 f8 01             	cmp    $0x1,%eax
    5b48:	75 08                	jne    5b52 <ft_atoi+0x137>
		return (nbr * -1);
    5b4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5b4e:	f7 d8                	neg    %eax
    5b50:	eb 04                	jmp    5b56 <ft_atoi+0x13b>
	return (nbr);
    5b52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    5b56:	5d                   	pop    %rbp
    5b57:	c3                   	ret    

0000000000005b58 <ft_replace>:
/* ************************************************************************** */

#include "utils.h"

void	ft_replace(char *src, char to_rep, char set)
{
    5b58:	f3 0f 1e fa          	endbr64 
    5b5c:	55                   	push   %rbp
    5b5d:	48 89 e5             	mov    %rsp,%rbp
    5b60:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    5b64:	89 f1                	mov    %esi,%ecx
    5b66:	89 d0                	mov    %edx,%eax
    5b68:	89 ca                	mov    %ecx,%edx
    5b6a:	88 55 e4             	mov    %dl,-0x1c(%rbp)
    5b6d:	88 45 e0             	mov    %al,-0x20(%rbp)
	int	i;

	i = -1;
    5b70:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
	while (src[++i])
    5b77:	eb 28                	jmp    5ba1 <ft_replace+0x49>
	{
		if (src[i] == to_rep)
    5b79:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5b7c:	48 63 d0             	movslq %eax,%rdx
    5b7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b83:	48 01 d0             	add    %rdx,%rax
    5b86:	0f b6 00             	movzbl (%rax),%eax
    5b89:	38 45 e4             	cmp    %al,-0x1c(%rbp)
    5b8c:	75 13                	jne    5ba1 <ft_replace+0x49>
			src[i] = set;
    5b8e:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5b91:	48 63 d0             	movslq %eax,%rdx
    5b94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5b98:	48 01 c2             	add    %rax,%rdx
    5b9b:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
    5b9f:	88 02                	mov    %al,(%rdx)
	while (src[++i])
    5ba1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    5ba5:	8b 45 fc             	mov    -0x4(%rbp),%eax
    5ba8:	48 63 d0             	movslq %eax,%rdx
    5bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5baf:	48 01 d0             	add    %rdx,%rax
    5bb2:	0f b6 00             	movzbl (%rax),%eax
    5bb5:	84 c0                	test   %al,%al
    5bb7:	75 c0                	jne    5b79 <ft_replace+0x21>
	}
}
    5bb9:	90                   	nop
    5bba:	90                   	nop
    5bbb:	5d                   	pop    %rbp
    5bbc:	c3                   	ret    

0000000000005bbd <payload>:
/* ************************************************************************** */

#include "woody.h"

void	payload(void)
{
    5bbd:	f3 0f 1e fa          	endbr64 
    5bc1:	55                   	push   %rbp
    5bc2:	48 89 e5             	mov    %rsp,%rbp
	write(STDOUT_FILENO, "....WOODY....\n", 15);
    5bc5:	ba 0f 00 00 00       	mov    $0xf,%edx
    5bca:	48 8d 05 6a 1d 00 00 	lea    0x1d6a(%rip),%rax        # 793b <_IO_stdin_used+0x93b>
    5bd1:	48 89 c6             	mov    %rax,%rsi
    5bd4:	bf 01 00 00 00       	mov    $0x1,%edi
    5bd9:	e8 32 c5 ff ff       	call   2110 <write@plt>
}
    5bde:	90                   	nop
    5bdf:	5d                   	pop    %rbp
    5be0:	c3                   	ret    

0000000000005be1 <main>:
/* ************************************************************************** */

#include "woody.h"

int	main(int ac, char **av)
{
    5be1:	f3 0f 1e fa          	endbr64 
    5be5:	55                   	push   %rbp
    5be6:	48 89 e5             	mov    %rsp,%rbp
    5be9:	48 83 ec 30          	sub    $0x30,%rsp
    5bed:	89 7d dc             	mov    %edi,-0x24(%rbp)
    5bf0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	if (ac != 2)
    5bf4:	83 7d dc 02          	cmpl   $0x2,-0x24(%rbp)
    5bf8:	74 28                	je     5c22 <main+0x41>
	{
		printf("Usage: %s <file>\n", av[0]);
    5bfa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5bfe:	48 8b 00             	mov    (%rax),%rax
    5c01:	48 89 c6             	mov    %rax,%rsi
    5c04:	48 8d 05 ee 1e 00 00 	lea    0x1eee(%rip),%rax        # 7af9 <_IO_stdin_used+0xaf9>
    5c0b:	48 89 c7             	mov    %rax,%rdi
    5c0e:	b8 00 00 00 00       	mov    $0x0,%eax
    5c13:	e8 18 c5 ff ff       	call   2130 <printf@plt>
		return (1);
    5c18:	b8 01 00 00 00       	mov    $0x1,%eax
    5c1d:	e9 04 01 00 00       	jmp    5d26 <main+0x145>
	}

	int fd = open(av[1], O_RDONLY);
    5c22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5c26:	48 83 c0 08          	add    $0x8,%rax
    5c2a:	48 8b 00             	mov    (%rax),%rax
    5c2d:	be 00 00 00 00       	mov    $0x0,%esi
    5c32:	48 89 c7             	mov    %rax,%rdi
    5c35:	b8 00 00 00 00       	mov    $0x0,%eax
    5c3a:	e8 31 c5 ff ff       	call   2170 <open@plt>
    5c3f:	89 45 ec             	mov    %eax,-0x14(%rbp)
	if (fd == -1)
    5c42:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%rbp)
    5c46:	75 2c                	jne    5c74 <main+0x93>
	{
		printf("Error: Cannot open file %s\n", av[1]);
    5c48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5c4c:	48 83 c0 08          	add    $0x8,%rax
    5c50:	48 8b 00             	mov    (%rax),%rax
    5c53:	48 89 c6             	mov    %rax,%rsi
    5c56:	48 8d 05 ae 1e 00 00 	lea    0x1eae(%rip),%rax        # 7b0b <_IO_stdin_used+0xb0b>
    5c5d:	48 89 c7             	mov    %rax,%rdi
    5c60:	b8 00 00 00 00       	mov    $0x0,%eax
    5c65:	e8 c6 c4 ff ff       	call   2130 <printf@plt>
		return (1);
    5c6a:	b8 01 00 00 00       	mov    $0x1,%eax
    5c6f:	e9 b2 00 00 00       	jmp    5d26 <main+0x145>
	}

	/**
	 * Create new reader
	 */
	t_binary_reader *reader = new_binary_reader(fd);
    5c74:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5c77:	89 c7                	mov    %eax,%edi
    5c79:	e8 ae d0 ff ff       	call   2d2c <new_binary_reader>
    5c7e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	if (!reader)
    5c82:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    5c87:	75 29                	jne    5cb2 <main+0xd1>
	{
		printf("Error: Cannot read file %s\n", av[1]);
    5c89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5c8d:	48 83 c0 08          	add    $0x8,%rax
    5c91:	48 8b 00             	mov    (%rax),%rax
    5c94:	48 89 c6             	mov    %rax,%rsi
    5c97:	48 8d 05 89 1e 00 00 	lea    0x1e89(%rip),%rax        # 7b27 <_IO_stdin_used+0xb27>
    5c9e:	48 89 c7             	mov    %rax,%rdi
    5ca1:	b8 00 00 00 00       	mov    $0x0,%eax
    5ca6:	e8 85 c4 ff ff       	call   2130 <printf@plt>
		return (1);
    5cab:	b8 01 00 00 00       	mov    $0x1,%eax
    5cb0:	eb 74                	jmp    5d26 <main+0x145>
	}
	
	// Get the file e_type reading 3 bytes as a string
	t_elf_file *elf_file = new_elf_file(reader);
    5cb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5cb6:	48 89 c7             	mov    %rax,%rdi
    5cb9:	e8 99 da ff ff       	call   3757 <new_elf_file>
    5cbe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (elf_file == NULL)
    5cc2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    5cc7:	75 29                	jne    5cf2 <main+0x111>
	{
		printf("Error: Cannot get format for file %s\n", av[1]);
    5cc9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5ccd:	48 83 c0 08          	add    $0x8,%rax
    5cd1:	48 8b 00             	mov    (%rax),%rax
    5cd4:	48 89 c6             	mov    %rax,%rsi
    5cd7:	48 8d 05 6a 1e 00 00 	lea    0x1e6a(%rip),%rax        # 7b48 <_IO_stdin_used+0xb48>
    5cde:	48 89 c7             	mov    %rax,%rdi
    5ce1:	b8 00 00 00 00       	mov    $0x0,%eax
    5ce6:	e8 45 c4 ff ff       	call   2130 <printf@plt>
		return (1);
    5ceb:	b8 01 00 00 00       	mov    $0x1,%eax
    5cf0:	eb 34                	jmp    5d26 <main+0x145>
	}

	print_elf_file(elf_file);
    5cf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cf6:	48 89 c7             	mov    %rax,%rdi
    5cf9:	e8 07 df ff ff       	call   3c05 <print_elf_file>

	printf("\nPayload: %p %lu\n", payload, sizeof(payload));
    5cfe:	ba 01 00 00 00       	mov    $0x1,%edx
    5d03:	48 8d 05 b3 fe ff ff 	lea    -0x14d(%rip),%rax        # 5bbd <payload>
    5d0a:	48 89 c6             	mov    %rax,%rsi
    5d0d:	48 8d 05 5a 1e 00 00 	lea    0x1e5a(%rip),%rax        # 7b6e <_IO_stdin_used+0xb6e>
    5d14:	48 89 c7             	mov    %rax,%rdi
    5d17:	b8 00 00 00 00       	mov    $0x0,%eax
    5d1c:	e8 0f c4 ff ff       	call   2130 <printf@plt>
    5d21:	b8 00 00 00 00       	mov    $0x0,%eax
	// packer(elf_file, new_elf_file, reader);

	// delete_binary_reader(reader);
	// delete_elf_file(elf_file);
	// delete_elf_file(new_elf_file);
}
    5d26:	c9                   	leave  
    5d27:	c3                   	ret    

0000000000005d28 <strip_sections>:
/* ************************************************************************** */

#include "woody.h"

static int	strip_sections(t_elf_file *old_elf_file, t_elf_file *new_elf_file, t_binary_reader *reader)
{
    5d28:	f3 0f 1e fa          	endbr64 
    5d2c:	55                   	push   %rbp
    5d2d:	48 89 e5             	mov    %rsp,%rbp
    5d30:	53                   	push   %rbx
    5d31:	48 83 ec 38          	sub    $0x38,%rsp
    5d35:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5d39:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5d3d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	new_elf_file->section_tables = NULL;
    5d41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5d45:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
    5d4c:	00 
	int j = 0;
    5d4d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
	for (int i = 0; i < old_elf_file->e_shnum; i++)
    5d54:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    5d5b:	e9 f9 00 00 00       	jmp    5e59 <strip_sections+0x131>
	{
		if (old_elf_file->section_tables[i].sh_type == 0x1) // PROGBITS
    5d60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5d64:	48 8b 48 60          	mov    0x60(%rax),%rcx
    5d68:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5d6b:	48 63 d0             	movslq %eax,%rdx
    5d6e:	48 89 d0             	mov    %rdx,%rax
    5d71:	48 01 c0             	add    %rax,%rax
    5d74:	48 01 d0             	add    %rdx,%rax
    5d77:	48 c1 e0 04          	shl    $0x4,%rax
    5d7b:	48 01 c8             	add    %rcx,%rax
    5d7e:	8b 40 04             	mov    0x4(%rax),%eax
    5d81:	83 f8 01             	cmp    $0x1,%eax
    5d84:	0f 85 cb 00 00 00    	jne    5e55 <strip_sections+0x12d>
		{
			new_elf_file->section_tables = ft_realloc(new_elf_file->section_tables, sizeof(t_elf_section_table) * (i + 1));
    5d8a:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5d8d:	83 c0 01             	add    $0x1,%eax
    5d90:	48 63 d0             	movslq %eax,%rdx
    5d93:	48 89 d0             	mov    %rdx,%rax
    5d96:	48 01 c0             	add    %rax,%rax
    5d99:	48 01 d0             	add    %rdx,%rax
    5d9c:	48 c1 e0 04          	shl    $0x4,%rax
    5da0:	48 89 c2             	mov    %rax,%rdx
    5da3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5da7:	48 8b 40 60          	mov    0x60(%rax),%rax
    5dab:	48 89 d6             	mov    %rdx,%rsi
    5dae:	48 89 c7             	mov    %rax,%rdi
    5db1:	e8 cf f5 ff ff       	call   5385 <ft_realloc>
    5db6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    5dba:	48 89 42 60          	mov    %rax,0x60(%rdx)
			if (!new_elf_file->section_tables)
    5dbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5dc2:	48 8b 40 60          	mov    0x60(%rax),%rax
    5dc6:	48 85 c0             	test   %rax,%rax
    5dc9:	75 19                	jne    5de4 <strip_sections+0xbc>
				return (ft_error(WD_PREFIX"Could not allocate memory.\n"), 1);
    5dcb:	48 8d 05 5e 1f 00 00 	lea    0x1f5e(%rip),%rax        # 7d30 <_IO_stdin_used+0xd30>
    5dd2:	48 89 c7             	mov    %rax,%rdi
    5dd5:	e8 57 e7 ff ff       	call   4531 <ft_error>
    5dda:	b8 01 00 00 00       	mov    $0x1,%eax
    5ddf:	e9 9b 00 00 00       	jmp    5e7f <strip_sections+0x157>
			new_elf_file->section_tables[j++] = old_elf_file->section_tables[i];
    5de4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5de8:	48 8b 48 60          	mov    0x60(%rax),%rcx
    5dec:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5def:	48 63 d0             	movslq %eax,%rdx
    5df2:	48 89 d0             	mov    %rdx,%rax
    5df5:	48 01 c0             	add    %rax,%rax
    5df8:	48 01 d0             	add    %rdx,%rax
    5dfb:	48 c1 e0 04          	shl    $0x4,%rax
    5dff:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    5e03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5e07:	48 8b 70 60          	mov    0x60(%rax),%rsi
    5e0b:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5e0e:	8d 48 01             	lea    0x1(%rax),%ecx
    5e11:	89 4d e8             	mov    %ecx,-0x18(%rbp)
    5e14:	48 63 c8             	movslq %eax,%rcx
    5e17:	48 89 c8             	mov    %rcx,%rax
    5e1a:	48 01 c0             	add    %rax,%rax
    5e1d:	48 01 c8             	add    %rcx,%rax
    5e20:	48 c1 e0 04          	shl    $0x4,%rax
    5e24:	48 01 f0             	add    %rsi,%rax
    5e27:	48 8b 0a             	mov    (%rdx),%rcx
    5e2a:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
    5e2e:	48 89 08             	mov    %rcx,(%rax)
    5e31:	48 89 58 08          	mov    %rbx,0x8(%rax)
    5e35:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
    5e39:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
    5e3d:	48 89 48 10          	mov    %rcx,0x10(%rax)
    5e41:	48 89 58 18          	mov    %rbx,0x18(%rax)
    5e45:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
    5e49:	48 8b 5a 28          	mov    0x28(%rdx),%rbx
    5e4d:	48 89 48 20          	mov    %rcx,0x20(%rax)
    5e51:	48 89 58 28          	mov    %rbx,0x28(%rax)
	for (int i = 0; i < old_elf_file->e_shnum; i++)
    5e55:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    5e59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5e5d:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    5e61:	0f b7 c0             	movzwl %ax,%eax
    5e64:	39 45 ec             	cmp    %eax,-0x14(%rbp)
    5e67:	0f 8c f3 fe ff ff    	jl     5d60 <strip_sections+0x38>
		}
	}
	new_elf_file->e_shnum = j;
    5e6d:	8b 45 e8             	mov    -0x18(%rbp),%eax
    5e70:	89 c2                	mov    %eax,%edx
    5e72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5e76:	66 89 50 56          	mov    %dx,0x56(%rax)
	return (0);
    5e7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    5e7f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5e83:	c9                   	leave  
    5e84:	c3                   	ret    

0000000000005e85 <strip_program_headers>:

static int strip_program_headers(t_elf_file *old_elf_file, t_elf_file *new_elf_file, t_binary_reader *reader)
{
    5e85:	f3 0f 1e fa          	endbr64 
    5e89:	55                   	push   %rbp
    5e8a:	48 89 e5             	mov    %rsp,%rbp
    5e8d:	53                   	push   %rbx
    5e8e:	48 83 ec 38          	sub    $0x38,%rsp
    5e92:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5e96:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    5e9a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	new_elf_file->program_headers = NULL;
    5e9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5ea2:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
    5ea9:	00 
	int j = 0;
    5eaa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
	
	for (int i = 0; i < old_elf_file->e_phnum; i++)
    5eb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
    5eb8:	e9 fb 01 00 00       	jmp    60b8 <strip_program_headers+0x233>
	{
		// Vérifie si le segment contient des sections
		int has_sections = 0;
    5ebd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
		for (int k = 0; k < old_elf_file->e_shnum; k++)
    5ec4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
    5ecb:	e9 f0 00 00 00       	jmp    5fc0 <strip_program_headers+0x13b>
		{
			// if (new_elf_file->section_tables[k].sh_type == 0x0) continue;

			// if (new_elf_file->section_tables[k].sh_address >= old_elf_file->program_headers[i].p_vaddr &&
			if (new_elf_file->section_tables[k].sh_address > old_elf_file->program_headers[i].p_vaddr &&
    5ed0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5ed4:	48 8b 48 60          	mov    0x60(%rax),%rcx
    5ed8:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5edb:	48 63 d0             	movslq %eax,%rdx
    5ede:	48 89 d0             	mov    %rdx,%rax
    5ee1:	48 01 c0             	add    %rax,%rax
    5ee4:	48 01 d0             	add    %rdx,%rax
    5ee7:	48 c1 e0 04          	shl    $0x4,%rax
    5eeb:	48 01 c8             	add    %rcx,%rax
    5eee:	48 8b 48 10          	mov    0x10(%rax),%rcx
    5ef2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5ef6:	48 8b 70 68          	mov    0x68(%rax),%rsi
    5efa:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    5efd:	48 63 d0             	movslq %eax,%rdx
    5f00:	48 89 d0             	mov    %rdx,%rax
    5f03:	48 c1 e0 03          	shl    $0x3,%rax
    5f07:	48 29 d0             	sub    %rdx,%rax
    5f0a:	48 c1 e0 03          	shl    $0x3,%rax
    5f0e:	48 01 f0             	add    %rsi,%rax
    5f11:	48 8b 40 10          	mov    0x10(%rax),%rax
    5f15:	48 39 c1             	cmp    %rax,%rcx
    5f18:	0f 86 9e 00 00 00    	jbe    5fbc <strip_program_headers+0x137>
				new_elf_file->section_tables[k].sh_address + new_elf_file->section_tables[k].sh_size <=
    5f1e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5f22:	48 8b 48 60          	mov    0x60(%rax),%rcx
    5f26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5f29:	48 63 d0             	movslq %eax,%rdx
    5f2c:	48 89 d0             	mov    %rdx,%rax
    5f2f:	48 01 c0             	add    %rax,%rax
    5f32:	48 01 d0             	add    %rdx,%rax
    5f35:	48 c1 e0 04          	shl    $0x4,%rax
    5f39:	48 01 c8             	add    %rcx,%rax
    5f3c:	48 8b 48 10          	mov    0x10(%rax),%rcx
    5f40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5f44:	48 8b 70 60          	mov    0x60(%rax),%rsi
    5f48:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5f4b:	48 63 d0             	movslq %eax,%rdx
    5f4e:	48 89 d0             	mov    %rdx,%rax
    5f51:	48 01 c0             	add    %rax,%rax
    5f54:	48 01 d0             	add    %rdx,%rax
    5f57:	48 c1 e0 04          	shl    $0x4,%rax
    5f5b:	48 01 f0             	add    %rsi,%rax
    5f5e:	48 8b 40 20          	mov    0x20(%rax),%rax
    5f62:	48 01 c1             	add    %rax,%rcx
					old_elf_file->program_headers[i].p_vaddr + old_elf_file->program_headers[i].p_memsz)
    5f65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f69:	48 8b 70 68          	mov    0x68(%rax),%rsi
    5f6d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    5f70:	48 63 d0             	movslq %eax,%rdx
    5f73:	48 89 d0             	mov    %rdx,%rax
    5f76:	48 c1 e0 03          	shl    $0x3,%rax
    5f7a:	48 29 d0             	sub    %rdx,%rax
    5f7d:	48 c1 e0 03          	shl    $0x3,%rax
    5f81:	48 01 f0             	add    %rsi,%rax
    5f84:	48 8b 70 10          	mov    0x10(%rax),%rsi
    5f88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5f8c:	48 8b 78 68          	mov    0x68(%rax),%rdi
    5f90:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    5f93:	48 63 d0             	movslq %eax,%rdx
    5f96:	48 89 d0             	mov    %rdx,%rax
    5f99:	48 c1 e0 03          	shl    $0x3,%rax
    5f9d:	48 29 d0             	sub    %rdx,%rax
    5fa0:	48 c1 e0 03          	shl    $0x3,%rax
    5fa4:	48 01 f8             	add    %rdi,%rax
    5fa7:	48 8b 40 28          	mov    0x28(%rax),%rax
    5fab:	48 01 f0             	add    %rsi,%rax
			if (new_elf_file->section_tables[k].sh_address > old_elf_file->program_headers[i].p_vaddr &&
    5fae:	48 39 c1             	cmp    %rax,%rcx
    5fb1:	77 09                	ja     5fbc <strip_program_headers+0x137>
			{
				has_sections = 1;
    5fb3:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
				break;
    5fba:	eb 18                	jmp    5fd4 <strip_program_headers+0x14f>
		for (int k = 0; k < old_elf_file->e_shnum; k++)
    5fbc:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
    5fc0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5fc4:	0f b7 40 56          	movzwl 0x56(%rax),%eax
    5fc8:	0f b7 c0             	movzwl %ax,%eax
    5fcb:	39 45 ec             	cmp    %eax,-0x14(%rbp)
    5fce:	0f 8c fc fe ff ff    	jl     5ed0 <strip_program_headers+0x4b>
			}
		}
		
		// Si le segment ne contient pas de sections, ne l'ajoute pas aux nouveaux en-têtes de programme
		if (has_sections)
    5fd4:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
    5fd8:	0f 84 d6 00 00 00    	je     60b4 <strip_program_headers+0x22f>
		{
			new_elf_file->program_headers = ft_realloc(new_elf_file->program_headers, sizeof(t_elf_program_header) * (j + 1));
    5fde:	8b 45 e0             	mov    -0x20(%rbp),%eax
    5fe1:	83 c0 01             	add    $0x1,%eax
    5fe4:	48 63 d0             	movslq %eax,%rdx
    5fe7:	48 89 d0             	mov    %rdx,%rax
    5fea:	48 c1 e0 03          	shl    $0x3,%rax
    5fee:	48 29 d0             	sub    %rdx,%rax
    5ff1:	48 c1 e0 03          	shl    $0x3,%rax
    5ff5:	48 89 c2             	mov    %rax,%rdx
    5ff8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    5ffc:	48 8b 40 68          	mov    0x68(%rax),%rax
    6000:	48 89 d6             	mov    %rdx,%rsi
    6003:	48 89 c7             	mov    %rax,%rdi
    6006:	e8 7a f3 ff ff       	call   5385 <ft_realloc>
    600b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    600f:	48 89 42 68          	mov    %rax,0x68(%rdx)
			if (!new_elf_file->program_headers)
    6013:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    6017:	48 8b 40 68          	mov    0x68(%rax),%rax
    601b:	48 85 c0             	test   %rax,%rax
    601e:	75 19                	jne    6039 <strip_program_headers+0x1b4>
				return (ft_error(WD_PREFIX "Could not allocate memory.\n"), 1);
    6020:	48 8d 05 09 1d 00 00 	lea    0x1d09(%rip),%rax        # 7d30 <_IO_stdin_used+0xd30>
    6027:	48 89 c7             	mov    %rax,%rdi
    602a:	e8 02 e5 ff ff       	call   4531 <ft_error>
    602f:	b8 01 00 00 00       	mov    $0x1,%eax
    6034:	e9 a5 00 00 00       	jmp    60de <strip_program_headers+0x259>
			new_elf_file->program_headers[j++] = old_elf_file->program_headers[i];
    6039:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    603d:	48 8b 48 68          	mov    0x68(%rax),%rcx
    6041:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    6044:	48 63 d0             	movslq %eax,%rdx
    6047:	48 89 d0             	mov    %rdx,%rax
    604a:	48 c1 e0 03          	shl    $0x3,%rax
    604e:	48 29 d0             	sub    %rdx,%rax
    6051:	48 c1 e0 03          	shl    $0x3,%rax
    6055:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
    6059:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    605d:	48 8b 70 68          	mov    0x68(%rax),%rsi
    6061:	8b 45 e0             	mov    -0x20(%rbp),%eax
    6064:	8d 48 01             	lea    0x1(%rax),%ecx
    6067:	89 4d e0             	mov    %ecx,-0x20(%rbp)
    606a:	48 63 c8             	movslq %eax,%rcx
    606d:	48 89 c8             	mov    %rcx,%rax
    6070:	48 c1 e0 03          	shl    $0x3,%rax
    6074:	48 29 c8             	sub    %rcx,%rax
    6077:	48 c1 e0 03          	shl    $0x3,%rax
    607b:	48 01 f0             	add    %rsi,%rax
    607e:	48 8b 0a             	mov    (%rdx),%rcx
    6081:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
    6085:	48 89 08             	mov    %rcx,(%rax)
    6088:	48 89 58 08          	mov    %rbx,0x8(%rax)
    608c:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
    6090:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
    6094:	48 89 48 10          	mov    %rcx,0x10(%rax)
    6098:	48 89 58 18          	mov    %rbx,0x18(%rax)
    609c:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
    60a0:	48 8b 5a 28          	mov    0x28(%rdx),%rbx
    60a4:	48 89 48 20          	mov    %rcx,0x20(%rax)
    60a8:	48 89 58 28          	mov    %rbx,0x28(%rax)
    60ac:	48 8b 52 30          	mov    0x30(%rdx),%rdx
    60b0:	48 89 50 30          	mov    %rdx,0x30(%rax)
	for (int i = 0; i < old_elf_file->e_phnum; i++)
    60b4:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
    60b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    60bc:	0f b7 40 52          	movzwl 0x52(%rax),%eax
    60c0:	0f b7 c0             	movzwl %ax,%eax
    60c3:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
    60c6:	0f 8c f1 fd ff ff    	jl     5ebd <strip_program_headers+0x38>
		}
	}
	
	new_elf_file->e_phnum = j;
    60cc:	8b 45 e0             	mov    -0x20(%rbp),%eax
    60cf:	89 c2                	mov    %eax,%edx
    60d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    60d5:	66 89 50 52          	mov    %dx,0x52(%rax)
	return (0);
    60d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
    60de:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    60e2:	c9                   	leave  
    60e3:	c3                   	ret    

00000000000060e4 <packer>:

int	packer(t_elf_file *old_elf_file, t_elf_file *new_elf_file, t_binary_reader *reader)
{
    60e4:	f3 0f 1e fa          	endbr64 
    60e8:	55                   	push   %rbp
    60e9:	48 89 e5             	mov    %rsp,%rbp
    60ec:	48 83 ec 30          	sub    $0x30,%rsp
    60f0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    60f4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    60f8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int fd = open("woody", O_CREAT | O_WRONLY | O_TRUNC, 0755);
    60fc:	ba ed 01 00 00       	mov    $0x1ed,%edx
    6101:	be 41 02 00 00       	mov    $0x241,%esi
    6106:	48 8d 05 46 1c 00 00 	lea    0x1c46(%rip),%rax        # 7d53 <_IO_stdin_used+0xd53>
    610d:	48 89 c7             	mov    %rax,%rdi
    6110:	b8 00 00 00 00       	mov    $0x0,%eax
    6115:	e8 56 c0 ff ff       	call   2170 <open@plt>
    611a:	89 45 f8             	mov    %eax,-0x8(%rbp)
	if (fd == -1)
    611d:	83 7d f8 ff          	cmpl   $0xffffffff,-0x8(%rbp)
    6121:	75 19                	jne    613c <packer+0x58>
		return (ft_error(WD_PREFIX"Could not open file.\n"), 1);
    6123:	48 8d 05 2f 1c 00 00 	lea    0x1c2f(%rip),%rax        # 7d59 <_IO_stdin_used+0xd59>
    612a:	48 89 c7             	mov    %rax,%rdi
    612d:	e8 ff e3 ff ff       	call   4531 <ft_error>
    6132:	b8 01 00 00 00       	mov    $0x1,%eax
    6137:	e9 16 02 00 00       	jmp    6352 <packer+0x26e>

	uint32_t magic = 0x464C457F;
    613c:	c7 45 fc 7f 45 4c 46 	movl   $0x464c457f,-0x4(%rbp)
	write(fd, new_elf_file->e_ident.raw, 16);
    6143:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    6147:	8b 45 f8             	mov    -0x8(%rbp),%eax
    614a:	ba 10 00 00 00       	mov    $0x10,%edx
    614f:	48 89 ce             	mov    %rcx,%rsi
    6152:	89 c7                	mov    %eax,%edi
    6154:	e8 b7 bf ff ff       	call   2110 <write@plt>
	write(fd, &new_elf_file->e_type, 2);
    6159:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    615d:	48 8d 48 10          	lea    0x10(%rax),%rcx
    6161:	8b 45 f8             	mov    -0x8(%rbp),%eax
    6164:	ba 02 00 00 00       	mov    $0x2,%edx
    6169:	48 89 ce             	mov    %rcx,%rsi
    616c:	89 c7                	mov    %eax,%edi
    616e:	e8 9d bf ff ff       	call   2110 <write@plt>
	write(fd, &new_elf_file->e_machine, 2);
    6173:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6177:	48 8d 48 20          	lea    0x20(%rax),%rcx
    617b:	8b 45 f8             	mov    -0x8(%rbp),%eax
    617e:	ba 02 00 00 00       	mov    $0x2,%edx
    6183:	48 89 ce             	mov    %rcx,%rsi
    6186:	89 c7                	mov    %eax,%edi
    6188:	e8 83 bf ff ff       	call   2110 <write@plt>
	write(fd, &new_elf_file->e_version, 4);
    618d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6191:	48 8d 48 24          	lea    0x24(%rax),%rcx
    6195:	8b 45 f8             	mov    -0x8(%rbp),%eax
    6198:	ba 04 00 00 00       	mov    $0x4,%edx
    619d:	48 89 ce             	mov    %rcx,%rsi
    61a0:	89 c7                	mov    %eax,%edi
    61a2:	e8 69 bf ff ff       	call   2110 <write@plt>
	write(fd, "\0\0\0\0\0\0\0\0", new_elf_file->e_ident.ei_class == WD_32BITS ? 4 : 8); // entry
    61a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    61ab:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    61af:	3c 01                	cmp    $0x1,%al
    61b1:	75 07                	jne    61ba <packer+0xd6>
    61b3:	ba 04 00 00 00       	mov    $0x4,%edx
    61b8:	eb 05                	jmp    61bf <packer+0xdb>
    61ba:	ba 08 00 00 00       	mov    $0x8,%edx
    61bf:	8b 45 f8             	mov    -0x8(%rbp),%eax
    61c2:	48 8d 0d ad 1b 00 00 	lea    0x1bad(%rip),%rcx        # 7d76 <_IO_stdin_used+0xd76>
    61c9:	48 89 ce             	mov    %rcx,%rsi
    61cc:	89 c7                	mov    %eax,%edi
    61ce:	e8 3d bf ff ff       	call   2110 <write@plt>
	write(fd, "\0\0\0\0\0\0\0\0", new_elf_file->e_ident.ei_class == WD_32BITS ? 4 : 8); // phoff
    61d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    61d7:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    61db:	3c 01                	cmp    $0x1,%al
    61dd:	75 07                	jne    61e6 <packer+0x102>
    61df:	ba 04 00 00 00       	mov    $0x4,%edx
    61e4:	eb 05                	jmp    61eb <packer+0x107>
    61e6:	ba 08 00 00 00       	mov    $0x8,%edx
    61eb:	8b 45 f8             	mov    -0x8(%rbp),%eax
    61ee:	48 8d 0d 81 1b 00 00 	lea    0x1b81(%rip),%rcx        # 7d76 <_IO_stdin_used+0xd76>
    61f5:	48 89 ce             	mov    %rcx,%rsi
    61f8:	89 c7                	mov    %eax,%edi
    61fa:	e8 11 bf ff ff       	call   2110 <write@plt>
	write(fd, "\0\0\0\0\0\0\0\0", new_elf_file->e_ident.ei_class == WD_32BITS ? 4 : 8); // shoff
    61ff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6203:	0f b6 40 04          	movzbl 0x4(%rax),%eax
    6207:	3c 01                	cmp    $0x1,%al
    6209:	75 07                	jne    6212 <packer+0x12e>
    620b:	ba 04 00 00 00       	mov    $0x4,%edx
    6210:	eb 05                	jmp    6217 <packer+0x133>
    6212:	ba 08 00 00 00       	mov    $0x8,%edx
    6217:	8b 45 f8             	mov    -0x8(%rbp),%eax
    621a:	48 8d 0d 55 1b 00 00 	lea    0x1b55(%rip),%rcx        # 7d76 <_IO_stdin_used+0xd76>
    6221:	48 89 ce             	mov    %rcx,%rsi
    6224:	89 c7                	mov    %eax,%edi
    6226:	e8 e5 be ff ff       	call   2110 <write@plt>
	write(fd, &new_elf_file->e_flags, 4);
    622b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    622f:	48 8d 48 40          	lea    0x40(%rax),%rcx
    6233:	8b 45 f8             	mov    -0x8(%rbp),%eax
    6236:	ba 04 00 00 00       	mov    $0x4,%edx
    623b:	48 89 ce             	mov    %rcx,%rsi
    623e:	89 c7                	mov    %eax,%edi
    6240:	e8 cb be ff ff       	call   2110 <write@plt>
	write(fd, &new_elf_file->e_ehsize, 2);
    6245:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6249:	48 8d 48 48          	lea    0x48(%rax),%rcx
    624d:	8b 45 f8             	mov    -0x8(%rbp),%eax
    6250:	ba 02 00 00 00       	mov    $0x2,%edx
    6255:	48 89 ce             	mov    %rcx,%rsi
    6258:	89 c7                	mov    %eax,%edi
    625a:	e8 b1 be ff ff       	call   2110 <write@plt>
	write(fd, &new_elf_file->e_phentsize, 2);
    625f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6263:	48 8d 48 50          	lea    0x50(%rax),%rcx
    6267:	8b 45 f8             	mov    -0x8(%rbp),%eax
    626a:	ba 02 00 00 00       	mov    $0x2,%edx
    626f:	48 89 ce             	mov    %rcx,%rsi
    6272:	89 c7                	mov    %eax,%edi
    6274:	e8 97 be ff ff       	call   2110 <write@plt>
	write(fd, &new_elf_file->e_phnum, 2);
    6279:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    627d:	48 8d 48 52          	lea    0x52(%rax),%rcx
    6281:	8b 45 f8             	mov    -0x8(%rbp),%eax
    6284:	ba 02 00 00 00       	mov    $0x2,%edx
    6289:	48 89 ce             	mov    %rcx,%rsi
    628c:	89 c7                	mov    %eax,%edi
    628e:	e8 7d be ff ff       	call   2110 <write@plt>
	write(fd, &new_elf_file->e_shentsize, 2);
    6293:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    6297:	48 8d 48 54          	lea    0x54(%rax),%rcx
    629b:	8b 45 f8             	mov    -0x8(%rbp),%eax
    629e:	ba 02 00 00 00       	mov    $0x2,%edx
    62a3:	48 89 ce             	mov    %rcx,%rsi
    62a6:	89 c7                	mov    %eax,%edi
    62a8:	e8 63 be ff ff       	call   2110 <write@plt>
	write(fd, "\0\0", 2);
    62ad:	8b 45 f8             	mov    -0x8(%rbp),%eax
    62b0:	ba 02 00 00 00       	mov    $0x2,%edx
    62b5:	48 8d 0d c3 1a 00 00 	lea    0x1ac3(%rip),%rcx        # 7d7f <_IO_stdin_used+0xd7f>
    62bc:	48 89 ce             	mov    %rcx,%rsi
    62bf:	89 c7                	mov    %eax,%edi
    62c1:	e8 4a be ff ff       	call   2110 <write@plt>
	write(fd, "\0\0", 2);
    62c6:	8b 45 f8             	mov    -0x8(%rbp),%eax
    62c9:	ba 02 00 00 00       	mov    $0x2,%edx
    62ce:	48 8d 0d aa 1a 00 00 	lea    0x1aaa(%rip),%rcx        # 7d7f <_IO_stdin_used+0xd7f>
    62d5:	48 89 ce             	mov    %rcx,%rsi
    62d8:	89 c7                	mov    %eax,%edi
    62da:	e8 31 be ff ff       	call   2110 <write@plt>

	if (strip_sections(old_elf_file, new_elf_file, reader))
    62df:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    62e3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    62e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    62eb:	48 89 ce             	mov    %rcx,%rsi
    62ee:	48 89 c7             	mov    %rax,%rdi
    62f1:	e8 32 fa ff ff       	call   5d28 <strip_sections>
    62f6:	85 c0                	test   %eax,%eax
    62f8:	74 11                	je     630b <packer+0x227>
	{
		close(fd);
    62fa:	8b 45 f8             	mov    -0x8(%rbp),%eax
    62fd:	89 c7                	mov    %eax,%edi
    62ff:	e8 3c be ff ff       	call   2140 <close@plt>
		return (1);
    6304:	b8 01 00 00 00       	mov    $0x1,%eax
    6309:	eb 47                	jmp    6352 <packer+0x26e>
	}

	if (strip_program_headers(old_elf_file, new_elf_file, reader))
    630b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    630f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    6313:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6317:	48 89 ce             	mov    %rcx,%rsi
    631a:	48 89 c7             	mov    %rax,%rdi
    631d:	e8 63 fb ff ff       	call   5e85 <strip_program_headers>
    6322:	85 c0                	test   %eax,%eax
    6324:	74 11                	je     6337 <packer+0x253>
	{
		close(fd);
    6326:	8b 45 f8             	mov    -0x8(%rbp),%eax
    6329:	89 c7                	mov    %eax,%edi
    632b:	e8 10 be ff ff       	call   2140 <close@plt>
		return (1);
    6330:	b8 01 00 00 00       	mov    $0x1,%eax
    6335:	eb 1b                	jmp    6352 <packer+0x26e>
	}

	print_elf_file(new_elf_file);
    6337:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    633b:	48 89 c7             	mov    %rax,%rdi
    633e:	e8 c2 d8 ff ff       	call   3c05 <print_elf_file>

	close(fd);
    6343:	8b 45 f8             	mov    -0x8(%rbp),%eax
    6346:	89 c7                	mov    %eax,%edi
    6348:	e8 f3 bd ff ff       	call   2140 <close@plt>
	return (0);
    634d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    6352:	c9                   	leave  
    6353:	c3                   	ret    

Disassembly of section .fini:

0000000000006354 <_fini>:
    6354:	f3 0f 1e fa          	endbr64 
    6358:	48 83 ec 08          	sub    $0x8,%rsp
    635c:	48 83 c4 08          	add    $0x8,%rsp
    6360:	c3                   	ret    
